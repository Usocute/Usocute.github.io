{
    "version": "https://jsonfeed.org/version/1",
    "title": "寻梦启事",
    "subtitle": "",
    "icon": "http://eliauk.cc/images/favicon.ico",
    "description": "",
    "home_page_url": "http://eliauk.cc",
    "items": [
        {
            "id": "http://eliauk.cc/mysql-Trigger/",
            "url": "http://eliauk.cc/mysql-Trigger/",
            "title": "MySQL 触发器",
            "date_published": "2020-09-30T07:01:04.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h2 id=\"mysql-触发器\"><a class=\"anchor\" href=\"#mysql-触发器\">#</a> MySQL 触发器</h2>\n<h4 id=\"触发器定义与用法实例\"><a class=\"anchor\" href=\"#触发器定义与用法实例\">#</a> 触发器定义与用法实例</h4>\n<p><strong>语法</strong></p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TRIGGER</span> 触发器名称  <span class=\"token comment\">-- 触发器必须有名字，最多 64 个字符，可能后面会附有分隔符。它和 MySQL 中其他对象的命名方式基本相象.</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>&#123; BEFORE <span class=\"token operator\">|</span> <span class=\"token keyword\">AFTER</span> &#125;  <span class=\"token comment\">-- 触发器有执行的时间设置：可以设置为事件发生前或后。</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>&#123; <span class=\"token keyword\">INSERT</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">UPDATE</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">DELETE</span> &#125;  <span class=\"token comment\">-- 同样也能设定触发的事件：它们可以在执行 insert、update 或 delete 的过程中触发。</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">ON</span> 表名称  <span class=\"token comment\">-- 触发器是属于某一个表的：当在这个表上执行插入、 更新或删除操作的时候就导致触发器的激活。我们不能给同一张表的同一个事件安排两个触发器。</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">FOR EACH ROW</span>  <span class=\"token comment\">-- 触发器的执行间隔：FOR EACH ROW 子句通知触发器 每隔一行执行一次动作，而不是对整个表执行一次。</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">&lt;</span>触发器<span class=\"token keyword\">SQL</span>语句<span class=\"token operator\">></span>  <span class=\"token comment\">-- 触发器包含所要触发的 SQL 语句：这里的语句可以是任何合法的语句， 包括复合语句，但是这里的语句受的限制和函数的一样。</span></pre></td></tr></table></figure><p><strong>实例准备工作</strong></p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 创建表 tab1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">DROP</span> <span class=\"token keyword\">TABLE</span> <span class=\"token keyword\">IF</span> <span class=\"token keyword\">EXISTS</span> tab1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> tab1<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  tab1_id <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">-- 创建表 tab2</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">DROP</span> <span class=\"token keyword\">TABLE</span> <span class=\"token keyword\">IF</span> <span class=\"token keyword\">EXISTS</span> tab2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> tab2<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  tab2_id <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>实例 1：新增一条，触发另外一张表的新增</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 创建触发器:t_afterinsert_on_tab1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">-- 作用：增加 tab1 表记录后自动将记录增加到 tab2 表中</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">DROP</span> <span class=\"token keyword\">TRIGGER</span> <span class=\"token keyword\">IF</span> <span class=\"token keyword\">EXISTS</span> t_afterinsert_on_tab1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TRIGGER</span> t_afterinsert_on_tab1</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">AFTER</span> <span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">ON</span> tab1</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">FOR EACH ROW</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">BEGIN</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> tab2<span class=\"token punctuation\">(</span>tab2_id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span>new<span class=\"token punctuation\">.</span>tab1_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">END</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">-- 测试一下</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> tab1<span class=\"token punctuation\">(</span>tab1_id<span class=\"token punctuation\">)</span> <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token string\">'0001'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">-- 看看结果</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> tab1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> tab2</pre></td></tr></table></figure><ul>\n<li>实例 2：删除一条，触发另外一张表的删除</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 创建触发器:t_afterdelete_on_tab1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">-- 作用：删除 tab1 表记录后自动将 tab2 表中对应的记录删去</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">DROP</span> <span class=\"token keyword\">TRIGGER</span> <span class=\"token keyword\">IF</span> <span class=\"token keyword\">EXISTS</span> t_afterdelete_on_tab1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TRIGGER</span> t_afterdelete_on_tab1</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">AFTER</span> <span class=\"token keyword\">DELETE</span> <span class=\"token keyword\">ON</span> tab1</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">FOR EACH ROW</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">BEGIN</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token keyword\">delete</span> <span class=\"token keyword\">from</span> tab2 <span class=\"token keyword\">where</span> tab2_id<span class=\"token operator\">=</span>old<span class=\"token punctuation\">.</span>tab1_id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">END</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">-- 测试一下</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">DELETE</span> <span class=\"token keyword\">FROM</span> tab1 <span class=\"token keyword\">WHERE</span> tab1_id<span class=\"token operator\">=</span><span class=\"token string\">'0001'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">-- 看看结果</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> tab1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> tab2<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>实例 3：更新一条，触发另外一张表的更新</li>\n</ul>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 创建触发器:t_afterupdate_on_tab1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">-- 作用：修改 tab1 表记录后自动将 tab2 表中对应的记录更新</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">DROP</span> <span class=\"token keyword\">TRIGGER</span> <span class=\"token keyword\">IF</span> <span class=\"token keyword\">EXISTS</span> t_afterupdate_on_tab1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TRIGGER</span> t_afterupdate_on_tab1</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">AFTER</span> <span class=\"token keyword\">UPDATE</span> <span class=\"token keyword\">ON</span> tab1</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">FOR EACH ROW</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">BEGIN</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>   <span class=\"token keyword\">update</span> tab2 <span class=\"token keyword\">set</span> tab2_id<span class=\"token operator\">=</span>new<span class=\"token punctuation\">.</span>tab1_id <span class=\"token keyword\">where</span> tab2_id<span class=\"token operator\">=</span>old<span class=\"token punctuation\">.</span>tab1_id<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">END</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">-- 测试一下</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">update</span> tab1 <span class=\"token keyword\">set</span> tab1_id<span class=\"token operator\">=</span><span class=\"token string\">'0002'</span> <span class=\"token keyword\">WHERE</span> tab1_id<span class=\"token operator\">=</span><span class=\"token string\">'0001'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">-- 看看结果</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> tab1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> tab2<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"课后习题\"><a class=\"anchor\" href=\"#课后习题\">#</a> 课后习题</h4>\n<blockquote>\n<p>1、在 product 表上分别创建 BEFORE INSERT 、 AFTER UPDATE 和 AFTER DELETE 3 个触<br />\n发器，触发器名称分别为 product_bf_insert 、 product_af_update 和 product_af_del 。执行语句部分都是向 operate 表插入操作方法和操作时间。<br />\n2、对 product 表分别执行 INSERT 、 UPDATE 和 DELETE 操作<br />\n 3、删除 product_bf_insert 和 product_af_update 这两个触发器</p>\n</blockquote>\n<h4 id=\"题解代码\"><a class=\"anchor\" href=\"#题解代码\">#</a> 题解代码</h4>\n<p><strong>建立 operate 和 product 表 并向 product 表中插入数据</strong></p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 建表 operate</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">DROP</span> <span class=\"token keyword\">TABLE</span> <span class=\"token keyword\">IF</span> <span class=\"token keyword\">EXISTS</span> <span class=\"token punctuation\">`</span>operate<span class=\"token punctuation\">`</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> <span class=\"token punctuation\">`</span>operate<span class=\"token punctuation\">`</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">`</span>Op_id<span class=\"token punctuation\">`</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">AUTO_INCREMENT</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'编号'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">`</span>Op_type<span class=\"token punctuation\">`</span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'操作方式'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">`</span>Op_time<span class=\"token punctuation\">`</span> <span class=\"token keyword\">time</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'操作时间'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">`</span>Op_id<span class=\"token punctuation\">`</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">UNIQUE</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">`</span>Op_id<span class=\"token punctuation\">`</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">`</span>Op_id<span class=\"token punctuation\">`</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">)</span> <span class=\"token keyword\">ENGINE</span><span class=\"token operator\">=</span><span class=\"token keyword\">InnoDB</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token keyword\">CHARSET</span><span class=\"token operator\">=</span>utf8<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">-- 建表 product</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">DROP</span> <span class=\"token keyword\">TABLE</span> <span class=\"token keyword\">IF</span> <span class=\"token keyword\">EXISTS</span> <span class=\"token punctuation\">`</span>product<span class=\"token punctuation\">`</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> <span class=\"token punctuation\">`</span>product<span class=\"token punctuation\">`</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'产品编号'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">`</span>Name<span class=\"token punctuation\">`</span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'产品名称'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token punctuation\">`</span><span class=\"token keyword\">Function</span><span class=\"token punctuation\">`</span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'产品功能'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token punctuation\">`</span>Company<span class=\"token punctuation\">`</span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'生产厂家'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token punctuation\">`</span>Address<span class=\"token punctuation\">`</span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">COMMENT</span> <span class=\"token string\">'家庭住址'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token keyword\">UNIQUE</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">)</span> <span class=\"token keyword\">ENGINE</span><span class=\"token operator\">=</span><span class=\"token keyword\">InnoDB</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token keyword\">CHARSET</span><span class=\"token operator\">=</span>utf8<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">-- 插入数据</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> product<span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span><span class=\"token punctuation\">`</span>NAME<span class=\"token punctuation\">`</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">`</span><span class=\"token keyword\">Function</span><span class=\"token punctuation\">`</span><span class=\"token punctuation\">,</span>Company<span class=\"token punctuation\">,</span>Address<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">'百度网盘'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'数据存储'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'中国'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'北京'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">'钉钉'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'协同办公'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'中国'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'杭州'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token string\">'微信'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'聊天通讯'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'中国'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'深圳'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>触发器的创建</strong></p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 创建 BEFORE INSERT 触发器</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TRIGGER</span> product_bf_insert</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>BEFORE <span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">on</span> product</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">FOR EACH ROW</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> operate <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span><span class=\"token string\">'数据插入成功！'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">TIME</span><span class=\"token punctuation\">(</span><span class=\"token function\">NOW</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">-- 插入数据</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> product<span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span><span class=\"token punctuation\">`</span>NAME<span class=\"token punctuation\">`</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">`</span><span class=\"token keyword\">Function</span><span class=\"token punctuation\">`</span><span class=\"token punctuation\">,</span>Company<span class=\"token punctuation\">,</span>Address<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\t<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token string\">'抖音'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'影音视听'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'中国'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'北京'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">-- 创建 AFTER UPDATE 触发器</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TRIGGER</span> product_af_update</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">AFTER</span> <span class=\"token keyword\">UPDATE</span> <span class=\"token keyword\">on</span> product</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">FOR EACH ROW</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> operate <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span><span class=\"token string\">'数据更新成功！'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">TIME</span><span class=\"token punctuation\">(</span><span class=\"token function\">NOW</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">-- 更新数据</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">UPDATE</span> product <span class=\"token keyword\">SET</span> Address<span class=\"token operator\">=</span><span class=\"token string\">'北京海淀区'</span> <span class=\"token keyword\">WHERE</span> id<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">-- 创建 AFTER DELETE 触发器</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TRIGGER</span> product_af_del</pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">AFTER</span> <span class=\"token keyword\">DELETE</span> <span class=\"token keyword\">on</span> product</pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">FOR EACH ROW</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> operate <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span><span class=\"token string\">'数据删除成功！'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">TIME</span><span class=\"token punctuation\">(</span><span class=\"token function\">NOW</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">-- 删除数据</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">DELETE</span> <span class=\"token keyword\">FROM</span> product <span class=\"token keyword\">WHERE</span> id<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>删除触发器</strong></p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 删除 product_bf_insert 和 product_af_update 触发器</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">DROP</span> <span class=\"token keyword\">TRIGGER</span> product_bf_insert<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">DROP</span> <span class=\"token keyword\">TRIGGER</span> product_af_update<span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "笔记本",
                "MySQL",
                "学习笔记",
                "Trigger"
            ]
        },
        {
            "id": "http://eliauk.cc/Roman-numerals/",
            "url": "http://eliauk.cc/Roman-numerals/",
            "title": "算法入门-罗马数字转整数",
            "date_published": "2020-09-28T06:52:22.935Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h2 id=\"罗马数字转整数\"><a class=\"anchor\" href=\"#罗马数字转整数\">#</a> 罗马数字转整数</h2>\n<p><strong>罗马数字包含以下七种字符:  <code>I</code> ，  <code>V</code> ，  <code>X</code> ，  <code>L</code> ， <code>C</code> ， <code>D</code>  和  <code>M</code> 。</strong></p>\n<pre><code class=\"language-text\">字符          数值\nI             1\nV             5\nX             10\nL             50\nC             100\nD             500\nM             1000\n</code></pre>\n<p><strong>例如， 罗马数字  <code>2</code>  写做  <code>II</code>  ，即为两个并列的  <code>1</code> 。 <code>12</code>  写做  <code>XII</code>  ，即为  <code>X + II</code>  。  <code>27</code>  写做   <code>XXVII</code> , 即为  <code>XX + V + II</code>  。</strong></p>\n<p><strong>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如  <code>4</code>  不写做  <code>IIII</code> ，而是  <code>IV</code> 。数字  <code>1</code>  在数字  <code>5</code>  的左边，所表示的数等于大数  <code>5</code>  减小数  <code>1</code>  得到的数值  <code>4</code>  。同样地，数字  <code>9</code>  表示为  <code>IX</code> 。这个特殊的规则只适用于以下六种情况：</strong></p>\n<p><code>I</code>  可以放在  <code>V (5)</code>  和  <code>X (10)</code>  的左边，来表示  <code>4</code>  和  <code>9</code> 。<br />\n <code>X</code>  可以放在  <code>L (50)</code>  和  <code>C (100)</code>  的左边，来表示  <code>40</code>  和  <code>90</code> 。 <br />\n <code>C</code>  可以放在  <code>D (500)</code>  和  <code>M (1000)</code>  的左边，来表示  <code>400</code>  和  <code>900</code> 。<br />\n给定一个罗马数字，将其转换成整数。输入确保在  <code>1</code>  到  <code>3999</code>  的范围内。</p>\n<h4 id=\"示例-1\"><a class=\"anchor\" href=\"#示例-1\">#</a> 示例 1:</h4>\n<pre><code class=\"language-text\">输入: &quot;III&quot;\n输出: 3\n</code></pre>\n<h4 id=\"示例-2\"><a class=\"anchor\" href=\"#示例-2\">#</a> 示例 2:</h4>\n<pre><code>输入: &quot;IV&quot;\n输出: 4\n</code></pre>\n<h4 id=\"示例-3\"><a class=\"anchor\" href=\"#示例-3\">#</a> 示例 3:</h4>\n<pre><code>输入: &quot;IX&quot;\n输出: 9\n</code></pre>\n<h4 id=\"示例-4\"><a class=\"anchor\" href=\"#示例-4\">#</a> 示例 4:</h4>\n<pre><code>输入: &quot;LVIII&quot;\n输出: 58\n解释: L = 50, V= 5, III = 3.\n</code></pre>\n<h4 id=\"示例-5\"><a class=\"anchor\" href=\"#示例-5\">#</a> 示例 5:</h4>\n<pre><code>输入: &quot;MCMXCIV&quot;\n输出: 1994\n解释: M = 1000, CM = 900, XC = 90, IV = 4.\n</code></pre>\n<h4 id=\"提示\"><a class=\"anchor\" href=\"#提示\">#</a> 提示：</h4>\n<ul>\n<li>题目所给测试用例皆符合罗马数字书写规则，不会出现跨位等情况。</li>\n<li>IC 和 IM 这样的例子并不符合题目要求， <code>49</code>  应该写作  <code>XLIX</code> ， <code>999</code>  应该写作  <code>CMXCIX</code>  。</li>\n<li>关于罗马数字的详尽书写规则，可以参考<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iMmIucGFydGNvbW11bml0eS5jb20vY29tbXVuaXR5L2tub3dsZWRnZS96aF9DTi9kZXRhaWwvMTA3NTMvJUU3JUJEJTk3JUU5JUE5JUFDJUU2JTk1JUIwJUU1JUFEJTk3I2tub3dsZWRnZV9hcnRpY2xl\">罗马数字 - Mathematics</span>。</li>\n</ul>\n<h2 id=\"解题思路\"><a class=\"anchor\" href=\"#解题思路\">#</a> 解题思路</h2>\n<p><strong>仔细分析罗马数字的规律，会发现，罗马字母 ( <code>XII</code> ) 正常是从左到右按从大到小排列，当代表小数字 ( <code>I</code> ) 的字母在代表大数字的字母 ( <code>V</code> ) 左边时，这意味着两个字母代表一个数，而且是大数字减小数字的最终结果（ <code>V-I</code> ）。</strong></p>\n<p><strong>所以，在做计算时，只需遍历判断下标为 <code>i</code>  的字母是否大于下标为 <code>i+1</code>  的字母，如果大于，则相加，如果小于，则需要减去当前这个数。</strong></p>\n<h4 id=\"代码\"><a class=\"anchor\" href=\"#代码\">#</a> 代码</h4>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @param &#123;string&#125; s</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @return &#123;number&#125;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">romanToInt</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">s</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token string\">'I'</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token string\">'V'</span><span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token string\">'X'</span><span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token string\">'L'</span><span class=\"token operator\">:</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token string\">'C'</span><span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token string\">'D'</span><span class=\"token operator\">:</span> <span class=\"token number\">500</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token string\">'M'</span><span class=\"token operator\">:</span> <span class=\"token number\">1000</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">let</span> num <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> len<span class=\"token operator\">=</span>s<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">let</span> left <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            right <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            newNum <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span>obj<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span><span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">-</span> obj<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> obj<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        num <span class=\"token operator\">+=</span> newNum</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">return</span> num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "算法库",
                "算法",
                "leetcode",
                "javascript"
            ]
        },
        {
            "id": "http://eliauk.cc/Climb-stairs/",
            "url": "http://eliauk.cc/Climb-stairs/",
            "title": "算法入门-爬楼梯",
            "date_published": "2020-09-27T11:04:03.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h2 id=\"爬楼梯\"><a class=\"anchor\" href=\"#爬楼梯\">#</a> 爬楼梯</h2>\n<p>假设你正在爬楼梯。需要 <code>n</code>  阶你才能到达楼顶。<br />\n每次你可以爬 <code>1</code>  或 <code>2</code>  个台阶。你有多少种不同的方法可以爬到楼顶呢？</p>\n<p>注意：给定 <code>n</code>  是一个正整数。</p>\n<p><strong>示例 1：</strong></p>\n<pre><code class=\"language-text\">输入： 2\n输出： 2\n解释： 有两种方法可以爬到楼顶。\n1.  1 阶 + 1 阶\n2.  2 阶\n</code></pre>\n<p><strong>示例 2：</strong></p>\n<pre><code class=\"language-text\">输入： 3\n输出： 3\n解释： 有三种方法可以爬到楼顶。\n1.  1 阶 + 1 阶 + 1 阶\n2.  1 阶 + 2 阶\n3.  2 阶 + 1 阶\n</code></pre>\n<h4 id=\"解题思路\"><a class=\"anchor\" href=\"#解题思路\">#</a> 解题思路</h4>\n<p><strong>斐波那契数列</strong><br />\n <code>current_step = step1 + step2</code></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">climbStairs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 第 n 层，等于第 n-1 层 + 第 n-2 层</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> step1 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> step2 <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        temp <span class=\"token operator\">=</span> step1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        step1 <span class=\"token operator\">=</span> step2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        step2 <span class=\"token operator\">=</span> temp <span class=\"token operator\">+</span> step1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">return</span> step2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "算法库",
                "C",
                "算法",
                "leetcode"
            ]
        },
        {
            "id": "http://eliauk.cc/Sum-of-two-numbers/",
            "url": "http://eliauk.cc/Sum-of-two-numbers/",
            "title": "算法入门-两数之和",
            "date_published": "2020-09-26T12:58:03.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h2 id=\"两数之和\"><a class=\"anchor\" href=\"#两数之和\">#</a> 两数之和</h2>\n<p>给定一个整数数组 <code>nums</code>  和一个目标值 <code>target</code>  请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标。<br />\n你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。<br />\n<strong>示例:</strong></p>\n<pre><code class=\"language-text\">给定 nums = [2, 7, 11, 15], target = 9\n因为 nums[0] + nums[1] = 2 + 7 = 9\n所以返回 [0, 1]\n</code></pre>\n<h4 id=\"解题思路\"><a class=\"anchor\" href=\"#解题思路\">#</a> 解题思路</h4>\n<p><strong>无序数组的两数之和</strong></p>\n<p>代码</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> <span class=\"token function\">twoSum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> numsSize<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> target<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> returnSize<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> numsSize <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>j <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j <span class=\"token operator\">&lt;</span> numsSize<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> target<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                count<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                count<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token operator\">*</span> returnSize <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token operator\">*</span> returnSize <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "算法库",
                "C",
                "算法",
                "leetcode"
            ]
        },
        {
            "id": "http://eliauk.cc/mysql-View-and-index/",
            "url": "http://eliauk.cc/mysql-View-and-index/",
            "title": "MySQL 视图与索引",
            "date_published": "2020-09-24T07:50:11.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h2 id=\"视图\"><a class=\"anchor\" href=\"#视图\">#</a> 视图</h2>\n<h3 id=\"基本概念\"><a class=\"anchor\" href=\"#基本概念\">#</a> 基本概念</h3>\n<p>视图本身是一张虚拟表，不存放任何数据。在使用 SQL 语句访问视图的时候，获取的数据是 MySQL 从其它表中生成的，视图和表在同一个命名空间。视图查询数据相对安全，视图可以隐藏一些数据和结构，只让用户看见权限内的数据，使复杂的查询易于理解和使用。</p>\n<h3 id=\"视图用法\"><a class=\"anchor\" href=\"#视图用法\">#</a> 视图用法</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#### 基本语法</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token operator\">OR</span> <span class=\"token keyword\">REPLACE</span> <span class=\"token keyword\">VIEW</span> view_name </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">AS</span> select_statement</pre></td></tr></table></figure><p><strong>注意事项：表和视图共享数据库中相同的名称空间，因此，数据库不能包含具有相同名称的表和视图。</strong></p>\n<h4 id=\"视图调用\"><a class=\"anchor\" href=\"#视图调用\">#</a> 视图调用</h4>\n<p><strong>和 MySQL 的表查询基本一致，可以使用各种查询条件。</strong></p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> user_order_view <span class=\"token keyword\">WHERE</span> user_name<span class=\"token operator\">=</span><span class=\"token string\">'Cicada'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"查看视图\"><a class=\"anchor\" href=\"#查看视图\">#</a> 查看视图</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SHOW</span> <span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">VIEW</span> user_order_view <span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"修改视图\"><a class=\"anchor\" href=\"#修改视图\">#</a> 修改视图</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">VIEW</span> view_name <span class=\"token keyword\">AS</span> select_statement <span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"删除视图\"><a class=\"anchor\" href=\"#删除视图\">#</a> 删除视图</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">DROP</span> <span class=\"token keyword\">VIEW</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">IF</span> <span class=\"token keyword\">EXISTS</span><span class=\"token punctuation\">]</span> view_name <span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"视图更新\"><a class=\"anchor\" href=\"#视图更新\">#</a> 视图更新</h3>\n<p>** 在指定条件允许的情况下，可以通过在视图上操作更新，删除，甚至写入数据，进而更新视图所涉及的相关表。</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">UPDATE</span> user_order_view <span class=\"token keyword\">SET</span> user_name<span class=\"token operator\">=</span><span class=\"token string\">'smile'</span> <span class=\"token keyword\">WHERE</span> id<span class=\"token operator\">=</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul class=\"task-list\">\n<li class=\"task-list-item\">\n<p><input type=\"checkbox\" id=\"cbx_0\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_0\"> 如果视图定义时使用聚合函数，分组等特殊操作，则无法更新。</label></p>\n</li>\n<li class=\"task-list-item\">\n<p><input type=\"checkbox\" id=\"cbx_1\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_1\"> MySQL 不支持在视图上创建触发器。</label></p>\n</li>\n</ul>\n<h3 id=\"注意事项\"><a class=\"anchor\" href=\"#注意事项\">#</a> 注意事项</h3>\n<ul class=\"task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"cbx_2\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_2\"> MySQL 并不支持在视图中创建索引，使用视图的时候可能会引发很多查询性能问题</label></li>\n</ul>\n<h2 id=\"索引\"><a class=\"anchor\" href=\"#索引\">#</a> 索引</h2>\n<h3 id=\"索引的优缺点\"><a class=\"anchor\" href=\"#索引的优缺点\">#</a> 索引的优缺点</h3>\n<h4 id=\"优点\"><a class=\"anchor\" href=\"#优点\">#</a> 优点</h4>\n<ul>\n<li>索引大大减小了服务器需要扫描的数据量</li>\n<li>索引可以帮助服务器避免排序和临时表</li>\n<li>索引对于 InnoDB（对索引支持行级锁）非常重要，因为它可以让查询锁更少的元组。</li>\n</ul>\n<h4 id=\"缺点\"><a class=\"anchor\" href=\"#缺点\">#</a> 缺点</h4>\n<ul>\n<li>虽然索引大大提高了查询速度，同时却会降低更新表的速度，如对表进行 INSERT、UPDATE 和 DELETE。因为更新表时，MySQL 不仅要保存数据，还要保存索引文件。</li>\n<li>建立索引会占用磁盘空间的索引文件。</li>\n<li>如果某个数据列包含许多重复的内容，为它建立索引就没有太大的实际效果。</li>\n<li>对于非常小的表，大部分情况下简单的全表扫描更高效；</li>\n</ul>\n<h3 id=\"索引创建语法\"><a class=\"anchor\" href=\"#索引创建语法\">#</a> 索引创建语法</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 普通索引</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">index</span> index1 <span class=\"token keyword\">on</span> student <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">-- 唯一索引</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">UNIQUE</span> <span class=\"token keyword\">INDEX</span> index2 <span class=\"token keyword\">on</span> student<span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">-- 全文索引</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">CREATE</span> FULLTEXT <span class=\"token keyword\">INDEX</span> index3 <span class=\"token keyword\">on</span> student<span class=\"token punctuation\">(</span>adress<span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">-- 创建单列索引</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">INDEX</span> INDEX5 <span class=\"token keyword\">on</span> student<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">-- 联合索引</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">INDEX</span> INDEX6 <span class=\"token keyword\">ON</span> student <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">-- 普通索引</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">TABLE</span> student <span class=\"token keyword\">ADD</span> <span class=\"token keyword\">INDEX</span> index1<span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">-- 唯一索引</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">TABLE</span> student <span class=\"token keyword\">ADD</span> <span class=\"token keyword\">UNIQUE</span> <span class=\"token keyword\">INDEX</span> index2<span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">-- 全文索引</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">TABLE</span> student <span class=\"token keyword\">add</span> FULLTEXT <span class=\"token keyword\">INDEX</span> index3 <span class=\"token punctuation\">(</span>NAME<span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">-- 单列索引</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">TABLE</span> student <span class=\"token keyword\">ADD</span> <span class=\"token keyword\">INDEX</span> index4 <span class=\"token punctuation\">(</span>adress<span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">-- 联合索引</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">TABLE</span> student <span class=\"token keyword\">ADD</span> <span class=\"token keyword\">INDEX</span> INDEX5 <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "笔记本",
                "MySQL",
                "数据库",
                "View",
                "index"
            ]
        },
        {
            "id": "http://eliauk.cc/js-RegExp/",
            "url": "http://eliauk.cc/js-RegExp/",
            "title": "",
            "date_published": "2020-09-19T15:42:50.670Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><p>...</p>\n",
            "tags": [
                "笔记本",
                "RegExp",
                "JS"
            ]
        },
        {
            "id": "http://eliauk.cc/hello-world/",
            "url": "http://eliauk.cc/hello-world/",
            "title": "Hello World",
            "date_published": "2020-09-19T14:28:15.222Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><p>已经记不清楚这是第几次写 hello world 了，从最早 (2018 年) 的 emlog 博客，到后来的 typecho, 再到后来的 WordPress。基本没有写出什么有意义的东西。写的东西也基本都因为忘记导出数据库，忘记备份而丢失了…</p>\n<p>在这之前，一直使用 <code>香港免备案主机</code>  (不想备案), 然而速度并不理想，又买不起昂贵的服务器，而最近阿里云做活动以很便宜的价格购买了服务器。</p>\n<p>为什么要搭建这个博客<br />\n作为一名中二少年，喜欢互联网技术，所以大学报的软件专业，自从开始学习编程，我仿佛打开了新世界的大门。在编程的世界里，我可以创造许多新奇的东西。<br />\n但编程确实有些枯燥，常常因为一个 bug 抓耳挠腮，百思不得其解。<br />\n可当我解决那个 bug 时，那种无比的成就感，我整个人都飘了<br />\n有时候，有些 bug 以我的能力确实也无法解决，但是现在可是互联网时代了呢建立博客后我们可以一起进步一起成长！</p>\n",
            "tags": []
        },
        {
            "id": "http://eliauk.cc/mysql-Stored-procedure/",
            "url": "http://eliauk.cc/mysql-Stored-procedure/",
            "title": "MySQL 存储过程事务处理",
            "date_published": "2020-09-19T02:24:11.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h2 id=\"存储过程\"><a class=\"anchor\" href=\"#存储过程\">#</a> 存储过程</h2>\n<h3 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h3>\n<p>存储程序是被存储在服务器中的组合 SQL 语句，经编译创建并保存在数据库中，用户可通过存储过程的名字调用执行。存储过程核心思想就是数据库 SQL 语言层面的封装与重用性。使用存储过程可以较少应用系统的业务复杂性，但是会增加数据库服务器系统的负荷。</p>\n<h3 id=\"基本语法\"><a class=\"anchor\" href=\"#基本语法\">#</a> 基本语法</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">PROCEDURE</span> sp_name <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>proc_parameter<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">[</span>characteristic <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">]</span> routine_body</pre></td></tr></table></figure><h3 id=\"案例\"><a class=\"anchor\" href=\"#案例\">#</a> 案例</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 查询学生表中性别为男的学生总数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">PROCEDURE</span> u_pro<span class=\"token punctuation\">(</span><span class=\"token operator\">IN</span> v_sex <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">CHARACTER</span> <span class=\"token keyword\">SET</span> utf8 <span class=\"token punctuation\">,</span><span class=\"token keyword\">OUT</span> num <span class=\"token keyword\">INT</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">BEGIN</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">SELECT</span> <span class=\"token function\">COUNT</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">INTO</span> num <span class=\"token keyword\">FROM</span> student <span class=\"token keyword\">WHERE</span> v_sex<span class=\"token operator\">=</span>sex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">end</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">CALL</span> u_pro<span class=\"token punctuation\">(</span><span class=\"token string\">'男'</span><span class=\"token punctuation\">,</span><span class=\"token variable\">@num</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token variable\">@num</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 计算 1 + 到 n 的值</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">PROCEDURE</span> addresult<span class=\"token punctuation\">(</span><span class=\"token operator\">IN</span> n <span class=\"token keyword\">INT</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">BEGIN</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">DECLARE</span> i <span class=\"token keyword\">INT</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">DECLARE</span> sum <span class=\"token keyword\">INT</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">SET</span> sum <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">SET</span> i <span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">WHILE</span> i<span class=\"token operator\">&lt;</span>n <span class=\"token keyword\">DO</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">SET</span> sum<span class=\"token operator\">=</span>sum<span class=\"token operator\">+</span>i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">SET</span> i<span class=\"token operator\">=</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">END</span> <span class=\"token keyword\">WHILE</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">SELECT</span> sum <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">END</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">call</span> addresult<span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 计算 1 + 到 n 的值</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">PROCEDURE</span> addresult2<span class=\"token punctuation\">(</span><span class=\"token operator\">in</span> n <span class=\"token keyword\">INT</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">out</span> sum <span class=\"token keyword\">INT</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">BEGIN</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">DECLARE</span> i <span class=\"token keyword\">INT</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">DECLARE</span> sum <span class=\"token keyword\">INT</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">SET</span> sum <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">SET</span> i <span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">WHILE</span> i<span class=\"token operator\">&lt;</span>n <span class=\"token keyword\">DO</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">SET</span> sum<span class=\"token operator\">=</span>sum<span class=\"token operator\">+</span>i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">SET</span> i<span class=\"token operator\">=</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">END</span> <span class=\"token keyword\">WHILE</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">SELECT</span> sum <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">END</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">call</span> addresult2<span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">,</span><span class=\"token variable\">@sum</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 判断变量</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">PROCEDURE</span> user_main_pro3<span class=\"token punctuation\">(</span><span class=\"token keyword\">INOUT</span> v_id <span class=\"token keyword\">INT</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">BEGIN</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\"># 定义变量</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">DECLARE</span> v_count <span class=\"token keyword\">INT</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\"># 判断</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">IF</span> v_id <span class=\"token operator\">></span> <span class=\"token number\">3</span> <span class=\"token keyword\">THEN</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     <span class=\"token keyword\">SET</span> v_count <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">ELSE</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     <span class=\"token keyword\">SET</span> v_count <span class=\"token operator\">=</span> <span class=\"token number\">500</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">END</span> <span class=\"token keyword\">IF</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token comment\"># 返回赋值</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">SET</span> v_id <span class=\"token operator\">=</span> v_count<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">END</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">SET</span> <span class=\"token variable\">@v_id</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">call</span> user_main_pro3<span class=\"token punctuation\">(</span><span class=\"token variable\">@v_id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token variable\">@v_id</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"事务处理\"><a class=\"anchor\" href=\"#事务处理\">#</a> 事务处理</h2>\n<h3 id=\"注意点\"><a class=\"anchor\" href=\"#注意点\">#</a> 注意点</h3>\n<p><strong>MySQL 中 Innodb 支持事务，而 MyISAM 不支持事务</strong></p>\n<h3 id=\"事务的特性\"><a class=\"anchor\" href=\"#事务的特性\">#</a> 事务的特性：</h3>\n<ul>\n<li>原子性（Atomicity）：事务开始后的所有操作，要么全部做完，要么全部不做。事务执行过程中出错，会回滚到事务开始前的状态，所有的操作就像没有发生一样。</li>\n<li>一致性（Consistency）：事务开始前和结束后，数据库的完整性约束没有被破坏 。比如 A 向 B 转账，不可能 A 扣了钱，B 却没收到。</li>\n<li>隔离性（Isolation）：同一时间，只允许一个事务请求同一数据，不同的事务之间彼此没有任何干扰。比如 A 正在从一张银行卡中取钱，在 A 取钱的过程结束前，B 不能向这张卡转账。</li>\n<li>持久性（Durability）：事务完成后，事务对数据库的所有更新将被保存到数据库，不能回滚。</li>\n</ul>\n<h3 id=\"并发问题\"><a class=\"anchor\" href=\"#并发问题\">#</a> 并发问题</h3>\n<ul>\n<li>\n<p>脏读：事务 A 读取了事务 B 更新的数据，然后 B 回滚操作，那么 A 读取到的数据是脏数据</p>\n</li>\n<li>\n<p>不可重复读：事务 A 多次读取同一数据，事务 B 在事务 A 多次读取的过程中，对数据作了更新并提交，导致事务 A 多次读取同一数据时，结果 不一致。</p>\n</li>\n<li>\n<p>幻读：系统管理员 A 将数据库中所有学生的成绩从具体分数改为 ABCDE 等级，但是系统管理员 B 就在这个时候插入了一条具体分数的记录，当系统管理员 A 改结束后发现还有一条记录没有改过来，就好像发生了幻觉一样，这时就叫幻读。</p>\n</li>\n</ul>\n<p><span class=\"rainbow\">注：不可重复读的和幻读很容易混淆，不可重复读侧重于修改，幻读侧重于新增或删除。解决不可重复读的问题只需锁住满足条件的行，解决幻读需要锁表</span></p>\n<h3 id=\"事务隔离级别\"><a class=\"anchor\" href=\"#事务隔离级别\">#</a> 事务隔离级别</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">事务隔离级别</th>\n<th style=\"text-align:right\">脏读</th>\n<th style=\"text-align:center\">不可重复读</th>\n<th>幻读</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">读未提交（read-uncommitted）</td>\n<td style=\"text-align:right\">是</td>\n<td style=\"text-align:center\">是</td>\n<td>是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">不可重复读（read-committed）</td>\n<td style=\"text-align:right\">否</td>\n<td style=\"text-align:center\">是</td>\n<td>是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">可重复读（repeatable-read）</td>\n<td style=\"text-align:right\">否</td>\n<td style=\"text-align:center\">否</td>\n<td>是</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">串行化（serializable）</td>\n<td style=\"text-align:right\">否</td>\n<td style=\"text-align:center\">否</td>\n<td>否</td>\n</tr>\n</tbody>\n</table>\n<p><strong>设置隔离级别：</strong></p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SET</span> <span class=\"token keyword\">SESSION</span> <span class=\"token keyword\">TRANSACTION</span> <span class=\"token keyword\">ISOLATION</span> <span class=\"token keyword\">LEVEL</span> <span class=\"token keyword\">READ</span> <span class=\"token keyword\">UNCOMMITTED</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><span class=\"rainbow\">只有增删改语句才支持事务</span></p>\n",
            "tags": [
                "笔记本",
                "MySQL",
                "数据库",
                "存储过程",
                "视图"
            ]
        },
        {
            "id": "http://eliauk.cc/mysql-inquire/",
            "url": "http://eliauk.cc/mysql-inquire/",
            "title": "MySQL 查询",
            "date_published": "2020-09-14T11:04:03.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h2 id=\"连接查询\"><a class=\"anchor\" href=\"#连接查询\">#</a> 连接查询</h2>\n<p><strong>在数据库中 join 操作被称为连接，作用是能连接多个表的数据（通过连接条件），从多个表中获取数据合并在一起作为结果集返回给客户端。</strong></p>\n<h3 id=\"交叉连接\"><a class=\"anchor\" href=\"#交叉连接\">#</a> 交叉连接</h3>\n<p><strong>交叉连接：将两张表的数据与另外一张表彼此交叉</strong></p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> 表<span class=\"token number\">1</span> <span class=\"token keyword\">cross</span> <span class=\"token keyword\">join</span> 表<span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>eg：</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">select</span> class<span class=\"token punctuation\">.</span>cname<span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">.</span>sname <span class=\"token keyword\">from</span> student <span class=\"token keyword\">cross</span> <span class=\"token keyword\">join</span> class <span class=\"token keyword\">on</span> class<span class=\"token punctuation\">.</span>cid <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>student<span class=\"token punctuation\">.</span>classid<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">-- 其中的 on 代表两个表的连接条件</span></pre></td></tr></table></figure><h3 id=\"内连接\"><a class=\"anchor\" href=\"#内连接\">#</a> 内连接</h3>\n<p><img data-src=\"https://usocute.oss-cn-chengdu.aliyuncs.com/hexo/inner-join.png\" alt=\"inner-join\" /></p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>方式一：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> 表<span class=\"token number\">1</span><span class=\"token punctuation\">,</span>表<span class=\"token number\">2</span> <span class=\"token keyword\">where</span> 表<span class=\"token number\">1.</span>列<span class=\"token operator\">=</span>表<span class=\"token number\">2.</span>列</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>方式二：</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> 表<span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">inner</span> <span class=\"token keyword\">join</span> 表<span class=\"token number\">2</span> <span class=\"token keyword\">on</span> 表<span class=\"token number\">1.</span>列<span class=\"token operator\">=</span>表<span class=\"token number\">2.</span>列</pre></td></tr></table></figure><h3 id=\"外连接\"><a class=\"anchor\" href=\"#外连接\">#</a> 外连接</h3>\n<h4 id=\"左连接\"><a class=\"anchor\" href=\"#左连接\">#</a> 左连接</h4>\n<p>左连接基础语法是  <code>a left outer join b </code> ，其中的  <code>outer</code>  可以省略，与内连接相比就是在与内连接相<br />\n同条件下，在内连接的结果集中添加 <code>a</code>  表在 <code>b</code>  表中找不到匹配的记录，换句话说就是，结果集中会包含 <code>a</code>  表中的所有记录，如果 <code>b</code>  表中有匹配的记录就出现在结果集，否则使用  <code>NULL</code>  代替，也就是把 <code>a</code>  表看成根本，不可缺失记录。<br />\n<img data-src=\"https://usocute.oss-cn-chengdu.aliyuncs.com/hexo/left-join.png\" alt=\"left-join\" /></p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> 表<span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">left</span> <span class=\"token keyword\">join</span> 表<span class=\"token number\">2</span> <span class=\"token keyword\">on</span> 表<span class=\"token number\">1.</span>列<span class=\"token operator\">=</span>表<span class=\"token number\">2.</span>列</pre></td></tr></table></figure><h4 id=\"右连接\"><a class=\"anchor\" href=\"#右连接\">#</a> 右连接</h4>\n<p>右外连接基础语法是  <code>a right outer join b </code> ，其中的  <code>outer</code>  可以省略，与内连接相比就是在与内连<br />\n接相同条件下，在内连接的结果集中添加 b 表在 a 表中找不到匹配的记录，换句话说就是，结果集中会包含 b 表中的所有记录，如果 a 表中有匹配的记录就出现在结果集，否则使用 NULL 代替，也就是把 b 表看成根本，不可缺失记录，作用与左外连接恰好相反。<br />\n<img data-src=\"https://usocute.oss-cn-chengdu.aliyuncs.com/hexo/right-join.png\" alt=\"right-join\" /></p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> 表<span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">right</span> <span class=\"token keyword\">join</span> 表<span class=\"token number\">2</span> <span class=\"token keyword\">on</span> 表<span class=\"token number\">1.</span>列<span class=\"token operator\">=</span>表<span class=\"token number\">2.</span>列</pre></td></tr></table></figure><h3 id=\"自连接\"><a class=\"anchor\" href=\"#自连接\">#</a> 自连接</h3>\n<p>自连接就是表与它自身相关联，进行自连接时通过给表起不同的别名来区分一个表的两个实例。</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> 表<span class=\"token punctuation\">.</span>字段<span class=\"token number\">1</span><span class=\"token punctuation\">,</span>表<span class=\"token punctuation\">.</span>字段<span class=\"token number\">2</span><span class=\"token punctuation\">,</span>表<span class=\"token punctuation\">.</span>字段<span class=\"token number\">3</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> 表<span class=\"token number\">1</span> <span class=\"token keyword\">as</span> 别名<span class=\"token punctuation\">,</span>表<span class=\"token number\">2</span> <span class=\"token keyword\">as</span> 别名 </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">where</span> 别名<span class=\"token punctuation\">.</span>字段<span class=\"token number\">2</span><span class=\"token operator\">=</span>别名<span class=\"token number\">2.</span>字段<span class=\"token number\">3</span>；</pre></td></tr></table></figure><h2 id=\"子查询\"><a class=\"anchor\" href=\"#子查询\">#</a> 子查询</h2>\n<p>子查询指嵌套在查询内部，且必须始终出现在圆括号。子查询可以包含多个关键字或条件，如<br />\n <code>DISTINCT</code> 、 <code>GROUP BY</code> 、 <code>ORDER BY</code> 、 <code>LIMIT</code> 、 <code>函数</code> 等。<br />\n子查询的外层查询可以是： <code>SELECT</code> ， <code>INSERT</code> ， <code>UPDATE</code> ， <code>SET或DO</code> 。<br />\n子查询可以返回标量，一行，一列或子查询。</p>\n<h3 id=\"将子查询作为派生表\"><a class=\"anchor\" href=\"#将子查询作为派生表\">#</a> 将子查询作为派生表</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> 表<span class=\"token number\">1</span> <span class=\"token keyword\">where</span> 字段<span class=\"token number\">1</span> <span class=\"token operator\">=</span> （<span class=\"token keyword\">select</span> 字段<span class=\"token number\">2</span> <span class=\"token keyword\">from</span> 表<span class=\"token number\">2</span>）<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"把子查询用在where子句中\"><a class=\"anchor\" href=\"#把子查询用在where子句中\">#</a> 把子查询用在 where 子句中</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>eg：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">select</span> ename<span class=\"token punctuation\">,</span>sal <span class=\"token keyword\">from</span> emp <span class=\"token keyword\">where</span> sal<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> <span class=\"token function\">avg</span><span class=\"token punctuation\">(</span>sal<span class=\"token punctuation\">)</span> form emp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"在from语句中使用子查询\"><a class=\"anchor\" href=\"#在from语句中使用子查询\">#</a> 在 from 语句中使用子查询</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>eg：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">select</span> t<span class=\"token punctuation\">.</span>deptno<span class=\"token punctuation\">,</span>t<span class=\"token punctuation\">.</span>avgsal<span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">.</span>grade</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">select</span> deptno<span class=\"token punctuation\">,</span><span class=\"token function\">avg</span><span class=\"token punctuation\">(</span>sal<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> avgsal <span class=\"token keyword\">from</span> emp <span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span> deptno<span class=\"token punctuation\">)</span> t</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">join</span> salgrade s</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">on</span> t<span class=\"token punctuation\">.</span>avgsal <span class=\"token operator\">between</span> s<span class=\"token punctuation\">.</span>losal <span class=\"token operator\">and</span> s<span class=\"token punctuation\">.</span>hisal<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"集合操作union\"><a class=\"anchor\" href=\"#集合操作union\">#</a> 集合操作 (UNION)</h2>\n<p><strong>union  作用：合并查询结果集</strong></p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Eg：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">select</span> ename<span class=\"token punctuation\">,</span>job <span class=\"token keyword\">from</span> emp <span class=\"token keyword\">where</span> job<span class=\"token operator\">=</span><span class=\"token string\">'manager'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">union</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">select</span> ename<span class=\"token punctuation\">,</span>job <span class=\"token keyword\">from</span> emp <span class=\"token keyword\">where</span> job<span class=\"token operator\">=</span><span class=\"token string\">'salesman'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>limit</strong></p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">limit</span> 起始下标，长度</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>如果起始下标没有指定，默认从<span class=\"token number\">0</span>开始，<span class=\"token number\">0</span>表示表中第一条记录。</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Eg：</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">-- 按照工资降序排列取前 5 个</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">select</span> ename<span class=\"token punctuation\">,</span>sal <span class=\"token keyword\">from</span> emp <span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> sal <span class=\"token keyword\">desc</span> <span class=\"token keyword\">limit</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>通用的分页 SQL (只适用于 mysql 数据库管理系统)</strong></p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> t<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> t</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> t<span class=\"token punctuation\">.</span>x <span class=\"token keyword\">desc</span><span class=\"token operator\">/</span><span class=\"token keyword\">asc</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">limit</span> <span class=\"token punctuation\">(</span>pageNo<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>pageSize<span class=\"token punctuation\">,</span>pageSize<span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": [
                "笔记本",
                "MySQL",
                "数据库",
                "查询"
            ]
        },
        {
            "id": "http://eliauk.cc/mysql-operate/",
            "url": "http://eliauk.cc/mysql-operate/",
            "title": "mysql 数据库基本操作",
            "date_published": "2020-09-10T10:24:02.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h2 id=\"数据库和表操作\"><a class=\"anchor\" href=\"#数据库和表操作\">#</a> 数据库和表操作</h2>\n<h3 id=\"创建数据库\"><a class=\"anchor\" href=\"#创建数据库\">#</a> 创建数据库</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token keyword\">database</span> 数据库名称<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>注意事项：</strong></p>\n<pre><code class=\"language-text\">1）information_schema是MySQL自带的数据库，存储MySQL服务器管理的信息；\n2）mysql是MySQL的系统数据库；\n3）test是用户学习和测试练习使用的数据库；\n4）MySQL中的数据库名称不能超过64字符，不能由纯数字组成，不能包\n含：“/”、“:”、“*”、“?”、“**”**”、“&lt;”等符号；\n5）如果要创建的数据库名称已经存在，也会发生错误。（可以用”if exists 数据库名称 ”来判断是否存\n在，以避免发生错误）。\n如：drop database if exists student; -- 判断student数据库存在就删除\ncreate database student; -- 重新创建student数据库\n-- 创建数据库后，如果需要使用数据库，使用：”use 数据库名；”如：use student;\n</code></pre>\n<h3 id=\"删除数据库\"><a class=\"anchor\" href=\"#删除数据库\">#</a> 删除数据库</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">drop</span> <span class=\"token keyword\">database</span> 数据库名称；</pre></td></tr></table></figure><figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Eg： <span class=\"token keyword\">drop</span> <span class=\"token keyword\">database</span> <span class=\"token keyword\">user</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 删除了名叫 “user” 的数据库；</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">drop</span> <span class=\"token keyword\">database</span> <span class=\"token keyword\">if</span> <span class=\"token keyword\">exists</span> <span class=\"token keyword\">user</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 也可以用 if exists 做判断，避免发生错误；</span></pre></td></tr></table></figure><h3 id=\"创建表\"><a class=\"anchor\" href=\"#创建表\">#</a> 创建表</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> 表名</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span> 字</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>段名称<span class=\"token number\">1</span> 数据类型 <span class=\"token punctuation\">[</span> <span class=\"token boolean\">null</span> <span class=\"token operator\">/</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span> <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span> <span class=\"token keyword\">DEFAULT</span> 默认值 <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span> <span class=\"token keyword\">AUTO_INCREMENT</span> <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">[</span> PRIMARY_KEY <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span> <span class=\"token keyword\">COMMENT</span> ‘注释内容’ <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>字段名称N 数据类型 <span class=\"token punctuation\">[</span> <span class=\"token boolean\">null</span> <span class=\"token operator\">/</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span> <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span> <span class=\"token keyword\">DEFAULT</span> 默认值 <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span> <span class=\"token keyword\">AUTO_INCREMENT</span> <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">[</span> PRIMARY_KEY <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span> <span class=\"token keyword\">COMMENT</span> ‘注释内容’ <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">)</span>；</pre></td></tr></table></figure><figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Eg:</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">drop</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">if</span> <span class=\"token keyword\">exists</span> teacher <span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 首先判断是否存在 teacher 表，如果存在就删除</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> teacher</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>id <span class=\"token keyword\">int</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span> <span class=\"token keyword\">auto_increment</span> <span class=\"token keyword\">primary</span> <span class=\"token keyword\">key</span> <span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>name <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">-- 创建了 teacher 表，里面有 int、 name 两个字段，其中 id 是主键，非空，自增</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">-- 创建数据库后，如果需要使用数据库，使用：”use 数据库名；” 如：use teacher;</span></pre></td></tr></table></figure><h3 id=\"删除表\"><a class=\"anchor\" href=\"#删除表\">#</a> 删除表</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">drop</span> <span class=\"token keyword\">table</span> 表名<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Eg: <span class=\"token keyword\">drop</span> <span class=\"token keyword\">table</span> teacher<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>或者删除多个表格： <span class=\"token keyword\">drop</span> <span class=\"token keyword\">table</span> teacher<span class=\"token punctuation\">,</span> student<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"复制表\"><a class=\"anchor\" href=\"#复制表\">#</a> 复制表</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>完全复制的格式：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> 表<span class=\"token number\">02</span> <span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> 表<span class=\"token number\">01</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Eg: <span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> teacher02 <span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> teacher<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">-- 复制一张和 teacher 表完全一样的 teacher02 表；</span></pre></td></tr></table></figure><figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>复制指定列的格式：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> 表<span class=\"token number\">02</span> <span class=\"token keyword\">select</span> 字段a，字段b，<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token keyword\">from</span> 表<span class=\"token number\">01</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Eg: <span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> teacher02 <span class=\"token keyword\">select</span> id<span class=\"token punctuation\">,</span> name <span class=\"token keyword\">from</span> teacher<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">-- 复制一张 teacher02 表，里面包含 teacher 表里的 id，name；</span></pre></td></tr></table></figure><figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>完全复制表结构（包括键<span class=\"token keyword\">key</span>），但是不复制里面的内容，格式是：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> 表<span class=\"token number\">02</span> <span class=\"token operator\">like</span> 表<span class=\"token number\">01</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Eg: <span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> teacher02 <span class=\"token operator\">like</span> teacher<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">-- 复制一张 teacher02 表，其结构和 teacher 表相同，但没有 teacher 里的内容；</span></pre></td></tr></table></figure><h3 id=\"修改表\"><a class=\"anchor\" href=\"#修改表\">#</a> 修改表</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1</span>）增加字段：<span class=\"token keyword\">add</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Eg: <span class=\"token keyword\">alter</span> <span class=\"token keyword\">table</span> teacher <span class=\"token keyword\">add</span> age <span class=\"token keyword\">int</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 添加 age 列，int 类型，可以为 null；</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">2</span>）删除字段：<span class=\"token keyword\">drop</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Eg: <span class=\"token keyword\">alter</span> <span class=\"token keyword\">table</span> teacher <span class=\"token keyword\">drop</span> age<span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 删除 age 列；</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">3</span>）修改字段：change</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Eg: <span class=\"token keyword\">alter</span> <span class=\"token keyword\">table</span> teacher change name teacher_name <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">-- 修改 name 列为 teacher_name，varchar 类型最大 30 个字符，不能为 null；</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">4</span>）增加主键：<span class=\"token keyword\">add</span> <span class=\"token keyword\">primary</span> <span class=\"token keyword\">key</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>Eg: <span class=\"token keyword\">alter</span> <span class=\"token keyword\">table</span> teacher <span class=\"token keyword\">add</span> <span class=\"token keyword\">primary</span> <span class=\"token keyword\">key</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 设置 id 为主键（id 是已有字段）；</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">5</span>）修改表名：<span class=\"token keyword\">rename</span> <span class=\"token keyword\">to</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>Eg: <span class=\"token keyword\">alter</span> <span class=\"token keyword\">table</span> teacher <span class=\"token keyword\">rename</span> <span class=\"token keyword\">to</span> <span class=\"token keyword\">user</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">-- 把 teacher 表改名为 user；</span></pre></td></tr></table></figure><h2 id=\"数据完整性\"><a class=\"anchor\" href=\"#数据完整性\">#</a> 数据完整性</h2>\n<p><code>数据完整性的概念：确保数据正确性和一致性的机制。</code></p>\n<ol>\n<li>域完整性：即列的完整性。如：年龄不能超过 150 岁，id 不能为 null。</li>\n<li>实体完整性：即行的完整性。如：实体 “张三” 具有区别于实体 “李四” 的特征。</li>\n<li>参照完整性：主关系表（被参照表）和从关系表（参照表）中数据的一致性。</li>\n<li>用户定义完整性：用户根据具体需求来定义约束条件。</li>\n</ol>\n<h2 id=\"使用sql语句为表创建和删除约束\"><a class=\"anchor\" href=\"#使用sql语句为表创建和删除约束\">#</a> 使用 SQL 语句为表创建和删除约束</h2>\n<p>如果要修改已创建的约束，最简单实用的方式就是先删除已有的约束，再建立同名的约束。</p>\n<h3 id=\"添加约束\"><a class=\"anchor\" href=\"#添加约束\">#</a> 添加约束：</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>格式：<span class=\"token keyword\">alter</span> <span class=\"token keyword\">table</span> 表名 <span class=\"token keyword\">add</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">constraint</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>约束名称<span class=\"token punctuation\">]</span> 约束类型（约束内容<span class=\"token punctuation\">[</span>可多个字段<span class=\"token punctuation\">]</span>）<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"主键约束\"><a class=\"anchor\" href=\"#主键约束\">#</a> 主键约束</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>主键约束: <span class=\"token keyword\">alter</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">user</span> <span class=\"token keyword\">add</span> <span class=\"token keyword\">constraint</span> PK_user_id <span class=\"token keyword\">primary</span> <span class=\"token keyword\">key</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">-- 把 user 表的 id 添加主键约束，约束名称是 PK_user_id。（PK 是主键的简写）</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>设置联合主键的方式：</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">alter</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">user</span> <span class=\"token keyword\">add</span> <span class=\"token keyword\">primary</span> <span class=\"token keyword\">key</span><span class=\"token punctuation\">(</span>id，name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">-- 设置了联合主键 id 和 name； 补充： 在创建表的时候也可以直接设置主键约束。</span></pre></td></tr></table></figure><h4 id=\"唯一约束\"><a class=\"anchor\" href=\"#唯一约束\">#</a> 唯一约束</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>唯一约束：<span class=\"token keyword\">alter</span> <span class=\"token keyword\">table</span> 表名 <span class=\"token keyword\">add</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">constraint</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">unique</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"默认约束\"><a class=\"anchor\" href=\"#默认约束\">#</a> 默认约束</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>默认约束：<span class=\"token keyword\">alter</span> <span class=\"token keyword\">table</span> 表名 <span class=\"token keyword\">alter</span> <span class=\"token keyword\">column</span>列名 <span class=\"token keyword\">set</span> <span class=\"token keyword\">DEFAULT</span> 默认值<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">-- 默认值可以为常量或者为空（null）；</span></pre></td></tr></table></figure><h4 id=\"检查约束\"><a class=\"anchor\" href=\"#检查约束\">#</a> 检查约束</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>检查约束：（与<span class=\"token keyword\">SQL</span> Server中的检查约束有语法区别）可以使用<span class=\"token operator\">*</span><span class=\"token operator\">*</span>枚举<span class=\"token operator\">*</span><span class=\"token operator\">*</span>。</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Eg：<span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> student <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> sex <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token keyword\">enum</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>‘男’<span class=\"token punctuation\">,</span> ‘女’<span class=\"token punctuation\">)</span> <span class=\"token operator\">not</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token boolean\">null</span> <span class=\"token comment\">-- 学员性别 );</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">-- 默认值可以为常量或者为空（null）；</span></pre></td></tr></table></figure><h4 id=\"外键约束\"><a class=\"anchor\" href=\"#外键约束\">#</a> 外键约束</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>外键约束： 格式：<span class=\"token keyword\">alter</span> <span class=\"token keyword\">table</span> 表名 <span class=\"token keyword\">add</span> <span class=\"token keyword\">constraint</span> 约束名称 约束类型<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span>外键约束简称为“FK”<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Eg：<span class=\"token keyword\">alter</span> <span class=\"token keyword\">table</span> student <span class=\"token keyword\">add</span> <span class=\"token keyword\">constraint</span> FK_student_class_classid <span class=\"token keyword\">foreign</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">key</span> <span class=\"token punctuation\">(</span>classid<span class=\"token punctuation\">)</span> <span class=\"token keyword\">references</span> class<span class=\"token punctuation\">(</span>classid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">-- 为 student 表所在的班级字段 classid 设置了外键约束。</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>创建时设置外键：</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> student <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> classid <span class=\"token keyword\">int</span> <span class=\"token operator\">not</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">foreign</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">key</span><span class=\"token punctuation\">(</span>classid<span class=\"token punctuation\">)</span> <span class=\"token keyword\">references</span> class<span class=\"token punctuation\">(</span>classid<span class=\"token punctuation\">)</span> <span class=\"token comment\">-- 设置名称为 classid 的外键，指</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>向class表的classid； <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"设置级联操作\"><a class=\"anchor\" href=\"#设置级联操作\">#</a> 设置级联操作</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>设置级联操作：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">restrict</span>和<span class=\"token keyword\">no</span> <span class=\"token keyword\">action</span>表示在子表有关联记录的情况下父表不能更新；</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">cascade</span> 表示父表在更新或者删除时，同时更新或删除子表对应的记录；</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">set</span> <span class=\"token boolean\">null</span> 表示父表在更新或者删除时，子表对应的字段设置为<span class=\"token boolean\">null</span>；</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Eg：</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">alter</span> <span class=\"token keyword\">table</span> student <span class=\"token keyword\">add</span> <span class=\"token keyword\">constraint</span> FK_student_class_classid <span class=\"token keyword\">foreign</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">key</span> <span class=\"token punctuation\">(</span>classid<span class=\"token punctuation\">)</span> <span class=\"token keyword\">references</span> class<span class=\"token punctuation\">(</span>classid<span class=\"token punctuation\">)</span> <span class=\"token keyword\">on</span> <span class=\"token keyword\">delete</span> <span class=\"token keyword\">set</span> <span class=\"token boolean\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">-- 如：删除 class 表中 classid=1 对应的字段时，student 表中的 classid 字段的值设置为 null</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">alter</span> <span class=\"token keyword\">table</span> student <span class=\"token keyword\">add</span> <span class=\"token keyword\">constraint</span> FK_student_class_classid <span class=\"token keyword\">foreign</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">key</span> <span class=\"token punctuation\">(</span>classid<span class=\"token punctuation\">)</span> <span class=\"token keyword\">references</span> class<span class=\"token punctuation\">(</span>classid<span class=\"token punctuation\">)</span> <span class=\"token keyword\">on</span> <span class=\"token keyword\">delete</span> <span class=\"token keyword\">set</span> <span class=\"token keyword\">cascade</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">-- 如：删除 class 表中 classid=1 对应的字段时，同时删除 student 表中所有 classid=1 的该行数据。</span></pre></td></tr></table></figure><h3 id=\"删除约束\"><a class=\"anchor\" href=\"#删除约束\">#</a> 删除约束</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>语法：<span class=\"token keyword\">alter</span> <span class=\"token keyword\">table</span> 表名 <span class=\"token keyword\">drop</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">constraint</span><span class=\"token punctuation\">]</span> 约束名称<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">-- constraint 关键字可省略 -- 如果将表删除了，那么相关的约束也就删除了。</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Eg01: <span class=\"token keyword\">alter</span> <span class=\"token keyword\">table</span> student <span class=\"token keyword\">drop</span> <span class=\"token keyword\">primary</span> <span class=\"token keyword\">key</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">-- 存在一个主键约束，可用此操作；</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Eg02: <span class=\"token keyword\">alter</span> <span class=\"token keyword\">table</span> student <span class=\"token keyword\">drop</span> <span class=\"token keyword\">foreign</span> <span class=\"token keyword\">key</span> FK_class_student_id；</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">-- 删除外键</span></pre></td></tr></table></figure><h2 id=\"数据操作\"><a class=\"anchor\" href=\"#数据操作\">#</a> 数据操作</h2>\n<h3 id=\"插入数据\"><a class=\"anchor\" href=\"#插入数据\">#</a> 插入数据：</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1</span>）”<span class=\"token keyword\">insert</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">values</span>”</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>语法：<span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> 表名 <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span>值<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">--（最常用）</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">-- 插入值的顺序必须与表中字段的顺序完全一致。</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Eg01: <span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> student <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> ‘zhangsan’ <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">-- 插入一行数据</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Eg02: <span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> student <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>‘jack’<span class=\"token punctuation\">)</span>，<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> ‘rose’<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">-- 插入多行数据，用逗号隔开；</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>补充：当插入的记录会引发主键或唯一约束冲突时，可以用<span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token keyword\">on</span> <span class=\"token keyword\">duplicate</span> <span class=\"token keyword\">key</span> <span class=\"token keyword\">update</span> 条件</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">*</span><span class=\"token operator\">*</span>。</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>Eg: <span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> student <span class=\"token keyword\">values</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> ‘mike’ <span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token keyword\">on</span> <span class=\"token keyword\">duplicate</span> <span class=\"token keyword\">key</span> <span class=\"token keyword\">update</span> id <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token number\">10</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">-- 由于 id 是主键，id=1 与上面 zhangsan 行冲突，所以自动把 zhangsan 的 id 设置为 10，然后再</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>把id<span class=\"token operator\">=</span><span class=\"token number\">1</span>的mike数据插入进去；</pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token number\">2</span>）”<span class=\"token keyword\">insert</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">set</span>”</pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">-- 按照每一列对应的值插入数据</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>语法：<span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> 表名 <span class=\"token keyword\">set</span> 列名<span class=\"token number\">1</span><span class=\"token operator\">=</span>值<span class=\"token number\">1</span><span class=\"token punctuation\">,</span> 列名<span class=\"token number\">2</span><span class=\"token operator\">=</span>值<span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>Eg01: <span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> student <span class=\"token keyword\">set</span> id <span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span>’abc’<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">-- 插入的数据是：id 为 5，姓名’abc’ 3）”insert...select”</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">-- 把从其他表查询到的数据插入到该表中，类似于 like 属性 Eg01: insert into user</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> student<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">-- 把从 student 中查询到的数据插入到 user 中；</span></pre></td></tr></table></figure><h3 id=\"更新数据\"><a class=\"anchor\" href=\"#更新数据\">#</a> 更新数据</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>格式：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">update</span> 表名 <span class=\"token keyword\">set</span> 列名<span class=\"token number\">1</span><span class=\"token operator\">=</span>值<span class=\"token number\">1</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span>列名<span class=\"token number\">2</span><span class=\"token operator\">=</span>值<span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">where</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token keyword\">limit</span> 行数<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>eg： <span class=\"token keyword\">update</span> student <span class=\"token keyword\">set</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'wangwu'</span> <span class=\"token keyword\">where</span> id <span class=\"token operator\">=</span> <span class=\"token number\">003</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">-- 把 id=3 的列的 name 改为 wangwu；</span></pre></td></tr></table></figure><h3 id=\"删除数据\"><a class=\"anchor\" href=\"#删除数据\">#</a> 删除数据</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>格式：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">delete</span> <span class=\"token keyword\">from</span> 表名 <span class=\"token keyword\">where</span> 列名<span class=\"token operator\">=</span>值；</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>eg：<span class=\"token keyword\">delete</span> <span class=\"token keyword\">from</span> student <span class=\"token keyword\">where</span> id<span class=\"token operator\">=</span><span class=\"token number\">3</span>；</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">-- 删除 id＝３的列的数据。</span></pre></td></tr></table></figure>",
            "tags": [
                "笔记本",
                "MySQL",
                "增删改查"
            ]
        },
        {
            "id": "http://eliauk.cc/mysql-data-type/",
            "url": "http://eliauk.cc/mysql-data-type/",
            "title": "MySQL 存储引擎和数据类型",
            "date_published": "2020-09-03T04:07:24.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><h2 id=\"一-mysql的存储引擎\"><a class=\"anchor\" href=\"#一-mysql的存储引擎\">#</a> 一、MySQL 的存储引擎</h2>\n<ul>\n<li>在 MySQL 这种关系型数据库来说，数据是以表的方式来存储的，因此，简单点来说，存储引擎就是存储和操作此表的类型。</li>\n</ul>\n<h3 id=\"存储引擎的种类\"><a class=\"anchor\" href=\"#存储引擎的种类\">#</a> 存储引擎的种类</h3>\n<ul>\n<li><code>InnoDB</code>  存储引擎  <code>事务型</code> 数据库引擎，提供了 <code>事务</code> 、 <code>回滚</code> 、 <code>崩溃修复</code> 能力、 <code>多版本并发控制的事务安全</code> 。在 <code>MySQL 5.5版本开始</code> 成为默认存储引擎。</li>\n<li><code>MyISAM</code>  存储引擎 MyISAM 存储引擎是 MySQL 中常见的存储引擎，是 <code>MySQL 5.0之前</code> 版本的 <code>默认</code> 存储引擎。 <code>不支持事务</code> 。</li>\n<li><code>MEMORY</code>  存储引擎 MEMORY 存储引擎是 MySQL 中的一个特殊的存储引擎。所有数据放在 <code>内存</code> 中，拥有极高的 <code>插入</code> 、 <code>更新</code> 、 <code>查询效率</code> 。会占用与数据量成正比的内存空间。MySQL <code>重启后数据会丢失</code> 。</li>\n</ul>\n<h2 id=\"二-mysql-数据类型\"><a class=\"anchor\" href=\"#二-mysql-数据类型\">#</a> 二、MySQL 数据类型</h2>\n<table>\n<thead>\n<tr>\n<th>分类</th>\n<th>数据类型</th>\n<th>范例格式</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>整型</td>\n<td>int</td>\n<td>100</td>\n</tr>\n<tr>\n<td>浮点型</td>\n<td>double</td>\n<td>9.9</td>\n</tr>\n<tr>\n<td>字符串型</td>\n<td>varchar (20)</td>\n<td>‘云南省昆明市’</td>\n</tr>\n<tr>\n<td>日期类型</td>\n<td>date</td>\n<td>‘2019-09-09’</td>\n</tr>\n<tr>\n<td>datetime (timestamp)</td>\n<td></td>\n<td>‘2019-09-09 10:20:30’</td>\n</tr>\n</tbody>\n</table>\n<p><strong>详细的数据类型如下：</strong></p>\n<ul>\n<li>MySQL 支持所有标准 SQL 数值数据类型。</li>\n</ul>\n<p><img data-src=\"https://usocute.oss-cn-chengdu.aliyuncs.com/gitbook/mysql-data-abc.png\" alt=\"mysql-data-abc\" /></p>\n<p><img data-src=\"https://usocute.oss-cn-chengdu.aliyuncs.com/gitbook/mysql-data-abc2.png\" alt=\"mysql-data-abc2\" /></p>\n<h2 id=\"三-mysql-数据类型属性\"><a class=\"anchor\" href=\"#三-mysql-数据类型属性\">#</a> 三、MySQL 数据类型属性</h2>\n<table>\n<thead>\n<tr>\n<th>属性名称</th>\n<th>作用</th>\n<th>使用的数据类型范</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>PRIMARY KEY</td>\n<td>主键，确保该行的唯一性。（常与 AUTO_INCREMENT 合用）</td>\n<td>所有数据类型</td>\n</tr>\n<tr>\n<td>AUTO_INCREMENT</td>\n<td>为新插入的行赋上唯一的整数标识符。</td>\n<td>整数（如 ID）</td>\n</tr>\n<tr>\n<td>UNIQUE</td>\n<td>确保该列所有值都不同。(NULL 值可以重复)</td>\n<td>所有数据类型</td>\n</tr>\n<tr>\n<td>NOT NULL</td>\n<td>不允许该列为 NULL。 ---&gt;null 表示该列不存在值</td>\n<td>所有数据类型</td>\n</tr>\n<tr>\n<td>NULL</td>\n<td>允许该列为 NULL。</td>\n<td>所有数据类型</td>\n</tr>\n<tr>\n<td>ZEROFILL</td>\n<td>用 0 填充剩余字段空间，如 INT 类型的表示为： 0000000008</td>\n<td>所有数据类型</td>\n</tr>\n<tr>\n<td>BINARY</td>\n<td>对字符串以区分大小写的方式排序。（按照 ASCII 表）</td>\n<td>CHAR, VARCHAR</td>\n</tr>\n<tr>\n<td>DEFAULT</td>\n<td>在没有任何值的情况下，赋予某个常量。</td>\n<td>BLOB 和 TEXT 列 * 不 可用</td>\n</tr>\n<tr>\n<td>INDEX</td>\n<td>为该列创建一个索引。（有序的键值组）</td>\n<td>所有数据类型</td>\n</tr>\n<tr>\n<td>NATIONAL</td>\n<td>确保该列使用默认字符集。</td>\n<td>CHAR, VARCHAR</td>\n</tr>\n</tbody>\n</table>\n",
            "tags": [
                "笔记本",
                "MySQL",
                "存储引擎",
                "数据类型"
            ]
        },
        {
            "id": "http://eliauk.cc/Freshman-year-end/",
            "url": "http://eliauk.cc/Freshman-year-end/",
            "title": "逝去的的大一生活",
            "date_published": "2020-07-31T03:42:31.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script>",
            "tags": [
                "事件簿",
                "生活记录"
            ]
        },
        {
            "id": "http://eliauk.cc/eighteen-year-old/",
            "url": "http://eliauk.cc/eighteen-year-old/",
            "title": "18岁，成年了呀~",
            "date_published": "2019-11-09T16:00:00.000Z",
            "content_html": "<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"\\assets\\js\\Meting.min.js\"></script><blockquote>\n<p>  我一直知道有人爱我。十八年前的冬天，有人在漫天飞雪的日子里满心欢喜地期待着我。期待于冬日结果。生日的意义不是提醒我又长大一岁，而是温柔的告诉我，要好好的，毕竟有人曾经有人那么温柔的等待着我。</p>\n</blockquote>\n",
            "tags": [
                "事件簿",
                "生活记录",
                "成长"
            ]
        }
    ]
}