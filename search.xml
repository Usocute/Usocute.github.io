<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>HTML5、CSS3实现简单响应式瀑布流布局</title>
      <link href="post/89ee8a3d.html"/>
      <url>post/89ee8a3d.html</url>
      
        <content type="html"><![CDATA[<p><strong>瀑布流</strong>，又称瀑布流式布局。是比较流行的一种网站页面布局，视觉表现为参差不齐的多栏布局，随着页面滚动条向下滚动，这种布局还会不断加载数据块并附加至当前尾部。最早采用此布局的网站是Pinterest，逐渐在国内流行开来。国内大多数清新站基本为这类风格。</p><h2 id="为什么使用瀑布流">为什么使用瀑布流</h2><p>瀑布流布局在我们现在的前端页面中经常会用的到，它可以有效的降低页面的复杂度，节省很多的空间，对于整个页面不需要太多的操作，只需要下拉就可以浏览用户需要看到的数据；并且，在当前这个APP至上的时代，瀑布流可以提供很好的用户体验，通过结合下拉刷新，上拉加载进行数据的懒加载等操作，对于用户的体验感来说是接近于满分的！</p><h2 id="瀑布流的特点">瀑布流的特点</h2><p>其实瀑布流的特点就是参差不齐的排列方式，以及流式布局的扩展性，可以通过界面展示给用户多条数据，并且让用户可以有向下浏览的冲动。</p><h2 id="瀑布流的代码实现">瀑布流的代码实现</h2><h3 id="实现思路">实现思路</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">column-count</span>：指定列数</span><br><span class="line"><span class="selector-tag">column-gap</span>: 设置列之间的间距</span><br></pre></td></tr></table></figure><h3 id="实现代码">实现代码</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://z3.ax1x.com/2021/05/30/2ZPyjO.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;dog&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>毒鸡汤<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">      现在人和人之间的矛盾，主要是来源于有那么一拨人，惯于用圣人的标准衡量别人，用贱人的标准要求自己。现在人和人之间的矛盾，主要是来源于有那么一拨人，惯于用圣人的标准衡量别人，用贱人的标准要求自己。现在人和人之间的矛盾，主要是来源于有那么一拨人，惯于用圣人的标准衡量别人，用贱人的标准要求自己。现在人和人之间的矛盾，主要是来源于有那么一拨人，惯于用圣人的标准衡量别人，用贱人的标准要求自己。</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://z3.ax1x.com/2021/05/30/2ZPyjO.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;dog&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>毒鸡汤<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">      钱是买不到快乐和开心的，但是当你有钱之后，就会有人想尽办法的让你开心，这就是现实。钱是买不到快乐和开心的，但是当你有钱之后，就会有人想尽办法的让你开心，这就是现实。</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://z3.ax1x.com/2021/05/30/2ZPyjO.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;dog&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>毒鸡汤<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">      白雪公主因为漂亮，所以被王后嫉妒；因为漂亮，所以被猎人放走；因为漂亮，所以被小矮人收留；因为漂亮，所以被王子亲醒；所以，你明白了吗？善良没用，你得漂亮。</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://z3.ax1x.com/2021/05/30/2ZPyjO.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;dog&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>毒鸡汤<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">      生活这几年教会我最大的道理的就是，不要跟生活正面刚。吃不下就不吃，睡不着就不睡，错过了就不要追，得不到就等着，死不了就撑着。</span><br><span class="line">      生活这几年教会我最大的道理的就是，不要跟生活正面刚。吃不下就不吃，睡不着就不睡，错过了就不要追，得不到就等着，死不了就撑着。</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://z3.ax1x.com/2021/05/30/2ZPyjO.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;dog&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>毒鸡汤<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">      谈恋爱还没几个月就想过一辈子，交个朋友稍微对你好点就想来往一生，难怪你的怨气那么重、悲伤那么多，这都是天真的代价。</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://z3.ax1x.com/2021/05/30/2ZPyjO.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;dog&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>毒鸡汤<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">      生活这几年教会我最大的道理的就是，不要跟生活正面刚。吃不下就不吃，睡不着就不睡，错过了就不要追，得不到就等着，死不了就撑着。</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://z3.ax1x.com/2021/05/30/2ZPyjO.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;dog&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>毒鸡汤<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">      你从80楼往下看，全是美景，但你从2楼往下看，全是垃圾，人若没有高度，看到的全是问题，人若没有格局，看到的全是鸡毛蒜皮。</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://z3.ax1x.com/2021/05/30/2ZPyjO.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;dog&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>毒鸡汤<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">      生活这几年教会我最大的道理的就是，不要跟生活正面刚。吃不下就不吃，睡不着就不睡，错过了就不要追，得不到就等着，死不了就撑着。</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://z3.ax1x.com/2021/05/30/2ZPyjO.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;dog&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>毒鸡汤<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">      如果你从来不相信自己，你就永远都不会让自己失望！如果你从来不相信自己，你就永远都不会让自己失望！</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">1200px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">20px</span> auto;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">column-count</span>: <span class="number">5</span>;</span><br><span class="line">  <span class="attribute">-moz-column-gap</span>:<span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">-webkit-column-gap</span>:<span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">column-gap</span>:<span class="number">40px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.item</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.item</span> <span class="selector-tag">h2</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">  <span class="attribute">break-inside</span>: avoid;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width:</span> <span class="number">1200px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">column-count</span>: <span class="number">3</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">40px</span>);</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span> <span class="number">20px</span> <span class="number">20px</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width:</span> <span class="number">768px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">column-count</span>: <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width:</span> <span class="number">480px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">column-count</span>: <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>总结：</p></blockquote><ul><li><p><strong>优势：css 设置简单，渲染高效。</strong></p></li><li><p><strong>劣势：不符合瀑布流的原理，不会识别哪一块图片放在哪个地方合适，若是再配合动态加载，效果会特别不好。但可以通过媒体查询设置不同列数。</strong></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> HTML/CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> CSS </tag>
            
            <tag> 瀑布流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery 基础拾遗</title>
      <link href="post/970c811f.html"/>
      <url>post/970c811f.html</url>
      
        <content type="html"><![CDATA[<h2 id="核心概念和知识点">核心概念和知识点</h2><h3 id="什么是jQuery">什么是jQuery</h3><ul><li>jQuery 是对javascript的一种封装–js的函数库。</li><li>用于客户端的开发，由美国人在2001年1月推出。</li></ul><h3 id="jQuery与javascript的区别">jQuery与javascript的区别</h3><ol><li>本质上的区别：jQuery是一个函数库，基于js语言编写出来的框架，实质上还是属于js。</li><li>代码书写不同，jq更简单。</li><li>使用方法不同：使用jQuery和javascript分别加载DOM,<code>js只执行一次</code>，<code>jq可以执行多次</code>。</li><li>获取class的方法不同。js没有默认的获取方式，jq可以通过<code>$(&quot;.类名&quot;)</code>来获取</li></ol><h3 id="jQuery的优势">jQuery的优势</h3><ol><li>轻量级</li><li>对浏览器的兼容性好</li><li>强大的选择器</li><li>完善的ajax</li><li>丰富的API文档和插件等</li></ol><h3 id="熟悉使用jQuery">熟悉使用jQuery</h3><ol><li><p>获取相关的js文件</p><ul><li>jquery-xxx.js 与 jquery-xxx.min.js区别：<ol><li>jquery-xxx.js：开发版本。给程序员看的，有良好的缩进和注释。体积大一些</li><li>jquery-xxx.min.js：生产版本。没有缩进。体积小一些。程序加载更快</li></ol></li><li>引用 在页面上引用js文件</li><li>基本使用语法:$(“选择器名”).操作</li><li>jQuery的文档就绪(加载)三种写法：</li></ul> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*方法1*/</span></span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  选择对象进行操作</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*方法2*/</span></span><br><span class="line">$().ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;              </span><br><span class="line">  选择对象进行操作</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*方法3*/</span></span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;   <span class="comment">// 此方法最简洁</span></span><br><span class="line">  选择对象进行操作</span><br><span class="line">&#125;); </span><br></pre></td></tr></table></figure></li></ol><h3 id="window-onload和-function-区别">window.onload和$(function)区别</h3><ul><li>window.onload 只能定义一次,如果定义多次，后边的会将前边的覆盖掉。</li><li>$(function)可以定义多次的。</li></ul><h3 id="jQuery对象与DOM对象的异同">jQuery对象与DOM对象的异同</h3><h4 id="什么是jQuery对象">什么是jQuery对象?</h4><blockquote><p>通过jQuery包装DOM(文档)对象后产生的对象，凡是在$(“”)中的都属于jQuery对象。</p></blockquote><h4 id="什么是DOM对象？">什么是DOM对象？</h4><blockquote><p>页面中元素的集合就是文档对象。</p></blockquote><div class="note orange no-icon flat"><p>注意 🐟<br>1. jQuery对象与文档对象不能混合使用。<br>2. jQuery对象不能使用文档对象的属性及方法，同理文档对象也是。</p></div><div class="note orange no-icon flat"><p>注意 🐱<br>DOM(文档)对象与jQuery对象是可以相互转换的<br>js转jq：在dom对象的最外层用$()进行包裹即可。<br>jq转js：先获取jq对象:var $jq=$(“选择器名”); $jq.get(索引);</p></div><h3 id="jQuery库与其他库出现冲突问题-释放-的控制权">jQuery库与其他库出现冲突问题(释放$的控制权)</h3><ol><li><p>方法一：在代码的第一行加入:<code>jQuery.noConflict()</code>;释放了jQuery的$含义，如果仍需使用，需把$改为jQuery。</p></li><li><p>方法二</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $jq=jQuery.noConflict();   <span class="comment">/*赋值为一个变量*/</span></span><br><span class="line">$jq(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;     </span><br><span class="line">    正常使用</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol><h2 id="jQuery-选择器">jQuery 选择器</h2><h3 id="jQuery选择器与CSS选择器的区别">jQuery选择器与CSS选择器的区别</h3><ol><li>jQuery与CSS是两种不同的语言，jQuery是一个js框架，CSS是层叠样式表，所以两者本质上是不同的。</li><li>两者有一定交集，都是被网页或浏览器解析的语言，而jQuery可以通过修改浏览器的dom对象来实现对CSS的修改或控制。</li></ol><div class="note orange no-icon flat"><p>总结，jQuery选择器应用于js中，CSS选择器用于CSS中，只是两者有时使用相同的id标识来选择对象。<br>jQuery选择器包含了CSS 1, CSS 2, CSS 3 中的绝大多数选择器。</p></div><h3 id="jQuery选择器的优点">jQuery选择器的优点</h3><ol><li>写法简洁</li><li>继承了CSS选择器的风格，支持CSS1–CSS3选择器</li><li>完善的处理机制可以避免浏览器报错，比单纯的CSS功能更强大，还可兼容不同的浏览器。</li></ol><h3 id="jQuery选择器的分类">jQuery选择器的分类</h3><ul><li>基本选择器</li><li>层次选择器</li><li>过滤选择器</li><li>表单选择器</li></ul><h3 id="基本选择器">基本选择器</h3><table><thead><tr><th>选择器名</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>id选择器：  #id</td><td>根据id获取元素</td><td>$(“#test”)</td></tr><tr><td>类选择器：  .class</td><td>根据类名获取元素</td><td>$(“.test”)</td></tr><tr><td>元素选择器:  element</td><td>根据元素名称获取元素</td><td>$(“p”)</td></tr><tr><td>所有元素选择器： *</td><td>获取所有元素</td><td>$(“*”)</td></tr><tr><td>并集选择器： s1,s2…</td><td>将选择的所有元素合并</td><td>$(“div, span”)</td></tr></tbody></table><h3 id="jQuery的层次选择器">jQuery的层次选择器</h3><table><thead><tr><th>选择器</th><th>语法</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td>后代选择器</td><td><code>$(&quot;A  B &quot;)</code></td><td style="text-align:left">选择A元素内部的所有B元素</td></tr><tr><td>子选择器</td><td><code>$(&quot;A &gt; B&quot;)</code></td><td style="text-align:left">选择A元素内部的所有B子元素</td></tr></tbody></table><h3 id="jQuery的属性选择器">jQuery的属性选择器</h3><table><thead><tr><th>选择器</th><th>语法</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td>属性名称选择器</td><td>$(“A[属性名]”)</td><td style="text-align:left">包含指定属性的选择器</td></tr><tr><td>属性选择器</td><td>$(“A[属性名=‘值’]”)</td><td style="text-align:left">包含指定属性等于指定值的选择器</td></tr><tr><td>复合属性选择器</td><td>$(“A[属性名=‘值’][]…”)</td><td style="text-align:left">包含多个属性条件的选择器</td></tr></tbody></table><h3 id="jQuery-过滤选择器">jQuery 过滤选择器</h3><table><thead><tr><th>选择器</th><th>语法</th><th>描述</th></tr></thead><tbody><tr><td>首元素选择器</td><td>:first</td><td>获得选择的元素中的第一个元素</td></tr><tr><td>尾元素选择器</td><td>:last</td><td>获得选择的元素中的最后一个元素&lt;</td></tr><tr><td>非元素选择器</td><td>:not(selector)</td><td>不包括指定内容的元素</td></tr><tr><td>偶数选择器</td><td>:even</td><td>偶数，从 0 开始计数</td></tr><tr><td>奇数选择器</td><td>:odd</td><td>奇数，从 0 开始计数</td></tr><tr><td>等于索引选择器</td><td>:eq(index)</td><td>指定索引元素</td></tr><tr><td>大于索引选择器</td><td>:gt(index)</td><td>大于指定索引元素</td></tr><tr><td>小于索引选择器</td><td>:lt(index)</td><td>小于指定索引元素</td></tr><tr><td>标题选择器</td><td>:header</td><td>获得标题（h1~h6）元素，固定写法</td></tr></tbody></table><h3 id="jquery-表单过滤选择器">jquery 表单过滤选择器</h3><table><thead><tr><th>选择器</th><th>语法</th><th>描述</th></tr></thead><tbody><tr><td>可用元素选择器</td><td>:enabled</td><td>获得可用元素</td></tr><tr><td>不可用元素选择器</td><td>:disabled</td><td>获得不可用元素</td></tr><tr><td>单选/复选框选中选择器</td><td>:checked</td><td>获得单选/复选框选中的元素</td></tr><tr><td>下拉框选中选择器</td><td>:selected</td><td>获得下拉框选中的元素</td></tr></tbody></table><h3 id="jQuery表单选择器">jQuery表单选择器</h3><table><thead><tr><th>语法</th><th>描述</th></tr></thead><tbody><tr><td>$(“:input”)</td><td>选取所有的<code>&lt;input&gt;</code>,<code>&lt;textarea&gt;</code>,<code>&lt;select&gt;</code>,<code>&lt;button&gt;</code>元素</td></tr><tr><td>$(“:text”)</td><td>选取所有的单行文本框</td></tr><tr><td>$(“:password”)</td><td>选取所有的密码框</td></tr><tr><td>$(“:radio”)</td><td>选取所有的单选框</td></tr><tr><td>$(“:checkbox”)</td><td>选取所有的多选框</td></tr><tr><td>$(“:submit”)</td><td>选取所有的提交按钮</td></tr><tr><td>$(“:button”)</td><td>选取所有的按钮</td></tr><tr><td>$(“:hidden”)</td><td>选取所有的不可见元素</td></tr></tbody></table><h2 id="jQuery-DOM操作">jQuery DOM操作</h2><h3 id="jQuery节点添加与删除">jQuery节点添加与删除</h3><table><thead><tr><th>语法</th><th>示例</th><th>描述</th></tr></thead><tbody><tr><td>append()</td><td>对象1.append(对象2)</td><td>将对象2添加到对象1元素内部，并且在末尾</td></tr><tr><td>appendTo()</td><td>对象1.appendTo(对象2):</td><td>将对象1添加到对象2内部，并且在末尾</td></tr><tr><td>prepend()</td><td>对象1.prepend(对象2):</td><td>将对象2添加到对象1元素内部，并且在开头</td></tr><tr><td>prependTo()</td><td>对象1.prependTo(对象2):</td><td>将对象1添加到对象2内部，并且在开头</td></tr><tr><td>empty()</td><td>对象.empty():</td><td>将对象的后代元素全部清空，但是保留当前对象以及其属性节点</td></tr><tr><td>after()</td><td>对象1.after(对象2)</td><td>将对象2添加到对象1后边。对象1和对象2是兄弟关系</td></tr><tr><td>before()</td><td>对象1.before(对象2)</td><td>将对象2添加到对象1前边。对象1和对象2是兄弟关系</td></tr><tr><td>insertAfter()</td><td>对象1.insertAfter(对象2)</td><td>将对象1添加到对象2后边。对象1和对象2是兄弟关系</td></tr><tr><td>insertBefore()</td><td>对象1.insertBefore(对象2)</td><td>将对象1添加到对象2前边。对象1和对象2是兄弟关系</td></tr><tr><td>remove()</td><td>对象.remove()</td><td>将对象删除掉</td></tr></tbody></table><h3 id="jQuery节点的复制、替换、包裹">jQuery节点的复制、替换、包裹</h3><table><thead><tr><th>示例</th><th>描述</th></tr></thead><tbody><tr><td>对象A.clone()</td><td>复制A对象</td></tr><tr><td>对象A.replaceWith(对象B)</td><td>把&quot;A对象&quot;替换为&quot;B对象&quot;</td></tr><tr><td>对象A.replaceAll(对象B)</td><td>使用&quot;A对象&quot;替换&quot;B对象&quot;</td></tr><tr><td>标签A.wrap(标签B)</td><td>B标签分别包裹住每一个A标签</td></tr><tr><td>标签A.wrapAll(标签B)</td><td>B标签包裹住所有A标签</td></tr><tr><td>标签A.wrapInner(标签B)</td><td>B标签分别包裹住A标签内的所有文本内容</td></tr></tbody></table><h3 id="jQuery-节点属性操作">jQuery 节点属性操作</h3><table><thead><tr><th>示例</th><th>描述</th></tr></thead><tbody><tr><td>attr(“属性名”)</td><td>获取属性值</td></tr><tr><td>attr(“属性名”,“属性值”)</td><td>设置属性值</td></tr><tr><td>removeAttr(“属性名”)</td><td>移除属性</td></tr></tbody></table><h3 id="jQuery-节点样式操作">jQuery 节点样式操作</h3><table><thead><tr><th>示例</th><th>描述</th></tr></thead><tbody><tr><td>addClass(样式名)</td><td>添加样式</td></tr><tr><td>removeClass(样式名)</td><td>删除样式</td></tr><tr><td>toggleClass(样式名)</td><td>切换样式</td></tr><tr><td>css(“样式名”,“属性”)</td><td>添加单个样式</td></tr><tr><td>css({“样式名1”:“属性1” , “样式名2”:“属性2”…})</td><td>添加多个样式</td></tr><tr><td>hasClass(样式名)</td><td>判断样式是否存在</td></tr></tbody></table><h3 id="jQuery-html-text-val-方法">jQuery html(),  text(),  val()方法</h3><table><thead><tr><th>示例</th><th>描述</th></tr></thead><tbody><tr><td>html()方法</td><td>用于设置或获取某个元素中的html内容</td></tr><tr><td>text()方法</td><td>用于设置或获取某个元素中的文本内容</td></tr><tr><td>val()方法</td><td>用于设置或获取某个元素的值</td></tr></tbody></table><h3 id="遍历节点">遍历节点</h3><table><thead><tr><th>示例</th><th>描述</th></tr></thead><tbody><tr><td>children()</td><td>获取当前的元素的子元素集合(父亲找儿子)</td></tr><tr><td>find()</td><td>获取当前的元素的所有后代元素集合(祖宗找后代)</td></tr><tr><td>parent()</td><td>获取当前元素的父元素集合(儿子找父亲)</td></tr><tr><td>parents()</td><td>获取当前元素的所有前辈元素集合(后辈找前辈)</td></tr><tr><td>siblings()</td><td>获取当前元素的所有同级元素集合(同辈找同辈)</td></tr><tr><td>next()</td><td>获取当前元素的下一个同级元素</td></tr><tr><td>prev()</td><td>获取当前元素的上一个同级元素</td></tr></tbody></table><h3 id="jQuery-CSS的DOM操作">jQuery CSS的DOM操作</h3><table><thead><tr><th>示例</th><th>描述</th></tr></thead><tbody><tr><td>css()方法</td><td>设置或获取元素的样式属性</td></tr><tr><td>height(),width()</td><td>设置或获取高度、宽度属性</td></tr></tbody></table><h2 id="jQuery中的事件与动画">jQuery中的事件与动画</h2><h3 id="jQuery中的遍历补充">jQuery中的遍历补充</h3><ol><li><p>jQuery对象.each(callback)<br>语法：<code>jQuery对象.each(function(index,element)&#123;&#125;)</code>;</p><ul><li>index:就是元素在集合中的索引</li><li>element：就是集合中的每一个元素对象</li><li>this：获取到的当前元素对象</li><li>callback：回调函数</li></ul></li><li><p><code>$.each(object, [callback])</code></p></li><li><p>for…of:<code>for(元素对象 of 容器对象)</code></p></li></ol><h3 id="jQuery中的事件绑定">jQuery中的事件绑定</h3><ol><li>jQuery的标准绑定方式<ul><li>jQuery对象.事件方法(回调函数)；</li><li>注意：如果调用事件方法，不传递回调函数，则会触发浏览器默认行为。</li><li>补充： 表单对象.submit();//让表单提交</li></ul></li><li>on()或者bind()绑定事件和off()或者unbind()解除绑定<ul><li>jQuery对象.on(“事件名称”,回调函数)</li><li>jQuery对象.off(“事件名称”)</li><li>如果off方法不传递任何参数，则将组件上的所有事件全部解绑</li></ul></li><li>事件切换1：toggle(fn1,fn2,…)方法：模拟鼠标连续点击事件，对里面的函数进行切换。<ul><li>jQuery对象.toggle(fn1,fn2…)</li><li>当单击jQuery对象对应的组件后，会执行fn1.第二次点击会执行fn2…</li><li>注意：1.9版本之后 .toggle() 方法删除,jQuery Migrate（迁移）插件可以恢复此功能。</li></ul></li><li>事件切换2：hover(enter,leave)方法：模拟鼠标悬停事件，鼠标移到元素上触发第一个enter()函数，鼠标移除触发leave()函数</li></ol><h3 id="jQuery中的动画">jQuery中的动画</h3><ol><li>显示/隐藏：show() / hide()组合方法：toggle()</li><li>淡入/淡出：fadeIn() / fadeOut()组合方法：fadeToggle()</li><li>滑入/滑出：slideUp() / slideDown()组合方法：slideToggle()</li><li>自定义动画：animate()</li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> jQuery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回不去的是我们终将逝去的青春</title>
      <link href="post/d946c19e.html"/>
      <url>post/d946c19e.html</url>
      
        <content type="html"><![CDATA[<p><strong>那个夏天的蝉鸣比那一年都聒噪 教室外枝桠疯长却总也遮不住烈阳</strong></p><iframe src="//player.bilibili.com/player.html?aid=503425297&bvid=BV1Kg411G7Kp&cid=349126833&page=1" width="100%" height="500px" frameborder="0" loading="lazy" allowfullscreen></iframe>]]></content>
      
      
      <categories>
          
          <category> 往事如烟 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 往事如烟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用原生JS写一个图片轮播</title>
      <link href="post/424c46eb.html"/>
      <url>post/424c46eb.html</url>
      
        <content type="html"><![CDATA[<ul><li><strong>图片轮播好像经常要用到，让图片轮播的方法：将多个大小相同的图片横排放在一个图片中，然后在图片容器外加一个展示容器，并为图片容器添加自定义动画，在动画不同阶段设置递增的偏移值即可实现图片轮播。</strong></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrap&quot;</span> <span class="attr">id</span>=<span class="string">&#x27;wrap&#x27;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 要轮播的图片 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;pic&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;image/banner1.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;image/banner2.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;image/banner3.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;image/banner4.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 左右切换按钮 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span> <span class="attr">id</span>=<span class="string">&quot;left&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;image/.png&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span> <span class="attr">id</span>=<span class="string">&quot;right&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;image/foot.png&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 分页器 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ol</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;on&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.wrap</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">480px</span>;</span><br><span class="line">  <span class="attribute">width</span>: auto;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.wrap</span> <span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.wrap</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">480px</span>;</span><br><span class="line">  <span class="attribute">width</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.wrap</span> <span class="selector-tag">ol</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">40%</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.wrap</span> <span class="selector-tag">ol</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#ccc</span>;</span><br><span class="line">  <span class="attribute">border</span>: solid <span class="number">7px</span> darkgray;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#000</span>;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.wrap</span> <span class="selector-tag">ol</span> <span class="selector-class">.on</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: red;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">clip</span>: <span class="built_in">rect</span>(-<span class="number">24px</span> <span class="number">57px</span> <span class="number">108px</span> -<span class="number">13px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">clip</span>: <span class="built_in">rect</span>(-<span class="number">19px</span> <span class="number">112px</span> <span class="number">108px</span> <span class="number">41px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 获取DOM元素节点</span></span><br><span class="line">  left = <span class="built_in">document</span>.getElementById(<span class="string">&quot;left&quot;</span>);</span><br><span class="line">  right = <span class="built_in">document</span>.getElementById(<span class="string">&quot;right&quot;</span>);</span><br><span class="line">  div = <span class="built_in">document</span>.getElementById(<span class="string">&quot;wrap&quot;</span>);</span><br><span class="line">  pic = <span class="built_in">document</span>.getElementById(<span class="string">&quot;pic&quot;</span>).getElementsByTagName(<span class="string">&quot;li&quot;</span>);</span><br><span class="line">  item = <span class="built_in">document</span>.getElementById(<span class="string">&quot;list&quot;</span>).getElementsByTagName(<span class="string">&quot;li&quot;</span>);</span><br><span class="line">  <span class="keyword">var</span> index = <span class="number">0</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">change</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; pic.length; i++) &#123;</span><br><span class="line">      pic[i].style.display = <span class="string">&quot;none&quot;</span>;</span><br><span class="line">      item[i].className = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (index &gt; <span class="number">3</span>) &#123;</span><br><span class="line">      index = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pic[index].style.display = <span class="string">&quot;block&quot;</span>;</span><br><span class="line">    item[index].className = <span class="string">&quot;on&quot;</span>;</span><br><span class="line">    index++;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> set = <span class="built_in">setInterval</span>(change, <span class="number">1500</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> k = <span class="number">0</span>; k &lt; item.length; k++) &#123;</span><br><span class="line">    item[k].index = k;</span><br><span class="line">    item[k].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; pic.length; j++) &#123;</span><br><span class="line">        pic[j].style.display = <span class="string">&quot;none&quot;</span>;</span><br><span class="line">        item[j].className = <span class="string">&quot;&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      index = <span class="built_in">this</span>.index;</span><br><span class="line">      pic[index].style.display = <span class="string">&quot;block&quot;</span>;</span><br><span class="line">      item[index].className = <span class="string">&quot;on&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 鼠标移动到图片上时(轮播停止,切换按钮显示)</span></span><br><span class="line">  div.onmouseover = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">clearInterval</span>(set);</span><br><span class="line">    right.style.display = <span class="string">&quot;block&quot;</span>;</span><br><span class="line">    left.style.display = <span class="string">&quot;block&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 鼠标从图片上移开(轮播重新开始,切换按钮隐藏)</span></span><br><span class="line">  div.onmouseout = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    set = <span class="built_in">setInterval</span>(change, <span class="number">1500</span>);</span><br><span class="line">    right.style.display = <span class="string">&quot;none&quot;</span>;</span><br><span class="line">    left.style.display = <span class="string">&quot;none&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 切换到上一张</span></span><br><span class="line">  left.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; pic.length; i++) &#123;</span><br><span class="line">      pic[i].style.display = <span class="string">&quot;none&quot;</span>;</span><br><span class="line">      item[i].className = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (index &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      index = <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pic[index].style.display = <span class="string">&quot;block&quot;</span>;</span><br><span class="line">    item[index].className = <span class="string">&quot;on&quot;</span>;</span><br><span class="line">    index--;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 切换到下一张</span></span><br><span class="line">right.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; pic.length; i++) &#123;</span><br><span class="line">    pic[i].style.display = <span class="string">&quot;none&quot;</span>;</span><br><span class="line">    item[i].className = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (index &gt; <span class="number">3</span>) &#123;</span><br><span class="line">    index = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  pic[index].style.display = <span class="string">&quot;block&quot;</span>;</span><br><span class="line">  item[index].className = <span class="string">&quot;on&quot;</span>;</span><br><span class="line">  index++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> JavaScript基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> JS </tag>
            
            <tag> 图片轮播 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript高级⑥-存储(cookie)</title>
      <link href="post/7292aa95.html"/>
      <url>post/7292aa95.html</url>
      
        <content type="html"><![CDATA[<h2 id="sessionStorage、localStorage和cookie">sessionStorage、localStorage和cookie</h2><h3 id="相同点">相同点</h3><ul><li>都是保存在浏览器端、且同源的。</li></ul><h3 id="区别">区别</h3><ol><li>cookie数据始终在同源的http请求中携带（即使不需要），即cookie在浏览器和服务器间来回传递，而sessionStorage和localStorage不会自动把数据发送给服务器，仅在本地保存。<code>cookie数据还有路径（path）的概念，可以限制cookie只属于某个路径下</code>。</li><li>存储大小限制也不同，<code>cookie数据不能超过4K（小于4096）</code>，同时因为每次http请求都会携带cookie、所以<code>cookie只适合保存很小的数据，如会话标识</code>。<code>sessionStorage和localStorage</code>虽然也有存储大小的限制，但比cookie大得多，可以达到<code>5M或更大</code>。</li><li>数据有效期不同，<code>sessionStorage</code>：仅在<code>当前浏览器窗口关闭之前</code>有效；<code>localStorage</code>：<code>始终有效</code>，窗口或浏览器关闭也一直保存，因此用作持久数据；<code>cookie</code>：只<code>在设置的cookie过期时间之前有效</code>，即使窗口关闭或浏览器关闭。</li><li>作用域不同，sessionStorage不在不同的浏览器窗口中共享，即使是同一个页面；localstorage在所有同源窗口中都是共享的；cookie也是在所有同源窗口中都是共享的。</li><li><code>web Storage</code>支持事件通知机制，可以将数据更新的通知发送给监听者。</li><li><code>web Storage</code>的api接口使用更方便。</li><li><code>sessionStorage</code>用于本地存储一个会话（session）中的数据，这些数据只有在同一个会话中的页面才能访问并且当会话结束后数据也随之销毁。因此<code>sessionStorage</code>不是一种持久化的本地存储，仅仅是会话级别的存储。而<code>localStorage</code>用于持久化的本地存储，除非主动删除数据，否则数据是永远不会过期的。</li></ol><h2 id="Cookie">Cookie</h2><ol><li><p>什么是Cookie：cookie是存储于用户计算机中的变量。每当该计算机通过浏览器请求某个页面时，就会发送这个cookie。我们可以使用JavaScript来创建和获取cookie的值。</p></li><li><p>cookie的存储形式：<code>键值对</code>，如：<code>name=张三</code></p></li><li><p>使用JS创建Cookie的格式：<code>document.cookie = “name=张三”;</code><br>还可以为cookie添加一个过期时间（UTC或GMT,默认情况下，cookie在浏览器关闭时删除）。如：</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.cookie = “name=张三;</span><br><span class="line">expires=Thu, <span class="number">18</span> Dec <span class="number">2019</span> <span class="number">12</span>:<span class="number">00</span>:<span class="number">00</span> GMT”;</span><br></pre></td></tr></table></figure></li><li><p>使用JS读取Cookie的格式： <code>var X = document.cookie;</code></p></li><li><p>修改Cookie：JS中修改cookie类似于创建cookie，旧的cookie会被覆盖掉。</p></li><li><p>删除Cookie：只需设置expires参数为以前的时间即可。<br>如：</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.cookie = “name=张三; </span><br><span class="line">expires=Thu, <span class="number">18</span> Dec <span class="number">2019</span> <span class="number">12</span>:<span class="number">00</span>:<span class="number">00</span> GMT”;</span><br></pre></td></tr></table></figure></li><li><p>Cookie的缺点：</p><ol><li>Cookie可能被用户禁用。</li><li>同一个页面被不同浏览器访问时，浏览器之间保存的Cookie不能相互访问。</li><li>每个Cookie都保存在客户端硬盘文件上，可能会被删除。</li><li>Cookie安全性不高，所有Cookie都是以纯文本形式记录于文件中。</li></ol></li></ol><h2 id="Web存储机制">Web存储机制</h2><blockquote><ul><li>HTML5提供了一种新的对象<code>Storage</code>，类似于<code>String</code>、<code>Number</code>、<code>Object</code>。通过Storage对象提供的方法和属性来对数据进行增删改查。</li><li>html5中的<code>Web Storage</code>包括了两种存储方式：<code>localStorage</code>和<code>sessionStorage</code>。两者都是用来存储客户端临时信息的对象。</li><li><code>sessionStorage</code>用于本地存储一个会话（<code>session</code>）中的数据，这些数据只有在同一个会话中的页面才能访问，并且当会话结束后数据也随之销毁。因此sessionStorage不是一种持久化的本地存储，仅是会话级别的存储。只允许同一窗口访问。而localStorage用于持久化的本地存储，除非主动删除数据，否则数据是永远不会过期的。同源可以读取并修改localStorage数据。并且他们储存的对象类型均为字符串类型；我们将数据以键值对的形式保存到Storage对象里，通过Storage对象提供的方法进行数据操作。</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 增：接受一个键名和值作为参数，将会把键值对添加到存储中，如果键名存在，则更新其对应的值。</span></span><br><span class="line">Storage.setItem()</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 删</span></span><br><span class="line"><span class="comment">// 清空存储中的所有键名</span></span><br><span class="line">Storage.clear()</span><br><span class="line"><span class="comment">// 接受一个键名作为参数，并把该键名从存储中删除。</span></span><br><span class="line">Storage.removeItem()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 改：接受一个键名和值作为参数，将会把键值对添加到存储中，如果键名存在，则更新其对应的值。</span></span><br><span class="line">Storage.setItem()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 查</span></span><br><span class="line"><span class="comment">// 接受一个键名作为参数，返回键名对应的值</span></span><br><span class="line">Storage.getItem()</span><br><span class="line"><span class="comment">// 接受一个数值 n 作为参数，并返回存储中索引为n 的键名</span></span><br><span class="line">Storage.key()</span><br><span class="line"><span class="comment">// 返回存储的数据量</span></span><br><span class="line">Storage.length</span><br></pre></td></tr></table></figure><h2 id="sessionStorage对象">sessionStorage对象</h2><ul><li>sessionStorage对象存储某个特定会话的数据，该数据只保持到浏览器关闭（类似于cookie）。</li><li>存储在sessionStorage对象中的数据可以跨越页面刷新而存在。部分浏览器也支持在浏览器崩溃的情况下重启仍然可用（如：Firefox和WebKit等，但是IE不支持）。</li><li>sessionStorage对象其实是Storage对象的一个实例，具体方法如下：<ol><li>sessionStorage.length:获取存储在Storage对象中的数据的数量，是一个只读属性。</li><li>sessionStorage.key():接受一个数值 n 作为参数，并返回存储中索引为n 的键名。</li><li>sessionStorage.getItem():接受一个键名作为参数，返回键名对应的值。</li><li>sessionStorage.setItem()：接受一个键名和值作为参数，将会把键值对添加到存储中，如果键名存在，则更新其对应的值。</li><li>sessionStorage.clear()：清空存储中的所有键名。</li><li>sessionStorage.removeItem()：接受一个键名作为参数，并把该键名从存储中删除。</li></ol></li></ul><h2 id="globalStorage">globalStorage</h2><blockquote><p>globalStorage在浏览器关闭以后，使用globalStorage存储的信息仍能够保留下来，localStorage一样，域中任何一个页面存储的信息都能被所有的页面共享。</p></blockquote><ul><li>基本语法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在developer.mozilla.org下面所有的子域都可以通过这个命名空间存储对象来进行读和写</span></span><br><span class="line">globalStorage[<span class="string">&#x27;developer.mozilla.org&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在mozilla.org域名下面的所有网页都可以通过这个命名空间存储对象来进行读和写</span></span><br><span class="line">globalStorage[<span class="string">&#x27;mozilla.org&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在.org域名下面的所有网页都可以通过这个命名空间存储对象来进行读和写</span></span><br><span class="line">globalStorage[<span class="string">&#x27;org&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在任何域名下的任何网页都可以通过这个命名空间存储对象来进行读和写</span></span><br><span class="line">globalStorage[<span class="string">&#x27;&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意：globalStorage对象已经被localStorage对象取代。</span></span><br></pre></td></tr></table></figure><h2 id="localStorage对象">localStorage对象</h2><ul><li><p>localStorage的优势：</p><ol><li>localStorage拓展了cookie的4k限制。</li><li>localStorage可用将第一次请求的数据直接存储到本地，相当于5M大小的针对于前端页面的数据库，相比于cookie可用节约带宽，但是只有在高版本浏览器中才支持。</li></ol></li><li><p>localStorage的局限：</p><ol><li>只有在IE8以上浏览器才支持localStorage的存储功能。</li><li>目前所有浏览器都会把localStorage的值类型限定为string，这需要我们转换为JSON对象类型。</li><li>localStorage在浏览器的隐私模式下不可读取。</li><li>由于localStorage在本质上是对字符串的读取，所以如果存储的内容较多，会消耗掉内存空间，导致页面卡顿，加载速度减慢。</li><li>localStorage不能被爬虫抓取到。</li></ol></li></ul><blockquote><p>localStorage对象的具体方法与sessionStorage的方法一致。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> JavaScript高级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> js高级 </tag>
            
            <tag> cookie </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript高级⑤-高级函数</title>
      <link href="post/a1736a1e.html"/>
      <url>post/a1736a1e.html</url>
      
        <content type="html"><![CDATA[<h2 id="安全的类型检测">安全的类型检测</h2><blockquote><p><code>在JS中，内置的类型检测机制有typeof和instanceof</code>，但是这两个关键字<code>并非完全可靠</code>。所以我们可以使用<code>Object的toString()方法</code>以保证返回一个<code>[object XXX]</code>格式的字符串。这样就可以创建一个函数来判断对象的类型。</p></blockquote><h2 id="作用域安全的构造函数">作用域安全的构造函数</h2><ul><li>创建一个作用域安全的构造函数，就是让this对象指向正确的实例对象。</li><li>首先使用<code>instanceof</code>方法判断this对象是否为正确类型的实例，如果不是，就创建一个新的实例并返回。</li></ul><h2 id="惰性载入函数">惰性载入函数</h2><p><strong>惰性载入函数表示函数执行的分支仅会发生一次，实现惰性载入函数的方式有两种。</strong><br>1. 第一种，在函数被调用时再处理。在第一次调用时，该函数会覆盖为另一个按合适方式执行的函数，这样任何对函数的调用都不会再经过执行的分支了。<br>2. 第二种，在声明函数时就制定适当的函数。这样在第一次调用函数时就不会损失性能，而在代码首次加载时会损失一点儿性能。</p><h2 id="函数绑定">函数绑定</h2><blockquote><p>JS与DOM交互中经常需要使用函数绑定，定义一个函数然后将其绑定到特定DOM元素或集合的某个事件触发程序上，也经常与事件处理程序一起使用，以便把函数作为变量传递的同时保留代码执行环境。</p></blockquote><h2 id="重复的定时器">重复的定时器</h2><p><strong>我们通常使用<code>setInterval</code>方式来实现时间间隔会出现两个问题：</strong><br>1. 某些间隔会被跳过。<br>2. 多个定时器的代码执行时，间隔可能会有误差。<br><strong>所以我们可以使用<code>setTimeout</code>方式来完善该功能。</strong></p><h2 id="函数节流">函数节流</h2><ul><li>定时器不仅可以用来定时，还可以用来缓解浏览器的压力。浏览器在执行DOM操作的时候，就会使用更多的内存和CPU。连续使用过多的DOM操作会导致浏览器崩溃。</li><li>函数节流的基本思想就是，某些代码不可以在没有间断的情况下连续重复使用。也就是说，第一次调用函数就创建一个定时器，在指定的时间间隔之后才能再次运行。当第二次调用该函数时，就会清除前一次的定时器并设置一个。目的就是为了保证每次执行函数时有一段时间的间隔。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> JavaScript高级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> js高级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript高级④-AJAX与JSON</title>
      <link href="post/faefd80d.html"/>
      <url>post/faefd80d.html</url>
      
        <content type="html"><![CDATA[<h2 id="AJAX介绍和创建XHR对象">AJAX介绍和创建XHR对象</h2><blockquote><p>AJAX:异步 JavaScript 和 XML。简短地说，在不重载整个网页的情况下，AJAX通过后台加载数据，并在网页上进行显示。</p></blockquote><p><strong>AJAX包括以下几个步骤：</strong></p><ol><li>创建AJAX对象；</li><li>发出HTTP请求；</li><li>接收服务器传回的数据；</li><li>更新页面数据；</li></ol><ul><li><strong>Ajax的工作原理如图所示：</strong><br><img src= "/img/loading.gif" data-lazy-src="https://gitee.com/usocute/gallery/raw/master/img/miraitowa-javascript-AJAX-JSON-img1.png" alt="AJAX"></li></ul><blockquote><p>总结：</p></blockquote><ul><li>AJAX通过原生的XMLHttpRequest对象发出HTTP请求，得到服务器返回的数据后再进行处理。</li><li><code>AJAX技术的核心就是XMLHttpRequest对象</code>（简称：XHR），这是微软首次引入的一个特性，其他浏览器厂商后来都提供了相同的实现。</li><li>IE5中的XHR对象是通过ActiveX对象实现的，而IE7+及其他标准浏览器都支持原生的XHR对象。</li><li>创建一个XHR对象，也叫做实例化一个XHR对象，因为XMLHttpRequest()是一个构造函数。</li></ul><h2 id="XHR的用法介绍">XHR的用法介绍</h2><ol><li><code>open()</code>方法：设置:  HTTP方法和要获取资源的URL;</li><li><code>send()</code>方法：发送请求：</li><li><code>onload</code>属性：设置:  成功获取数据后将要运行的函数;</li><li><code>onerror</code>属性：设置:  出现错误后将要运行的函数;</li><li><code>responseText</code>属性：设置:  存储异步请求响应的文本;</li></ol><h2 id="HTTP头部信息">HTTP头部信息</h2><blockquote><p>请求头用于说明是谁或什么在发送请求、请求源于何处，或者客户端的喜好及能力。服务器可以根据请求头部给出的客户端信息，试着为客户端提供更好的响应。XHR对象也提供了操作这两种头部信息（请求头和响应头）的方法。</p></blockquote><ol><li><code>Accep</code>t：告诉WEB服务器自己接受什么介质类型，<em>/</em> 表示任何类型，type/* 表示该类型下的所有子类型，type/sub-type。</li><li><code>Accept-Charset</code>：浏览器告诉服务器自己能接收的字符集。</li><li><code>Accept-Encoding</code>：浏览器申明自己接收的编码方法，通常指定压缩方法，是否支持压缩，支持什么压缩方法（gzip，deflate）。</li><li><code>Accept-Language</code>：浏览器申明自己接收的语言。语言跟字符集的区别：中文是语言，中文有多种字符集，比如big5，gb2312，gbk等等。</li><li><code>Cache-Control</code>：指定请求和响应遵循的缓存机制。</li><li><code>Connection</code>：表示是否需要持久连接。如果Servlet看到这里的值为“Keep-Alive”，或者看到请求使用的是HTTP 1.1，它就表示持久连接。</li><li><code>Cookie</code>：当前域名下的Cookie。</li><li><code>Referer</code>： 浏览器向WEB 服务器表明自己是从哪个网页URL获得点击当前请求中的网址/URL。</li><li><code>User-Agent</code>：浏览器表明自己的身份（是哪种浏览器）。例如：User-Agent：Mozilla/5.0</li></ol><h2 id="GET与POST请求">GET与POST请求</h2><ol><li>由于<code>GET方式</code>在发送数据时是将参数拼接在URL上，<code>传输数据会受到URL长度的限制</code>，不同浏览器的长度限制不一样，所以<code>GET方式会受到参数大小的限制</code>，但是<code>POST方式没有参数大小的限制</code>。</li><li>因为GET方式会将请求参数显示在地址栏上，而POST方式不会，所以<code>POST方式相对来讲更安全</code>。</li><li><code>GET方式有缓存，而POST方式没有缓存</code>。</li></ol><h2 id="JavaScript中的跨域请求">JavaScript中的跨域请求</h2><ul><li>受JS同源策略的影响，当在某一域名下请求其他域名，或在同一域名下请求不同端口的URL时，就会变成不被允许的跨域请求。127.0.0.1:8020</li></ul><h2 id="了解XDomainRequest对象">了解XDomainRequest对象</h2><blockquote><p><code>XDomainRequest表示JavaScript和Ajax的跨域请求，在IE8+可以使用</code>。<br>XDomainRequest包含以下几个部分：</p></blockquote><ol><li>事件<ol><li><code>onload</code>事件：请求成功并返回对象时，被触发。</li><li><code>onerror</code>事件：当跨域请求发生错误时，被触发。</li><li><code>onprogress</code>事件：浏览器开始从服务器端接收数据时，被触发。</li><li><code>ontimeout</code>事件：出现超时情况，被触发。</li></ol></li><li>方法<ol><li><code>abort</code>方法：终止等待send</li><li><code>open(XDomainRequest)</code>方法：建立与服务器的链接</li><li><code>send(XDomainRequest)</code>方法：传输一个字符串数据给服务器处理</li></ol></li><li>属性<ol><li><code>constructor</code>属性：返回一个对象的构造函数的引用</li><li><code>contentType</code>属性：返回html请求或返回头部的content-type属性</li><li><code>responseText</code>属性：以字符串形式返回请求的body内容</li><li><code>timeout</code>属性：超时后返回的值。</li></ol></li></ol><h2 id="JSON数据">JSON数据</h2><blockquote><p><code>JSON(JavaScript Object Notation</code>, JS 对象简谱) 是一种轻量级的数据交换格式。它基于 <code>ECMAScript</code> (欧洲计算机协会制定的js规范)的一个子集，采用完全独立于编程语言的文本格式来存储和表示数据。简洁和清晰的层次结构使得 JSON 成为理想的数据交换语言。 易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。</p></blockquote><p><strong>Json的语法可以表示成三种类型的值：</strong><br>1. 简单值：可以在Json中表示字符串、数值、布尔值和null，但是<code>不支持undefined</code>;<br>2. 对象：作为一种复杂数据结构，表示一种无序的键值对，每个键值对中的值既可以是简单值，也可以是复杂数据类型的值。<br>3. 数组：作为一种复杂数据结构，表示一种有序值的列表，可以通过数组索引访问其中的值。数组中的元素可以是任何类型：简单值、对象、数组均可。<br><strong>如：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">a</span>: <span class="string">&#x27;Hello&#x27;</span>, <span class="attr">b</span>: <span class="string">&#x27;World&#x27;</span>&#125;; </span><br><span class="line"><span class="comment">//这是一个对象，注意键名也是可以使用引号包裹的</span></span><br><span class="line"><span class="keyword">var</span> json = <span class="string">&#x27;&#123;&quot;a&quot;: &quot;Hello&quot;, &quot;b&quot;: &quot;World&quot;&#125;&#x27;</span>;</span><br><span class="line"> <span class="comment">//这是一个 JSON 字符串，本质是一个字符串</span></span><br></pre></td></tr></table></figure><h2 id="在Ajax中使用JSON数据">在Ajax中使用JSON数据</h2><ol><li><code>JSON.parse()</code>：把Json格式的字符串转换为Json对象。</li><li><code>JSON.stringify()</code>:把Json对象转换为Json格式的字符串。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> JavaScript高级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> js高级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript高级③-匿名函数及函数操作</title>
      <link href="post/bd399257.html"/>
      <url>post/bd399257.html</url>
      
        <content type="html"><![CDATA[<h2 id="匿名函数">匿名函数</h2><h3 id="工厂模式">工厂模式</h3><blockquote><p>假如我们把猫看成是一类，都有名字和颜色的属性，那么，每一只猫就是这个类的实例，我们可以使用字面量方式定义对象：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cat1 = &#123;</span><br><span class="line">  name:<span class="string">&quot;大黄&quot;</span>,</span><br><span class="line">  color:<span class="string">&quot;黄色&quot;</span>,</span><br><span class="line">  say:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">&quot;miao&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cat2 = &#123;</span><br><span class="line">  name:<span class="string">&quot;小黑&quot;</span>,</span><br><span class="line">  color:<span class="string">&quot;黑色&quot;</span>,</span><br><span class="line">  say:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">&quot;miao&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>这样创建对象，一是创建对象比较麻烦，二是实例与原型（猫类）之间，没有任何联系。</li><li>为了简化代码书写，我们可以写一个函数批量创建对象，也就是使用<code>“工厂模式”</code>：<br><strong>（工厂模式中的函数，首字母大写）：</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params">n,c</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        name:n,</span><br><span class="line">        color:c,</span><br><span class="line">        say:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">          alert(<span class="string">&quot;miao&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>生成实例对象，就等于是在调用函数</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cat1 = Cat(<span class="string">&quot;大黄&quot;</span>,<span class="string">&quot;黄色&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> cat2 = Cat(<span class="string">&quot;小黑&quot;</span>,<span class="string">&quot;黑色&quot;</span>);</span><br></pre></td></tr></table></figure><blockquote><p>这样代码虽然简单了，但是实例之间还是没有什么联系。</p></blockquote><h3 id="构造函数">构造函数</h3><ul><li>为了解决从原型对象生成实例的问题，Javascript提供了一个构造函数（Constructor）模式。</li><li>所谓&quot;构造函数&quot;，其实就是一个普通函数，但是内部使用了this变量。对构造函数使用new运算符，就能生成实例，并且this变量会绑定在实例对象上。</li><li>构造函数首字母大写，没有return语句，没有显式地创建对象。</li><li>构造函数中的this，指向的是实例化的对象<br><strong>例如：</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params">n,c</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name=n;</span><br><span class="line">  <span class="built_in">this</span>.color=c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>生成实例对象</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cat1 = <span class="keyword">new</span> Cat(<span class="string">&quot;大黄&quot;</span>,<span class="string">&quot;黄色&quot;</span>)</span><br><span class="line"><span class="keyword">var</span> cat2 = <span class="keyword">new</span> Cat(<span class="string">&quot;小黑&quot;</span>,<span class="string">&quot;黑色&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>这时cat1和cat2会自动含有一个constructor属性，指向它们的构造函数。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alert(cat1.constructor == Cat); <span class="comment">//true</span></span><br><span class="line">alert(cat2.constructor == Cat); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><ul><li>Javascript还提供了一个instanceof运算符，验证原型对象与实例对象之间的关系。</li><li>instanceof不认为基本类型值的变量是对象。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> txt=<span class="string">&#x27;adsdf&#x27;</span>;</span><br><span class="line">alert(txt <span class="keyword">instanceof</span> <span class="built_in">String</span>);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> age=<span class="number">123123</span>;</span><br><span class="line">alert(age <span class="keyword">instanceof</span> <span class="built_in">Number</span>);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> re=<span class="regexp">/\d/</span>;</span><br><span class="line">alert(re <span class="keyword">instanceof</span> <span class="built_in">RegExp</span>);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr=[];</span><br><span class="line">alert(arr <span class="keyword">instanceof</span> <span class="built_in">Array</span>)<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h3 id="原型模式和原型链">原型模式和原型链</h3><ul><li>每类对象的实例对象，都有可能会有一些相同的属性，或者相同的功能，如果都写在构造函数上，会造成重复的内容，占用更多的内存。</li><li>为了解决这种代码的重复</li><li>构造函数都有一个prototype属性，指向另一个对象。这个对象的所有属性和方法，都会被构造函数的实例继承。</li><li>我们可以把那些不变的属性和方法，直接定义在prototype对象上。让实例对象共享其属性和方法。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Cat.protoType.say = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  alert(<span class="string">&quot;miao&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">cat1.say()<span class="comment">//miao</span></span><br><span class="line">cat2.say()<span class="comment">//miao</span></span><br></pre></td></tr></table></figure><ul><li>所有的函数都是 Function 的实例。在构造函数上都有一个原型属性—prototype，prototype也是一个对象；这个对象上有一个 constructor 属性，该属性指向的就是构造函数。</li><li>而实例对象上有一个_proto_属性，该属性也指向原型对象，该属性不是标准属性，不可以用在编程中，该属性用于浏览器内部使用。</li></ul><h3 id="组合使用构造函数模式和原型模式">组合使用构造函数模式和原型模式</h3><ol><li><p>构造函数与原型模式组合的模式是目前使用最广泛、认同度最高的一种创建定义类型的方法。构造函数模式用于定义实例属性，原型模式用于定义方法和共享的属性。</p></li><li><p>每个实例都会有自己的一份实例属性的副本，同时共享着对方法的引用，最大限度节省内存。同时，这种组合模式还支持向构造函数传递参数，集合了两种模式的优点。</p></li></ol><h3 id="动态原型模式">动态原型模式</h3><ul><li>动态原型模式就是把所有信息都封装在构造函数中，通过检查某个应该存在的方法是否有效，来决定是否需要初始化原型。</li></ul><h3 id="寄生构造函数模式">寄生构造函数模式</h3><ul><li>寄生构造函数模式的基本思想，是创建一个用于封装创建对象的函数。主要用于创建一个自定义类型的函数。</li></ul><h3 id="稳妥构造函数模式">稳妥构造函数模式</h3><ul><li>稳妥对象，指的是没有公共属性，而且其方法也不引用this的对象。适合在一些安全的环境中（禁用this和new的环境），或者防止数据被其他应用程序调用时使用。</li><li>稳妥构造函数遵循与寄生构造函数类似的模式，只是有两点不同：<ol><li>新创建对象的实例方法不引用this；</li><li>不使用new调用构造函数。</li></ol></li></ul><h3 id="原型链">原型链</h3><ul><li>原型链可以简单理解为原型组成的链，对象的_proto_就是其原型，而原型也是一个对象，也有_proto_属性。原型的_proto_又是原型的原型，这样可以一直向上找，直到找到Object的原型，就是这条原型链的顶端。</li></ul><h3 id="借用构造函数，也称伪造对象或经典继承">借用构造函数，也称伪造对象或经典继承</h3><ul><li><p>借用构造函数实现继承的基本思想是：在子类的构造函数中调用超类的构造函数。该函数可以通过apply()方法和call()方法在新创建的对象中执行构造函数。</p><blockquote><ul><li>优点：相对于原型链而言，借用构造函数可以在子类构造函数中向超类构造函数传递数据。</li><li>缺点：构造函数的方法都在构造函数中定义，因此无法实现函数复用。另外，子类无法看见在超类中定义的方法，导致所有类型只能使用构造函数模式。</li></ul></blockquote></li></ul><h3 id="组合继承">组合继承</h3><ul><li>组合继承，又称为伪经典继承。指：将原型链和借用构造函数的技术组合在一起，从而发挥两者长处的一种继承模式。<blockquote><p>其思想是：使用原型链实现对原型属性和方法的继承，通过借用构造函数来实现对实例属性的继承。这样，我们就可以实现通过在原型上定义方法进而实现函数复用，又能保证每个实例都有自己的属性，解决原型链中存在的引用类型属性共享问题。</p></blockquote></li></ul><h3 id="原型式继承">原型式继承</h3><ul><li>原型式继承，即：一个构造方法，通过原型链的方式继承另一个构造函数。</li></ul><h3 id="寄生式继承">寄生式继承</h3><ul><li>寄生式继承，即：创建一个仅用于封装继承过程的函数，该函数在内部以某种方式来增强对象，最后返回该对象。</li></ul><h3 id="寄生组合式继承">寄生组合式继承</h3><ul><li>寄生组合式继承是JS最常用的继承模式，其最大的问题就是无论在什么情况下，都会调用两次构造函数：一次是在创建子类原型时，另一次是在子类构造函数内部。</li></ul><h2 id="函数操作">函数操作</h2><h3 id="函数表达式">函数表达式</h3><blockquote><p>使用函数表达式创建的函数，必须先赋值再调用。（即：只有函数声明式才有函数提升，函数表达式没有函数提升。）</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fn2(); <span class="comment">// 不能在函数之前调用。</span></span><br><span class="line"><span class="keyword">var</span> fn2 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;2.演示函数表达式&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">fn2(); <span class="comment">// 只能在函数之前调用。</span></span><br></pre></td></tr></table></figure><p><strong>虽然函数表达式没有函数提升，但是它也有自己的一些优点。</strong></p><h2 id="递归函数">递归函数</h2><ul><li><p>递归函数，就是在函数体内调用本函数。最简单的例子就是计算阶乘： 1<em>2</em>3…。</p></li><li><p>递归的缺点：如果递归函数的终止条件不明确甚至缺失，会导致该函数长时间运行，使用户界面处于假死状态。另外，当递归使用太多甚至超过最大调用栈内存容量时，浏览器会报错。</p></li></ul><h3 id="闭包">闭包</h3><ul><li>闭包，是指有权访问另外一个函数作用域中的变量的函数。创建闭包的常见方式就是在一个函数内部创建另一个函数。</li><li>JS中，一般为了给某个函数声明一些只有该函数才能使用的局部变量时就会使用闭包，这样可以减少全局作用域中的变量，净化全局作用域。但是闭包会占用更多的内存。</li></ul><h2 id="模仿块级作用域">模仿块级作用域</h2><ul><li><strong>JS中没有块级作用域，我们可以进行模仿块级作用域。</strong></li></ul><blockquote><p>使用方式：<br>简单来讲，就是定义并立即调用一个匿名函数。<br>具体步骤，就是将匿名函数声明（函数表达式）在一对圆括号中，而紧随其后的一对圆括号会立即调用该函数。</p></blockquote><h3 id="私有变量">私有变量</h3><ul><li>严格来讲，JS中没有私有成员的概念，所有对象属性都是公开的。</li><li>但是，任何在函数中定义的变量都可以认为是私有变量，因为不能在函数外部访问。</li><li>私有变量包括函数参数，局部变量以及在函数内部定义的其他函数。</li><li>闭包函数可以持有这些私有变量，并在外部访问。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> JavaScript高级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> js高级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript高级②-面向对象的程序设计</title>
      <link href="post/fec01c07.html"/>
      <url>post/fec01c07.html</url>
      
        <content type="html"><![CDATA[<p><strong><code>JavaScript是基于对象编程的</code>，<code>面向对象是一种编程思想</code>。</strong></p><h2 id="类和对象">类和对象</h2><ol><li>类：我们善于将事物进行分类，类是一个抽象的概念。</li><li>对象：具体的事物。<ul><li>猫是一类</li><li>楼下的大黄  —&gt;  对象</li></ul></li><li>类是对象的抽象，对象是类的具体事例。</li><li>类不占用内存，对象占用内存空间。</li></ol><h2 id="Object类型">Object类型</h2><ul><li>Object对象，是所有JavaScript对象的超类（基类）。</li><li>Object.prototype（Object的原型）定义了JS对象的基本方法和属性。</li></ul><h3 id="声明对象-Object变量定义-两种方法">声明对象(Object变量定义) 两种方法</h3><ul><li>字面量声明 var obj = {};</li><li>new运算符 var obj = new Object();</li></ul><h3 id="对象类型的判断">对象类型的判断</h3><ul><li><code>console.log(typeof  obj);</code></li></ul><h3 id="添加对象属性的方法">添加对象属性的方法</h3><ol><li>语法 ：<a href="http://obj.id">obj.id</a> = “abc”;</li><li>[ ]方括号语法：  obj[“id”]= “abc”;</li></ol><h3 id="删除对象属性的方法">删除对象属性的方法</h3><ul><li>delete <a href="http://obj.id">obj.id</a>;</li><li>delete obj[“id”];</li></ul><h3 id="遍历对象">遍历对象</h3><ul><li>for in 循环</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  name:<span class="string">&quot;zhangsan&quot;</span>,</span><br><span class="line">  age:<span class="number">20</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> obj)&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key,obj[key])</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//name zhangsan</span></span><br><span class="line"><span class="comment">//age 20</span></span><br></pre></td></tr></table></figure><h3 id="检测对象有没有某个属性">检测对象有没有某个属性</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="string">&quot;name&quot;</span> <span class="keyword">in</span> obj)         （判断有）</span><br><span class="line"><span class="keyword">if</span> (obj.name === <span class="literal">undefined</span>)（判断没有）</span><br></pre></td></tr></table></figure><h2 id="Function类型">Function类型</h2><blockquote><p>Function类型是JS中的引用类型之一，每个函数实际上都是Function类型的实例对象，具有自己的属性和方法。正因为函数式对象，所以函数名实际上也是一个指向函数对象的指针。</p></blockquote><h3 id="函数的定义方式">函数的定义方式</h3><ol><li>使用function关键字定义函数：（函数声明式）</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>通过变量声明（表达式）定义函数：（函数表达式）</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数的调用">函数的调用</h3><ol><li>通过函数名调用： <code>sum()</code>;</li><li>事件绑定调用：   <code>obj.onclick = sum</code>;<br><strong>注意：函数名仅仅保存指向函数对象的指针，隐藏函数名与包含对象指针的其他变量一样。也就是说，一个函数对象可以有多个名字。</strong></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">如：<span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log( sum(<span class="number">5</span>,<span class="number">10</span>) );   <span class="comment">// 15</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 变量sum2也指向了同一个函数对象   </span></span><br><span class="line"><span class="keyword">var</span> sum2 = sum;<span class="comment">// sum后面不加括号，不传参数。</span></span><br><span class="line"><span class="built_in">console</span>.log( sum2(<span class="number">3</span>,<span class="number">5</span>) );   <span class="comment">// 8</span></span><br><span class="line"></span><br><span class="line">sum = <span class="literal">null</span>;<span class="comment">// sum对象不再保存函数对象的指针了</span></span><br><span class="line"><span class="built_in">console</span>.log( sum2(<span class="number">3</span>,<span class="number">5</span>) );   <span class="comment">// sum2这个变量仍能继续使用</span></span><br></pre></td></tr></table></figure><h2 id="函数的重载">函数的重载</h2><blockquote><p>所谓重载，就是一组相同的函数名，有不同个数的参数，在使用时调用一个函数名，传入不同参数，根据你的参数个数，来决定使用不同的函数！但是JS中是没有重载的，因为后定义的函数会覆盖前面的同名函数。<br><strong>在JS中，我们实现重载的常用方式有：</strong></p></blockquote><ol><li>根据传入参数的不同类型进行重载；</li><li>利用参数中特殊的参数值进行重载；</li><li>根据参数的个数进行重载（最简单的方式：switch case 用法）</li></ol><h2 id="函数声明式，函数表达式与函数提升">函数声明式，函数表达式与函数提升</h2><ol><li><p>JS中的声明函数的方法有两种：函数声明式和函数表达式。</p><blockquote><p><strong>两者区别如下：</strong></p></blockquote><blockquote><ol><li><code>函数声明式必须要有函数名</code>，而函数表达式的<code>函数名</code>是<code>可选</code>的。</li><li>以<code>函数声明式</code>定义的函数<code>可以在其声明之前被调用</code>，而以<code>函数表达式</code>声明的函数<code>只能在其后被调用</code>。</li><li>以<code>函数声明式</code>定义的函数<code>仅仅可以出现在全局中，或者嵌套在其他函数中</code>，<code>不能出现在循环语句</code>，条件语句和try/catch/finally中；而<code>函数表达式可以在任何地方声明</code>。</li></ol></blockquote></li><li><p>函数提升</p><blockquote><p>函数提升，即：自动把函数的作用范围提升到全局中。而<code>只有函数声明式才存在函数提升</code>。</p></blockquote></li></ol><h2 id="函数内部属性：arguments-this">函数内部属性：arguments, this</h2><ol><li><code>arguments</code>：用来存放传输参数的数组，可以被调用多次，每次数组都不一样。</li><li><code>this</code>：<code>谁调用函数，谁就是this</code>。进行方法调用的时候函数前面是有window的，只是通常会省略掉。</li></ol><h2 id="函数的属性和方法">函数的属性和方法</h2><ol><li><p><code>length</code>属性</p><blockquote><p>arguments对象的length属性表示实参个数，函数的length属性则表示形参个数。</p></blockquote></li><li><p><code>name</code>属性：访问到给定函数指定的名字，即：跟在function关键字后的标识符。<code>匿名函数的name属性为空</code>。</p></li><li><p><code>prototype</code>属性：是每个函数都有的属性，该属性指向一个对象的引用，这个对象称作<code>原型对象（prototype object）</code>。每一个函数都包含不同的原型对象。将函数用做构造函数时，新创建的对象会从原型对象中继承属性。</p></li><li><p><code>apply()</code>方法和<code>call()</code>方法：是每个函数都有的方法，等同于函数体内this对象的值。（后面讲解）</p></li></ol><h2 id="基本包装类型">基本包装类型</h2><blockquote><p>为了便于操作基本类型的值，ECMAScript提供了3种特殊的引用类型：<code>Boolean</code>, <code>Number</code>, <code>String</code>。他们与其他引用类型的使用方法相似，同时也具有各自的基本类型的属性。实际上，每当读取一个基本类型的值，后台就会创建一个对应的基本包装类型的对象，从而可以调用对应的方法。</p></blockquote><ol><li><code>Boolean</code>类型：没有特定的属性和方法。</li><li><code>Number</code>类型：有静态属性，可以直接调用里面的属性和方法，<code>无需new出来</code>。</li><li><code>String</code>类型：包含String对象属性，字符串方法，字符串操作方法，字符串位置方法等。</li></ol><h2 id="JS内置对象介绍">JS内置对象介绍</h2><ol><li>String对象：字符串对象</li><li>Array对象：数组对象</li><li>Date对象：日期时间对象</li><li>Boolean对象：布尔对象</li><li>Number对象：数值对象</li><li>Math对象：数学对象</li><li>RegExp对象：正则对象</li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> JavaScript高级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> js高级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript高级①-变量、作用域和内存</title>
      <link href="post/4f09663b.html"/>
      <url>post/4f09663b.html</url>
      
        <content type="html"><![CDATA[<h2 id="掌握基本类型和引用类型的值">掌握基本类型和引用类型的值</h2><ol><li>ECMAScript的数据类型包括两种：基本数据类型和引用数据类型。</li><li>基本数据类型指的是简单的数据段，常见的基本数据类型有： number, string, boolean, null, undefined。</li><li>引用数据类型指的是由多个值构成的对象，常见的引用数据类型（即：对象类型Object type）有： Object, Array, Function, Date等。</li><li>当我们对变量赋值时，解析器首先要确认的就是这个值是基本类型值，还是引用类型值。</li><li>两种数据类型的区别点如下：<ul><li>声明变量时不同的内存分配。基本类型的值保存在栈内存中，引用类型的值同时保存在栈内存和堆内存中。</li><li>不同的内存分配机制也带来了不同的访问机制。</li><li>赋值变量时的不同。不能给基本类型的值添加属性。</li><li>参数传递的不同（把实参赋值给形参的过程）。</li></ul></li><li>值的比较：<ul><li>基本类型的比较是值的比较；</li><li>引用类型的比较是引用的比较；</li></ul></li></ol><h2 id="执行环境及作用域">执行环境及作用域</h2><ol><li><p>执行环境介绍</p><blockquote><p>执行环境是JavaScript中最重要的一个概念。执行函数定义了变量或函数有权访问的其他数据，决定了他们各自的行为。每个执行环境都有一个与之关联的变量对象(variable object)和一个作用域链(scope chain)，环境中定义的所有变量和函数都保存在其变量对象中。<code>执行环境分为两种，即：全局执行环境和函数执行环境</code>。</p></blockquote></li><li><p>全局执行环境</p><blockquote><p>全局执行环境是最外围的一个执行环境，其变量对象就是全局活动对象(window activation object)，全局执行环境直到应用程序退出（例如：关闭网页或浏览器）时才会被销毁。</p></blockquote></li><li><p>函数执行环境</p><blockquote><p>每个函数都有自己的执行环境。当执行流进入一个函数时，函数环境就会被推入一个环境栈中。当函数执行完之后，栈将该执行环境弹出，把控制权返回给之前的执行环境。函数执行环境的变量对象是该函数的活动对象(activation object)。</p></blockquote></li><li><p>作用域链</p><blockquote><p>对于每一个执行环境，都会创建一个与之关联的作用域链。每个执行环境的作用域链的前端，始终都是该执行环境的变量对象，对于全局执行环境就相当于window对象，对于函数执行环境就相当于该函数的活动对象；对于全局执行环境，已经是根部，没有后续；对于函数执行环境，其作用域链的后续就是该函数对象的[scope]属性里的作用域链。</p></blockquote></li></ol><h2 id="垃圾收集">垃圾收集</h2><blockquote><p>JavaScript具有自动垃圾收集机制，也就是说，执行环境会负责管理代码执行过程中使用的内存。<br>这种垃圾收集机制的原理其实很简单：找出那些不再继续使用的变量，然后释放其占用的内存。</p></blockquote><ol><li><p>标记清除：</p><ul><li><code>JavaScript中最常用的垃圾收集方式是标记清除</code>。</li><li>垃圾收集器会在运行的时候给存储在内存中的所有变量都加上标记，然后去掉环境中的变量以及被环境中的变量引用的变量的标记。</li><li>在此之后再被加上标记的变量将被视为准备删除的变量，原因是环境中的变量已经无法访问到这些变量了。</li><li>最后垃圾收集器完成内存清除的工作，销毁那些带标记的值并回收它们所占用的空间。</li></ul></li><li><p>引用计数：</p><ul><li>引用计数是不太常见的垃圾收集策略。</li><li>引用计数的含义是跟踪记录每个值被引用的次数。</li><li>当声明了一个变量并将一个引用类型值赋给该变量时，则这个值的引用次数就是1，如果该值同时赋给另一个变量，则该值引用次数加1。相反，如果包含对这个值引用的变量又取了另一个值，则该值引用次数减1。</li><li>当这个值引用次数变成0时就说明没有办法再访问该值了，可将其占用的内存空间回收。</li><li>当垃圾收集器下次运行时，就会释放那些引用次数为0的值所占用的内存。</li></ul></li></ol><p><strong>另外，垃圾收集处理方式除了以上两种策略，还可以进行<code>垃圾周期处理</code>和<code>解除引用</code>。</strong></p><ul><li>垃圾周期处理：找出那些不再继续使用的变量，然后释放其占用的内存，垃圾收集器会按照固定的时间间隔周期性地执行这一操作。</li><li>解除引用：对于全局变量，当不再使用时，使用null赋值是一个良好的习惯。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> JavaScript高级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> js高级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript基础④-文档对象模型(BOM)</title>
      <link href="post/5aafef3c.html"/>
      <url>post/5aafef3c.html</url>
      
        <content type="html"><![CDATA[<h2 id="DOM介绍">DOM介绍</h2><blockquote><p>DOM（document object model ）文档对象模型，定义了表示和修改文档所需的对象、行为和属性，以及这些对象之间的关系。它是一个能让程序和脚本动态访问和更新内容，结构和样式的语言平台。</p></blockquote><h2 id="DOM中的常用属性">DOM中的常用属性</h2><ol><li>title:设置或返回当前页面的标题。</li><li>body:提供对body元素的直接访问。</li><li>cookie:设置或返回与当前文档有关的的所有cookie。</li><li>domain:返回当前文档的域名。</li><li>referrer:返回载入当前文档的URL。</li><li>URL:返回当前文档的URL。</li></ol><h2 id="DOM中的常用方法">DOM中的常用方法</h2><ol><li>scrollLeft: 页面在水平方向上的滚动距离</li><li>scrollTop: 页面在垂直方向上的滚动距离</li><li>clientWidth: 页面可见区域的宽度</li><li>clientHeight: 页面可见区域的高度</li></ol><h2 id="DOM中的innerText、innerHTML、style属性">DOM中的innerText、innerHTML、style属性</h2><ol><li>innerText: 获取或设置指定的页面元素内容</li><li>innerHTML: 获取或设置指定的页面元素内容（含有html标签）</li><li>style: 获取或设置样式</li></ol><h2 id="DOM中表单对象的常用方法">DOM中表单对象的常用方法</h2><ul><li>reset():重置</li><li>submit():提交表单</li></ul><h2 id="DOM中表单对象的常用属性">DOM中表单对象的常用属性</h2><ol><li>action:设置或返回表单的action属性(即：提交的路径)</li><li>enctype:设置或返回表单数据在发送到服务器之前的编码方式</li><li>id:设置或返回表单id</li><li>length:返回表单中的元素个数</li><li>method:设置或返回将数据发送到服务器的http方法</li><li>name:设置或返回表单name名称</li><li>target:设置或返回表单提交结果的frame或window名</li></ol><h2 id="DOM中表单对象集合-elements">DOM中表单对象集合: elements[]</h2><blockquote><p>elements[]:即一个数组，包含所有的表单元素</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> JavaScript基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> js基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript基础③-浏览器对象模型(DOM)</title>
      <link href="post/648a3caa.html"/>
      <url>post/648a3caa.html</url>
      
        <content type="html"><![CDATA[<h2 id="BOM概述">BOM概述</h2><ul><li>BOM（browser object model）浏览器对象模型**</li><li>BOM提供了独立于内容而与浏览器窗口进行交互的对象、载入页面的相关信息，其核心对象是window对象。</li><li>BOM 没有相关标准，每个浏览器都定义了自己的属性，并且，都有其自己对BOM的实现方式。</li><li>W3C虽然没有为BOM统一制定标准,但是其中的窗口对象、导航对象等,因功能趋同,实际上已经成为默认的标准。</li></ul><h2 id="BOM对象">BOM对象</h2><h3 id="window对象">window对象</h3><blockquote><p>window对象（宿主对象）表示一个浏览器窗口（或一个框架），所有浏览器的属性和方法，都被定义在window这个对象之上。 js通过window对象，就可以对浏览器进行操作（读取/修改浏览器属性、操作标签元素、响应用户事件等）。 window对象是全局对象，并且是唯一的，因此在使用中可以省略不写，例如：可以只写 document，而不必写 window.document。同样，可以把window对象的方法当作函数来使用，如只写 alert()，而不必写window.alert()。</p></blockquote><p><strong>window方法</strong></p><table><thead><tr><th style="text-align:left">window的方法</th><th style="text-align:left"><strong>说明</strong></th></tr></thead><tbody><tr><td style="text-align:left">alert()</td><td style="text-align:left">提示框</td></tr><tr><td style="text-align:left">confirm()</td><td style="text-align:left">带有确认 取消 按钮的提示框(返回true或false)</td></tr><tr><td style="text-align:left">prompt()</td><td style="text-align:left">带有可输入内容的文本域 的提示框</td></tr><tr><td style="text-align:left">setInterval()</td><td style="text-align:left">间隔定时器，可按照指定的周期（以毫秒计）来调用函数或计算表达式</td></tr><tr><td style="text-align:left">clearInterval()</td><td style="text-align:left">清除间隔定时器</td></tr><tr><td style="text-align:left">setTimeout()</td><td style="text-align:left">超时定时器，在指定的毫秒数后调用函数</td></tr><tr><td style="text-align:left">clearTimeout()</td><td style="text-align:left">清除超时定时器</td></tr><tr><td style="text-align:left">open()</td><td style="text-align:left">打开一个新的浏览器窗口</td></tr><tr><td style="text-align:left">close()</td><td style="text-align:left">关闭窗口</td></tr></tbody></table><h2 id="history-历史记录">history 历史记录</h2><h3 id="history的属性">history的属性</h3><ul><li>length:返回浏览器历史列表中URL的数量</li></ul><h3 id="histroy的方法">histroy的方法</h3><ol><li>window.history.go() 刷新</li><li>window.history.go(1) 前进（跳转）</li><li>window.history.go(-1) 后退（跳转）</li><li>window.history.forward() 前进</li><li>window.history.back() 后退</li></ol><h2 id="location-定位">location 定位</h2><ol><li><p>location的属性</p><ul><li>protocol: 当前的URL协议</li><li>hostname: 当前URL的主机名</li><li>port: 当前URL的端口号</li><li>host: 当前的URL主机名和端口号</li><li>pathname: 当前的URL的路径</li><li>hash:  以#开始的URL的锚（想要达到页面中的固定位置时使用）</li><li>search: 以？开始的URL拼接部分</li><li>href:  当前URL的完整路径</li></ul></li><li><p>location的方法</p><ul><li>assign()  加载新的文档（原始页面可以返回，仍然存在）</li><li>reload() 页面重载</li><li>replace()  用新文档替换当前文档（原始页面不可以返回，不存在)</li></ul></li></ol><h2 id="navigator-导航">navigator 导航</h2><blockquote><ol><li>window.navigator.userAgent 浏览器类型、版本、操作系统类型、浏览器引擎类型等信息<br>//返回浏览器的名称</li><li>navigator.appName<br>//返回浏览器的平台和版本信息</li><li>navigator.appVersion<br>//返回指明浏览器中是否启用 cookie 的布尔值</li><li>navigator.cookieEnabled<br>//返回运行浏览器的操作系统平台</li><li>navigator.platform</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> JavaScript基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> js基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript基础②-本地对象</title>
      <link href="post/49eef7dc.html"/>
      <url>post/49eef7dc.html</url>
      
        <content type="html"><![CDATA[<h2 id="Date对象的创建">Date对象的创建</h2><h3 id="获取当前日期及时间">获取当前日期及时间</h3><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 变量名 = <span class="keyword">new</span>  <span class="built_in">Date</span>();</span><br></pre></td></tr></table></figure></code></pre><h3 id="设置指定时间">设置指定时间</h3><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 变量名 = <span class="keyword">new</span>  <span class="built_in">Date</span>(年，月，日);</span><br><span class="line"><span class="keyword">var</span> 变量名 = <span class="keyword">new</span>  <span class="built_in">Date</span>(年，月，日，时，分，秒，毫秒);</span><br></pre></td></tr></table></figure></code></pre><h2 id="Date对象中的常用方法">Date对象中的常用方法</h2><ol><li><p>to方法组:(<code>转换</code>)</p><ul><li><code>toString()</code>把日期转换成字符串</li><li><code>toLocaleString()</code>把日期转换成本地时间(年月日时分秒)</li><li><code>toLocaleDateString()</code>把日期转换成本地时间(年月日)</li><li><code>toLocaleTimeString()</code>把日期转换成本地时间(时分秒)</li></ul></li><li><p>get方法组:(<code>获取</code>)</p><ul><li><code>getDate()</code>获取一个月的某一天日期(1-31)</li><li><code>getDay()</code>获取一周中的某一天(0-6)—(星期天是0)</li><li><code>getMonth()</code>获取月份(0-11)</li><li><code>getFullYear()</code>获取四位数字的年份</li><li><code>getHours()</code>获取小时数(0-23)</li><li><code>getMinutes()</code>获取分钟数(0-59)</li><li><code>getSeconds()</code>获取秒数(0-59)</li></ul></li><li><p>set方法组:(<code>设置</code>)</p><ul><li><code>setDate()</code>设置一个月的某一天日期(1-31)</li><li><code>setMonth()</code>设置月份(0-11)</li><li><code>setFullYear()</code>设置四位数字的年份</li><li><code>setHours()</code>设置小时数(0-23)</li><li><code>setDay</code>(这个真<code>没有!!!!</code>,<code>星期是通过设定日期自动计算的</code>)</li><li><code>setFullYear(year，month，day)</code><blockquote><ul><li><code>year</code>:<code>必需</code>表示年份的四位整数。</li><li><code>month</code>:<code>可选</code>,介于 <code>0 ~ 11</code> 之间。如果不填，取系统当月-1为去年的最后一个月,12为明年的第一个月,13为明年的第二个月。</li><li><code>day</code>:<code>可选</code>，表示月中某一天的数值。如果不填，取系统当日本地时间表示。介于 1 ~ 31 之间,0 为上个月最后一天,-1 为上个月最后一天之前的天数,如果当月有31天: 32 为下个月的第一天,如果当月有30天: 32 为下一个月的第二天。</li></ul></blockquote></li><li><code>setHours</code>(<code>hour</code>,<code>min</code>,<code>sec</code>,<code>millisec</code>)<blockquote><ul><li>可以有4个参数</li><li>hour:小时</li><li>min:分钟</li><li>sec:秒</li><li>millisec:毫秒</li></ul></blockquote></li></ul></li></ol><h2 id="字符串的常用方法">字符串的常用方法</h2><ol><li><p><code>length</code>: 获取字符串的长度</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;中华人民共和国&quot;</span>;</span><br><span class="line">alert( str.length);<span class="comment">// 7</span></span><br></pre></td></tr></table></figure></li><li><p><code>slice(start[,end])</code>截取字符串，<code>start</code>–开始索引 <code>end</code>–结束索引<br><strong>返回:包含开始位置，不包含结束位置(含头不含尾)</strong></p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;中华人民共和国&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> str1 = str.slice(<span class="number">2</span>,<span class="number">4</span>);<span class="comment">//人民</span></span><br></pre></td></tr></table></figure></li><li><p><code>substring(start [,end])</code>截取字符串，<code>start</code>:开始的索引位置,<code>end</code>: 结束的索引位置(不写到末尾)</p><p><strong>返回:包含开始位置，不包含结束位置(含头不含尾)</strong></p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;中华人民共和国&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> str1 = str.substr(<span class="number">2</span>,<span class="number">4</span>);<span class="comment">//人民</span></span><br></pre></td></tr></table></figure></li><li><p><code>substr(start[,length])</code>，<code>start</code>:开始的索引位置,取<code>length</code>个字符(不写到末尾)</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;中华人民共和国&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> str1 = str.substr(<span class="number">2</span>,<span class="number">5</span>);<span class="comment">//人民共和国</span></span><br></pre></td></tr></table></figure></li><li><p><code>split()</code>，按条件分割字符串，返回一个字符串数组</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;中华人民共和国&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> arr = str.split(<span class="string">&quot;&quot;</span>); <span class="comment">//[&quot;中&quot;, &quot;华&quot;, &quot;人&quot;, &quot;民&quot;, &quot;共&quot;, &quot;和&quot;,&quot;国&quot;]</span></span><br><span class="line"><span class="keyword">var</span> str1 = <span class="string">&quot;杏|石|口|路|81|号&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> arr1 = str1.split(<span class="string">&quot;|&quot;</span>); <span class="comment">//[&quot;杏&quot;, &quot;石&quot;, &quot;口&quot;, &quot;路&quot;, &quot;81&quot;, &quot;号&quot;]</span></span><br></pre></td></tr></table></figure></li><li><p><code>indexOf()</code>:在父串中首次出现的位置索引，从0开始！没有就返回-1</p></li><li><p><code>lastIndexOf()</code>:倒序查找</p></li><li><p><code>charAt(index)</code>:获取指定索引的字符</p></li><li><p><code>toLowerCase()</code>:转小写</p></li><li><p><code>toUpperCase()</code>:转大写</p></li></ol><h2 id="数组">数组</h2><blockquote><p>Array (数组)对象用于在单个的变量中存储多个值。数组可存放任意数据类型，并通过索引来访问每个元素。</p></blockquote><h3 id="数组的声明">数组的声明</h3><ol><li><p>先声明再赋值:</p><ul><li>声明方式1:var arr = new Array();  // 可根据需要在( )中指定长度</li><li>声明方式2:var arr = [];</li></ul><blockquote><p>赋值:数组名[索引] = 值;   // arr[0] = 10;</p></blockquote></li><li><p>直接声明并赋值</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(“值<span class="number">1</span>”,,,,,,“值N”);</span><br></pre></td></tr></table></figure></li></ol><h3 id="数组的长度-数组名-length">数组的长度:<code>数组名.length</code></h3><h3 id="数组的遍历方式">数组的遍历方式</h3><ol><li><p>循环遍历</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="built_in">document</span>.write(arr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>直接输出数组名</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.write(arr);</span><br></pre></td></tr></table></figure></li></ol><h3 id="数组的常用方法">数组的常用方法:</h3><ol><li><p><code>join()</code>: 用指定的元素对数组进行分割。</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>];</span><br><span class="line"><span class="built_in">document</span>.write(arr.join(“*”));  <span class="comment">// 10*20*30</span></span><br></pre></td></tr></table></figure></li><li><p><code>indexOf</code>:搜索一个指定的元素的位置，如未找到返回 -1；</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>,<span class="number">20</span>,<span class="string">&quot;30&quot;</span>,<span class="string">&quot;abc&quot;</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.indexOf(<span class="number">10</span>)); <span class="comment">//元素10的索引为0</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.indexOf(<span class="number">30</span>)); <span class="comment">//元素30未找到，返回-1</span></span><br><span class="line"><span class="comment">//注意:数字30和字符串&quot;30&quot;是不同元素</span></span><br></pre></td></tr></table></figure></li><li><p><code>concat()</code>:把当前的数组 和 另一个数组连接起来，并返回一个新的 数组；</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> newArr = arr1.concat(arr2,<span class="string">&quot;再次添加&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(newArr); <span class="comment">//[&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,1,2,3,&quot;再次添加&quot;];</span></span><br><span class="line"><span class="built_in">console</span>.log(arr1); <span class="comment">//[&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]</span></span><br></pre></td></tr></table></figure></li><li><p><code>push()</code>:向数组的末尾添加若干元素</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">pop(): 把数组的最后一个元素删除掉</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>];</span><br><span class="line">arr.push(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr);<span class="comment">//[1,2,&quot;a&quot;,&quot;b&quot;]</span></span><br><span class="line"></span><br><span class="line">arr.pop(); <span class="comment">//返回“b”;</span></span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">//[1,2,&quot;a&quot;]</span></span><br><span class="line"></span><br><span class="line">arr.pop();</span><br><span class="line">arr.pop();</span><br><span class="line">arr.pop();  <span class="comment">//连续3次pop，空数组继续pop不会报错</span></span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">//打印[]</span></span><br></pre></td></tr></table></figure></li><li><p><code>unshift()</code>: 向数组前面添加若干元素</p></li><li><p><code>shift()</code>: 则把数组的第一个元素删除掉</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>];</span><br><span class="line">arr.unshift(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>); <span class="comment">//返回新长度 4</span></span><br><span class="line"><span class="built_in">console</span>.log(arr);<span class="comment">//打印[&quot;a&quot;,&quot;b&quot;,1,2]</span></span><br><span class="line"></span><br><span class="line">arr.shift();<span class="comment">//返回&quot;a&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">//打印[&quot;b&quot;,1,2]</span></span><br><span class="line"></span><br><span class="line">arr.shift();arr.shift();arr.shift(); <span class="comment">//连续3次</span></span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">//打印[]</span></span><br><span class="line"></span><br><span class="line">arr.shift(); <span class="comment">//空数组继续删除不报错，返回undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">//打印[]</span></span><br></pre></td></tr></table></figure></li><li><p><code>slice()</code>: 截取数组的部分元素，然后返回一个新的数组</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;d&quot;</span>,<span class="string">&quot;e&quot;</span>,<span class="string">&quot;f&quot;</span>,<span class="string">&quot;g&quot;</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.slice(<span class="number">0</span>,<span class="number">3</span>)); <span class="comment">//从索引0开始，到索引3结束，但不包括3:[&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.slice(<span class="number">3</span>));  <span class="comment">//从索引3开始到结束:&quot;d&quot;,&quot;e&quot;,&quot;f&quot;,&quot;g&quot;</span></span><br><span class="line">如果不给slice()传递任何参数，他就会从头到尾截取所有元素。利用这一点，可以很容易的复制一份新的数组</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> aCopy = arr.slice();</span><br><span class="line"><span class="built_in">console</span>.log(aCopy); <span class="comment">//[1,2,3]</span></span><br></pre></td></tr></table></figure></li><li><p><code>sort()</code>: 可以对当前数组排序</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;a&quot;</span>];</span><br><span class="line">arr.sort();</span><br><span class="line"><span class="built_in">console</span>.log(arr);<span class="comment">//[&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]</span></span><br></pre></td></tr></table></figure></li><li><p><code>reverse()</code>: 把整个数组的元素给掉个个，也就是反转</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;one&quot;</span>,<span class="string">&quot;two&quot;</span>,<span class="string">&quot;three&quot;</span>];</span><br><span class="line">arr.reverse();</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">//[&quot;three&quot;,&quot;two&quot;,&quot;one&quot;]</span></span><br></pre></td></tr></table></figure></li><li><p><code>join()</code>: 把数组的每个元素用指定的字符串连接起来，然后新的字符串</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">arr.join(<span class="string">&quot;-&quot;</span>); <span class="comment">//&quot;a-b-c-1-2-3&quot;</span></span><br></pre></td></tr></table></figure></li><li><p><code>splice()</code>: 是修改数组的“万能方法”，他可以从指定的索引开始删除若干元素，然后再从该位置添加若干元素;</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//splice(索引值，删除数量，&quot;值1&quot;，&quot;值2&quot;);</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;苹果&quot;</span>,<span class="string">&quot;橘子&quot;</span>,<span class="string">&quot;香蕉&quot;</span>,<span class="string">&quot;芋头&quot;</span>,<span class="string">&quot;桂圆&quot;</span>,<span class="string">&quot;山楂&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//从索引2开始删除3个元素，然后再添加两个元素</span></span><br><span class="line">arr.splice(<span class="number">2</span>,<span class="number">3</span>,<span class="string">&quot;白梨&quot;</span>,<span class="string">&quot;西瓜&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// &quot;苹果&quot;,&quot;橘子&quot;,&quot;白梨&quot;,&quot;西瓜&quot;,&quot;山楂&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//只删除，不添加</span></span><br><span class="line">arr.splice(<span class="number">2</span>,<span class="number">2</span>);  <span class="comment">//&quot;白梨&quot;,&quot;西瓜&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">//&quot;苹果&quot;,&quot;橘子&quot;,&quot;山楂&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//只添加，不删除</span></span><br><span class="line">arr.splice(<span class="number">2</span>,<span class="number">0</span>,<span class="string">&quot;白梨&quot;</span>,<span class="string">&quot;西瓜&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr);<span class="comment">// &quot;苹果&quot;,&quot;橘子&quot;,&quot;白梨&quot;,&quot;西瓜&quot;,&quot;山楂&quot;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="Math的常用方法">Math的常用方法</h2><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>abs()</td><td>绝对值 （去除正负）</td></tr><tr><td>random()</td><td>随机数，0-1之间的随机数，1不会出现</td></tr><tr><td>round()</td><td>四舍五入</td></tr><tr><td>floor(x)</td><td>下舍入(向下取整)–地板</td></tr><tr><td>ceil(x)</td><td>上舍入(向上取整)–天花板</td></tr><tr><td>max(x,y)</td><td>x 和 y 中的最大值</td></tr><tr><td>min(x,y)</td><td>x 和 y 中的最小值</td></tr><tr><td>cos(x)</td><td>的余弦</td></tr><tr><td>sin(x)</td><td>x的正弦</td></tr><tr><td>sqrt(x)</td><td>返回x的平方根</td></tr><tr><td>pow(3,4)</td><td>返回3的4次方</td></tr></tbody></table><p><strong>Math函数的属性：<code>PI</code>  圆周率。使用方法：<code>Math.PI</code></strong></p><h2 id="全局对象中的常用方法（强制转换）">全局对象中的常用方法（强制转换）</h2><ol><li><code>isNaN()</code>:判断是否是数字，不是数字返回true，是数字返回false;(<code>isNaN:is not a number</code>)</li><li><code>eval()</code>把字符串里面的数字进行计算</li><li><code>parseFloat()</code>把字符串转换为小数</li><li><code>parseInt()</code>把字符串转换为整数</li></ol><h2 id="函数的定义、调用">函数的定义、调用</h2><ol><li>函数的概念</li></ol><blockquote><p>函数是ECMAScript的核心，包含一些代码，只有被调用以后才会执行。函数是对象数据类型的一种。</p></blockquote><ol start="2"><li><p>定义函数的语法：</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 函数名(<span class="params">参数</span>)</span>&#123;</span><br><span class="line">函数体(也称为：方法体);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>函数的调用</p><blockquote><p>函数名(参数值);</p></blockquote></li></ol><h2 id="正则表达式">正则表达式</h2><ol><li><p>正则表达式的概念</p><blockquote><p><code>RegExp</code>（正则表达式）是一个对象，就是用一个“字符串”来描述一个特征，然后去校验另一个“字符串”是否符合该特征。主要实现对<code>字符串的匹配</code>、<code>分割</code>、<code>查找</code>、<code>替换</code>、<code>校验</code>等操作。</p></blockquote></li><li><p>元字符<br><strong>正则模式当中的元字符，通常都具有特殊的含义</strong></p><table><thead><tr><th>元字符</th><th>说明</th></tr></thead><tbody><tr><td>a-z</td><td>英文小写字母</td></tr><tr><td>A-Z</td><td>英文大写字母</td></tr><tr><td>0-9</td><td>数字</td></tr><tr><td>\r  \n \t</td><td>非打印字符</td></tr><tr><td>\d</td><td>数字，相当于0-9</td></tr><tr><td>\D</td><td>\d  取反</td></tr><tr><td>\w</td><td>字母 数字 下划线</td></tr><tr><td>\W</td><td>\w  取反</td></tr><tr><td>\s</td><td>空白字符</td></tr><tr><td>\S</td><td>非空白字符</td></tr><tr><td>[  ]</td><td>任意匹配[ ]中单个字符</td></tr><tr><td>.</td><td>匹配任意字符（换行符除外）</td></tr><tr><td>{n}</td><td>匹配n次</td></tr><tr><td>{n,}</td><td>匹配至少n次</td></tr><tr><td>{n,m}</td><td>至少n次，最多m次</td></tr><tr><td>*</td><td>匹配0个或多个，相当于{0,}</td></tr><tr><td>+</td><td>匹配1个或多个，相当于{1,}</td></tr><tr><td>?</td><td>匹配0个或1个，相当于{0,1}</td></tr><tr><td>^</td><td>1、匹配正则开头  2、放在[^]，内容取反</td></tr><tr><td>$</td><td>匹配正则结尾</td></tr><tr><td>|</td><td>匹配 | 两侧任选其一</td></tr><tr><td>(  )</td><td>1.  分组 2.子存储</td></tr></tbody></table><p>**注意：**正则需要转义字符： ( ) { } ? * + . [ ] \ / ^ $ |</p></li><li><p>正则的定义：</p><ol><li>方式1：var re = /正则内容/;</li><li>方式2：var re = new RegExp(正则内容);</li></ol></li><li><p>test方法：检索字符串中指定的值。返回 true 或 false。</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span>  txt=<span class="string">&quot;this a cat, that a dog&quot;</span>;</span><br><span class="line"><span class="keyword">var</span>  re=<span class="regexp">/cat/</span>;</span><br><span class="line">alert(re.test(txt));   <span class="comment">//true</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> JavaScript基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> JavaScript基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript基础①-概述及语法基础</title>
      <link href="post/1caa3095.html"/>
      <url>post/1caa3095.html</url>
      
        <content type="html"><![CDATA[<h2 id="JavaScript的组成">JavaScript的组成:</h2><ol><li>核心(ECMAScript):由Ecma国际(前身为欧洲计算机制造商协会，European Computer Manufacturers Association)通过ECMA-262标准化的脚本程序设计语言。</li><li>文档对象模型(Document Object Model，简称DOM):是W3C组织推荐的处理可扩展置标语言的标准编程接口。描述了访问网页元素的方法和接口。</li><li>浏览器对象模型(Browser Object Model，简称BOM):描述了与浏览器进行交互的方法和接口。<ul><li>基本语法:<ol><li><code>注意行尾加分号;</code></li><li><code>换行书写;</code></li><li><code>单行注释:// 或者 多行注释/**/</code></li></ol></li><li>补充:页面输出语句;<br><code>alert(&quot;Hello Word&quot;); //系统弹窗</code><br><code>console.log(); //输出在控制台</code><br><code>document.write(); //打印在页面</code></li></ul></li></ol><h2 id="JavaScript的常用运算符">JavaScript的常用运算符:</h2><ol><li><p>算术运算符:<code>+</code>  <code>-</code>  <code>*</code>  <code>/</code>  <code>%</code>  <code>++</code>  <code>--</code><br><strong>🐔  i++ 与 ++i 的区别:</strong></p><ol><li>如果单独在一行，都自增1；</li><li>当与其他运算符或者输出语句一起使用时:<ul><li>i++:先赋值使用，再运算；(<code>++在后，先用后加</code>)</li><li>++i:先运算，再赋值使用；(<code>++在前，先加后用</code>)</li></ul></li></ol></li><li><p>比较运算符:<code>&gt;</code>  <code>&gt;=</code>  <code>&lt;</code>  <code>&lt;=</code>  <code>==</code>  <code>!=</code> ,返回结果:<code>真或假(true/false)</code></p></li><li><p>逻辑运算符:<code>&amp;&amp;</code>  <code>||</code>  <code>!</code> (<code>与</code>、<code>或</code>、<code>非</code>)</p><ul><li>&amp;&amp;:<code>两边为真，才为真</code>。<code>其中一个为假，即为假</code>。</li><li>||:<code>其中一个为真，即为真</code>。</li><li>！:<code>真假互换</code>。</li></ul></li><li><p>条件运算符:(表达式1  ?  表达式2  : 表达式3)</p><ul><li>判断“表达式1”的结果是否为真，</li><li>如果为真则执行“表达式2”，否则执行“表达式3”。</li></ul></li></ol><h2 id="条件分支语句-if，switch">条件分支语句:if，switch</h2><ul><li><strong>if语句:</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">语法:</span><br><span class="line"><span class="keyword">if</span>(条件表达式)&#123;</span><br><span class="line">语句块;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>if…else语句:</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">语法:</span><br><span class="line"><span class="keyword">if</span>(条件表达式)&#123;</span><br><span class="line">语句块<span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">语句块<span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>多分支if语句(if…else if 语句):</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">语法:</span><br><span class="line"><span class="keyword">if</span>(条件表达式<span class="number">1</span>)&#123;</span><br><span class="line">语句块<span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(条件表达式<span class="number">2</span>)&#123;</span><br><span class="line">语句块<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">......</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">语句块N;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>switch语句:</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(表达式)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> 值<span class="number">1</span>:</span><br><span class="line">语句块<span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">......</span><br><span class="line"><span class="keyword">case</span> 值N:</span><br><span class="line">语句块N;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">语句块;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="循环语句">循环语句:</h2><ul><li>while</li><li>do…while</li><li>for</li><li>for in</li><li>break和continue的使用</li></ul><hr /><ul><li>while循环:</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(条件表达式)&#123;</span><br><span class="line">循环语句;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>执行流程:判断条件表达式是否为真，如果为真，就执行后面的循环语句。然后再次判断，直到条件为假时，跳出while循环。</p></blockquote><hr /><ul><li>do…while循环:</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">循环语句;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(条件表达式);</span><br></pre></td></tr></table></figure><blockquote><p>执行流程:先执行语句，再判断条件，如果为真就继续执行循环语句。否则跳出循环。</p></blockquote><blockquote><p>while与do-while的区别:<br>while先判断再执行，<br>do-while先执行后判断(至少执行一次)。</p></blockquote><hr /><ul><li>for循环:</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(初始表达式<span class="number">1</span>; 条件表达式<span class="number">2</span>; 迭代表达式<span class="number">3</span> )&#123;</span><br><span class="line"></span><br><span class="line">循环语句<span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>for in (对象篇详解)</p></li><li><p>break:跳出循环<br>continue: 跳过该次循环，执行后面的循环(例:test07)</p></li></ul><hr /><h2 id="关键词与变量命名">关键词与变量命名</h2><ul><li>ECMAScript 关键字的完整列表:</li></ul><table><thead><tr><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:center"><strong>break</strong></td><td style="text-align:center"><strong>else</strong></td><td style="text-align:center"><strong>new</strong></td><td style="text-align:center"><strong>var</strong></td></tr><tr><td style="text-align:center"><strong>case</strong></td><td style="text-align:center"><strong>finally</strong></td><td style="text-align:center"><strong>return</strong></td><td style="text-align:center"><strong>void</strong></td></tr><tr><td style="text-align:center"><strong>catch</strong></td><td style="text-align:center"><strong>for</strong></td><td style="text-align:center"><strong>switch</strong></td><td style="text-align:center"><strong>while</strong></td></tr><tr><td style="text-align:center"><strong>continue</strong></td><td style="text-align:center"><strong>function</strong></td><td style="text-align:center"><strong>this</strong></td><td style="text-align:center"><strong>with</strong></td></tr><tr><td style="text-align:center"><strong>default</strong></td><td style="text-align:center"><strong>if</strong></td><td style="text-align:center"><strong>throw</strong></td><td style="text-align:center"><strong>let</strong></td></tr><tr><td style="text-align:center"><strong>delete</strong></td><td style="text-align:center"><strong>in</strong></td><td style="text-align:center"><strong>try</strong></td><td style="text-align:center"><strong>do</strong></td></tr><tr><td style="text-align:center"><strong>instanceof</strong></td><td style="text-align:center"><strong>typeof</strong></td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table><ul><li><p>定义变量<br>变量variable(临时存储的容器)<br>//变量:临时存储信息的容器，可以复用</p><blockquote><ul><li><p>var name; //变量的声明，并起名叫 name</p></li><li><p>name = “tt”; //为变量赋值,<code>=</code> 等号:是把右侧的值，<code>赋值</code>给左侧的变量名；</p></li><li><p>变量名大小写敏感</p><ul><li>var Name=“小花”;</li><li>var name=“小毛”;</li></ul></li></ul></blockquote><ul><li><p>命名规范:</p><blockquote><ol><li><p>必须以字母、数字、下划线或$组成。</p></li><li><p>开头不能是数字。</p></li><li><p>不能是JavaScript的关键字。</p><p><strong>注意:由于JavaScript是弱类型语言，所以在定义变量时，可以省略var，但是不建议使用。</strong></p></li></ol></blockquote></li></ul></li></ul><h2 id="JavaScript中的两种数据类型">JavaScript中的两种数据类型</h2><h3 id="原始类型-查看数据类型，使用-typeof">原始类型:(查看数据类型，使用:  typeof )</h3><ol><li>boolean</li><li>number</li><li>string</li><li>undefined:变量只定义不赋值，就是undefined</li><li>null:表示一个空对象，“什么都没有”的意思，用来表示无值，就像一个占位符</li></ol><h3 id="对象类型-object">对象类型(object)</h3><p><strong>对象的定义为:“无序属性的集合，其属性可以包含基本值、对象、或者函数”。</strong></p><ul><li><p>js中内置了如下的对象:</p><table><thead><tr><th>对象</th><th>说明</th></tr></thead><tbody><tr><td>Object</td><td>是所有JS对象的超类(基类)，JS中的所有对象都是继承自Object对象</td></tr><tr><td>Array</td><td>数组对象–定义数组属性和方法</td></tr><tr><td>Number</td><td>数字对象</td></tr><tr><td>Boolean</td><td>布尔对象–布尔值相关</td></tr><tr><td>Error</td><td>错误对象–处理程序错误</td></tr><tr><td>Function</td><td>函数对象–定义函数属性和方法</td></tr><tr><td>Math</td><td>数学对象</td></tr><tr><td>Date</td><td>日期对象</td></tr><tr><td>RegExp</td><td>对象正则表达式对象–定义文本匹配与筛选规则</td></tr><tr><td>String</td><td>字符串对象–定义字符串属性和方法</td></tr></tbody></table><p>​</p><p>​</p><p>​</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> JavaScript基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> js基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>移动设备(手机)网站界面设计</title>
      <link href="post/1158b6cc.html"/>
      <url>post/1158b6cc.html</url>
      
        <content type="html"><![CDATA[<h2 id="手机网站的概念及趋势">手机网站的概念及趋势</h2><ul><li>定义：手机网站是指特地用于手机阅读的网站。这种网站经过以文字信息和简单的图片信息为主。随着向手机智能化方向开展，装置了操作系统和阅读器的手机的功用和电脑是很类似的，但假如仅仅运用手机阅读器看PC网站的话，那还是很费劲的。运用这种手机能够经过GPRS上网可阅读几乎一切的www网站。由于手机的屏幕尺寸和CPU处置才能有限，特地为方便手机浏览而进行优化的网站更为便于用户阅读。目前使用手机上网的用户超过台式电脑用户，手机成为我国网民的第一大上网终端。</li></ul><h2 id="前端开发中PC端和移动端网站的区别">前端开发中PC端和移动端网站的区别</h2><ol><li>PC端在开发过程中考虑的是浏览器兼容性，移动端开发中考虑的是手机兼容性问题，做移动端开发，更多考虑的是手机分辨率的自适应和不同手机操作系统的略微差异化；</li><li>在部分事件的处理上，移动端自然是偏向于触屏的，另外包括移动端弹出的手机键盘该如何处理，这样的问题在PC上肯定不会遇到，但在移动端，如果你没有经验，处理起来是相当麻烦的；</li><li>布局上，移动端开发是要做到页面布局自适应的，而PC端页面布局的比例会相对固定；</li><li>在动画效果处理上，PC端要考虑IE的兼容性，通常用JS做动画的通用性会好一些，但相比CSS3却牺牲了较大的性能，而在手机端，如果要做一些动画、特效等，第一选择肯定是CSS3，既简单，效率又高。</li></ol><h2 id="设计手机网站的注意事项：">设计手机网站的注意事项：</h2><ol><li>明确需要展示的主题和内容；</li><li>尽量符合滑动屏幕的方式；</li><li>特别注意与PC端网站导航功能的区别；</li><li>考虑多种手机界面和浏览器的兼容；</li><li>尽量减少用户文字输入操作；</li><li>开始设计时就要为以后的推广和宣传做预估；</li><li>兼顾非触摸屏幕的设计；</li><li>简化页面内容；</li><li>注重网页产品和服务的展示；</li></ol><h2 id="手机网站的布局-使用媒体查询-原始方式">手机网站的布局:(使用媒体查询(原始方式))</h2><ul><li>@media 在设计响应式页面时是非常有用的。可以针对不同的屏幕尺寸设置不同的样式。使用该方式设计的页面，可以根据浏览器的大小实时地进行高度和宽度的渲染。</li><li>基本格式如下：</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span>  mediatype  <span class="keyword">and</span>|<span class="keyword">not</span>|<span class="keyword">only</span>  (mediad feature)</span><br><span class="line">&#123;</span><br><span class="line">// CSS代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>碎碎念：这个东西好麻烦的感觉~</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 前端设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端设计 </tag>
            
            <tag> 移动端网站设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>互联网单页设计与推广</title>
      <link href="post/5ff78d08.html"/>
      <url>post/5ff78d08.html</url>
      
        <content type="html"><![CDATA[<h2 id="竞价单页">竞价单页</h2><p><strong>概念：竞价单页通常都是由一个或几个HTML页面组成，由于HTML对搜索引擎的友好性，通过用来百度、google、搜狗等竞价排名来推广产品，由于大多数的竞价页面都是由一个页面组成，因此取名“竞价单页”。</strong></p><p>竞价产品以其高额的回报率成为近年来“网赚”的新宠，越来越多的“网客”加入竞价的行业，竞价产品的诞生不仅带动了多种行业的发展，更是营销方式的革新，更加促进了电子商务的发展。</p><ol><li>原理功效：主要介绍竞价产品<code>用途</code>、<code>功效</code>、<code>产地</code>，比如减肥的主要说该减肥产品的主要原材料，减肥效果等。</li><li>媒体报道：竞价产品一般都<code>主要靠媒体推广</code>等来营销的，引用主要媒体的视频、文章等来达到推广营销的目的，比如央视网、搜狐、新浪、网易、腾讯等主要媒体。</li><li>用户体验：以<code>图文并茂</code>的形式列举用户使用后的体验和感受，达到增强产品说服力的效果。</li><li>在线问答：<code>主要采取一问一答的方式</code>，网站客服在线回答用户的提问，主要包括产品功效、使用方法、付款方式、使用后的感受、产品运送方式等。</li><li>在线订单：<code>在线订单系统是竞价网页的核心部分，也是它的“灵魂”</code> ，主要用来在线收集用户的信息包括收货人名、购买产品类型、联系方式、收货地址、付款方式等。通过收集这些信息后以邮件方式或保存到数据库等方式供网站卖家查看、发货，达到营销的目的。</li><li>发货记录：发货记录也是竞价单页网站的主要组成部分，通常以循环滚动的方式不间断滚动展示发货信息，达到展示产品销售火爆的景象。</li></ol><h2 id="SEO">SEO</h2><p><strong>SEO优化英文全称：<code>Search Engine Optimization</code>，中文翻译为：<code>搜索引擎优化</code>，缩写为：<code>SEO</code>。关于SEO优化的简单的定义，就是从自然搜索结果获得网站流量的技术和过程，从而改进网站在搜索引擎中自然排名的一种技术。在搜索引擎里面搜索一个关键词，出现在搜索的结果中排名靠前的，广告除外，其余就是靠着SEO优化进行的。</strong></p><h3 id="SEO优化的范围">SEO优化的范围</h3><ul><li><p>SEO优化业务做的工作有网站结构优化、关键词竞争研究，如关键词选择、竞争程度判断、关键词拓展、关键词分布等、还有外链建设、页面优化，而目标都是为了提高网站的流量，即网站访问量。</p></li><li><p>据调查显示，有88% 的用户会利用搜索引擎服务查找需要的信息，而这之中有大部分的用户都会直接在搜索结果的自然排名的第一页信息中，查找选择所需要的信息，所以，如果网站的排名越靠前，那么被访问的几率也就越高，所能带来的业务也就越多。因此网站需要运用SEO进行网站优化，提高网站的排名。</p></li></ul><h4 id="内部优化">内部优化</h4><ol><li>meta标签优化：如：title, keywords, description等优化。</li><li>内部链接优化：如：相关性链接tag标签，锚文本链接，导航链接，图片链接等。</li><li>网站内容更新（主要是文字及内容的更新）</li></ol><h4 id="外部优化">外部优化</h4><ol><li>外部链接类别：友情链接、博客、论坛、新闻，贴吧、知道、百科等。</li><li>外链运营：每天增加一定数量的外部链接，使关键字排名稳步提升。</li><li>外链选择：与相关度比较高的网站交换友情链接。</li></ol><h3 id="SEO优化">SEO优化</h3><ul><li><p>SEO优化的<code>最终目的就是为了获得搜索流量</code>，因此关键词研究，针对有真实用户在搜索的关键词进行优化、文案写作等十分重要。SEO优化就是针对搜索引擎的搜索规则进行网站的优化。</p></li><li><p>SEO优化一般包括<code>站内优化</code>与<code>站外优化</code>两部分，站内优化是指网站本身的内容：更新的速度与质量、网站结构：标题标签，关键词，锚文本的分布、链接等。站外优化主要指外部链接。同时用户还可以结合一些SEO工具来帮助更好地进行网站的优化工作，例如：排名查询，权重查询，收录查询等。</p></li></ul><h3 id="SEO优化的走向">SEO优化的走向</h3><ul><li>流量最终的流向是网站，所以SEO最终目标是帮助网站完成流量转化，比如访问用户通过网站直接带来业务，提高公司业务、广告点击或品牌建设，提升知名度。</li></ul><h3 id="互联网站-网页-的权重排名">互联网站(网页)的权重排名</h3><h4 id="网站权重">网站权重</h4><ul><li>搜索引擎给网站(网页)赋予一定的权威值，对网站(网页)进行权威的评估评价。</li><li>一个网站的权重值越高，在搜索引擎所占的分量越大，排名就越靠前。提高网站的权重值，不但有利于网站（网页）在搜索引擎的排名更靠前，还能提高整站的流量，增加网站的可信度。权重就是网站在SE0中的重要性和权威性。英文名称：Page Strength。</li></ul><p><strong>需要注意的是：</strong></p><ol><li>权重不等于排名。</li><li>权重对排名有非常大的影响。</li><li>整站权重的提高有利于内页的排名。</li></ol><h4 id="权重的影响因素">权重的影响因素</h4><ol><li>网站架构：（优质的网页通常为扁平式包含：主页、栏目页、内容页等，同时包含tag标签，含留言、评论、文章搜索等功能）</li><li>域名类型：（gov, edu结尾类型的网站自身权重较高，可信度高。其次是com, net, org结尾的网站。注册域名越久权重越高）</li><li>导入链接：（关联信较高的友情链接，博客，论坛等）</li><li>网站内容：（优质的原创内容可以给搜索引擎提供新内容。如果不能原创，也尽量避免原封不动的照搬照抄）</li><li>收录数量</li><li>关键词排名</li><li>更新频率</li><li>开放式目录：（被大型公共网页目录：如DMOZ, YAHOO等收录）</li><li>内容页：是否与主页和网站主题有较为紧密的联系。也会参考：专业性和权威性。</li><li>网站的诚信度</li><li>网站服务器：（稳定的服务器）</li></ol><h2 id="单页推广技巧概述">单页推广技巧概述</h2><h3 id="head区的组成">head区的组成</h3><ol><li><p>标题(title):在搜索引擎中抓取的第一行内容就是title，地址栏上方的网页名称中显示的也是title，title就相当于一个人的名字，其重要性不言而喻。<br>title书写的注意事项：简洁精炼（10个字内为佳），包含网页核心关键词，且尽量靠前。如：“二手车行业领导者”和“领导买卖二手车行业”在搜索结果中的效果是不一样的。</p></li><li><p>meta 属性中的关键词(keywords)<br>关键字必须在内容中找到响应的匹配，才有利于排名。<br>如：“二手房中介”网站常用的关键词是：“二手房买卖”，“二手房交易”，“二手房过户”，“二手房贷款”等。</p></li><li><p>描述(description)描述的内容应该与正文的内容相关。浏览者可以在搜索结果中阅读相关的描述。控制长度，字符数（含空格）不宜超过200字。可以对title和keywords的内容进行补充。</p></li><li><p>其他meta标签属性:</p><ul><li>none：表示里面的文本内容或链接不可被查询。</li><li>from：表示页面上的链接可被查询。</li><li>nofrom：表示页面上的链接不可被查询。</li><li>author：涉及关于作者版权的搜索。</li><li>content部分常用命令：index、noindex、follow、nofollow，noarchive命令间以英文的“,”分隔。</li><li>index：允许查询、抓取本页。</li><li>follow：允许跟踪链接。</li><li>noindex：禁止查询、抓取本页。</li><li>nofollow：禁止跟踪链接。</li><li>noarchive：防止搜索引擎显示网站快照（网页快照）。</li><li>网站快照：搜索引擎在收录网页时，对网页进行备份，保存在自己（搜索引擎）的服务器缓存里，当用户在搜索引擎中点击“网页快照”链接时，搜索引擎将Spider系统当时所抓取并保存的网页内容展现出来，称为“网页快照”。</li></ul></li></ol><p><strong>例如:</strong></p><ol><li><code>&lt;meta name=&quot;robots&quot; content=&quot;noindex&quot;&gt;</code>作用：告诉搜索引擎不要抓取该页，如果该页已经收录，那么删除已经收录页面。</li><li><code>&lt;meta name=&quot;robots&quot; content=&quot;nofollow&quot;&gt;</code>作用：告诉搜索引擎不要跟踪该页所有链接。</li><li><code>&lt;meta name=&quot;robots&quot; content=&quot;noarchive&quot;&gt;</code>作用：告诉搜索引擎不要显示网站快照。<br>注意：<ul><li><code>meta name=&quot;robots&quot;</code>指所有的搜索引擎的，也可以指定某一个搜索引擎，例如：</li><li><code>meta name=&quot;Googlebot&quot;</code>(谷歌蜘蛛)</li><li><code>meta name=&quot;Baiduspider&quot;</code>(百度蜘蛛)<br>另外：</li><li><code>&lt;a rel=“nofollow” href=“url”&gt;</code>作用：告诉搜索引擎不要抓取该链接。</li></ul></li></ol><p><strong>补充：</strong></p><ol><li><p><code>&lt;link rel=&quot;dns-prefetch&quot; href=&quot;//&quot;&gt;</code></p><ul><li>使用原理：在DNS 解析和浏览器加载原理上，解析单个域名同样的地点加上高并发（极端）难免有点堵塞，再加上部分浏览器对相同域名去DNS 解析的时候会异步，导致速度下降，虽然这些速度上咱们可能看不上，但蚊子再小也是肉，优化就讲究极致。DNS Prefetch 是一种DNS 预解析技术，当你浏览网页时，浏览器会在加载网页时对网页中的域名进行解析缓存，这样在你单击当前网页中的连接时就无需进行DNS 的解析，减少用户等待时间，提高用户体验。“//” 是为了适配  https 和 http。</li></ul></li><li><p><code>&lt;meta name=&quot;renderer&quot; content=&quot;浏览器内核类型&quot;&gt;</code>：</p><ul><li>用于告诉浏览器默认以哪种浏览器内核浏览当前网站，浏览器就会在读取到这个属性后，会立马切换到对应的模式。</li></ul></li><li><p>content的取值主要有三种浏览器内核，分别是：</p><ol><li>webkit：使用的webkit内核，属于极速模式，常用于网站的高速浏览，网站打开速度快，但某些网站在极速模式下可能出现兼容性问题，显示不正常； 如：<code>&lt;meta name=&quot;renderer&quot; content=&quot;webkit&quot;&gt;</code></li><li>ie-comp：使用IE兼容模式，就是用IE6，IE7，IE8的渲染模式，网站打开速度比极速模式略低，但网页兼容性问题较少，常用于网银、交易支付、旧版网站；如：<code>&lt;meta name=&quot;renderer&quot; content=&quot;ie-comp&quot;&gt;</code></li><li>ie-stand：属于IE标准模式，网站会使用IE9及以上版本的渲染方式渲染，支持硬件加速、支持IE9及以上版本全新的脚本渲染引擎；如：<code>&lt;meta name=&quot;renderer&quot; content=&quot;ie-stand&quot;&gt;</code></li></ol></li><li><p><code>&lt;meta name=&quot;viewport&quot; content=&quot;&quot;&gt;</code></p><ol><li>width：控制 viewport 的大小，可以指定的一个值，比如 800，或者特殊的值，如 device-width 为设备的宽度（单位为缩放为 100% 时的 CSS 的像素）</li><li>height：和 width 相对应，指定高度</li><li>initial-scale：初始缩放比例，也即是当页面第一次 load 的时候缩放比例</li><li>maximum-scale：允许用户缩放到的最大比例</li><li>minimum-scale：允许用户缩放到的最小比例</li><li>user-scalable：用户是否可以手动缩放</li></ol></li></ol><h3 id="head区的标签注意事项">head区的标签注意事项</h3><ol><li>title长度：搜索引擎识别20个汉字或60个英文字母内，超出部分会被丢弃。</li><li>title的重要性：网页搜索中最重要的判断依据，是最重要的标签。</li><li>描述和关键词：在搜索结果中展示，其内容关系到能否吸引用户。</li><li>如何写好描述：真实，不浮夸，实事求是，有显著特点。</li><li>关键字标记的禁忌：重复堆砌相同的关键词可以让排名适当靠前，但是也容易受到搜索引擎的惩罚。</li></ol><h3 id="body区的组成">body区的组成</h3><ol><li><p>h标题标签：h1~h6代表段落标题权重的依次递减。<br><strong>如：h1代表网页的主标题，h2代表分段内容的标题，以此类推。即使h6也有一定的权重比，只是比较弱。</strong><br>例如：（权重依次递减）</p><blockquote><p>h1：亚洲旅游<br>h2：东亚旅游，东南亚旅游<br>h3：中国旅游，日本旅游，马来西亚旅游<br>…<br>h6：金殿旅游，云南野生动物园旅游</p></blockquote></li><li><p>标签的理解：每种标签都有对应的功能，如p标签不能做标题。</p></li><li><p>网页的命名：拼音或者英文单词的命名方式更容易被搜索引擎认可。如：qiche.html  与  123456.html对比，前者更容易被识别，因为其名称本身就是对网站的描述。</p></li><li><p>图片优化：alt=“”,如果图片无法加载，则显示友好提示。title=“”，利于搜索引擎识别。</p></li><li><p><code>&lt;header&gt;&lt;footer&gt;</code>标签的使用，利于搜索引擎自动识别页面内容和布局。</p></li></ol><p><strong>基本格式如下：</strong></p><blockquote><p><code>&lt;head&gt;</code>区域:</p><ol><li>设置合适的<code>&lt;title&gt;</code>：20个汉字以内</li><li>设置<code>&lt;meta name=&quot;keywords&quot; content=&quot;&quot;/&gt;</code></li><li>设置<code>&lt;meta name=&quot;description&quot; content=&quot;&quot;/&gt;</code></li><li>如果网站需要，可以写作者：<code>&lt;meta name=&quot;author&quot; content=&quot;&quot; /&gt;</code></li><li>版权设置<code>&lt;meta name=&quot;copyright&quot; content=&quot;&quot; /&gt;</code></li></ol></blockquote><blockquote><p><code>&lt;body&gt;</code>区域：</p><ol><li>页面主体设置<code>&lt;h1&gt;</code>标签：主标题</li><li>设置<code>&lt;h2&gt;</code>标签：副标题</li><li>图片的优化：<code>alt=&quot;&quot;， title=&quot;&quot;</code></li><li><code>&lt;header&gt;,&lt;footer&gt;</code>标签的使用</li></ol></blockquote><blockquote><p>网页命名：<br>尽量使用拼音或英文，利于搜索引擎识别和网页展示：xxx.html</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 前端设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端设计 </tag>
            
            <tag> 单页设计与推广 </tag>
            
            <tag> SEO优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>互联网网店设计</title>
      <link href="post/90f8904c.html"/>
      <url>post/90f8904c.html</url>
      
        <content type="html"><![CDATA[<h2 id="店铺装修基础知识">店铺装修基础知识</h2><h3 id="了解店铺装修的重要性">了解店铺装修的重要性:</h3><p>网店装修一直是个非常热门的话题，开网店，也要把门面装修得漂亮点才能吸引客人。店铺的第一印象对于人的认知会产生相当的影响，对于网络店铺来说，装修更是店铺兴旺的制胜法宝，任何物品的任何信息我们都只能通过眼球来获得，所以更要在美观上下一些功夫。</p><h3 id="做好店铺装修前的准备">做好店铺装修前的准备:</h3><p>所谓网店装修，就是将原本平淡无奇的页面通过各种图片、动画、文字等元素进行美化，从而使网店变得更生动、形象。在对店铺进行装修前，首先应该做足准备，这样才可以达到事半功倍的效果。</p><ol><li>主营商品的性质</li><li>合适的装修风格</li><li>收集装修素材</li></ol><h2 id="商品图片的处理与美化">商品图片的处理与美化</h2><p>一张好图胜千言，在网络上，买家不能看到商品实物，都是通过图片才能了解商品，因此，如果商品图片制作精良、漂亮，必然会引起买家兴趣。</p><ol><li>调整商品图片的大小</li><li>商品图片的裁剪</li><li>图片的亮度、对比度与颜色调整</li></ol><h2 id="店铺公告模板设计">店铺公告模板设计</h2><p><strong>网店公告显示在普通店铺右上角，店主可以在此发布一些促销、公告信息。</strong></p><h3 id="店铺公告的设计原则与要求">店铺公告的设计原则与要求</h3><p>店铺公告信息是用来显示店铺的动态信息、商品促销、服务信息等内容的，普通店铺公告的位置一般显示在店面的右上角；普通店铺公告的位置、尺寸和播放方式都是固定设置的，只能在有限区域内发挥作用。</p><h3 id="定义公告中的文字样式">定义公告中的文字样式</h3><p>默认情况下，淘宝店铺公告中的文字是黑色的宋体字，可以通过编辑器的方式来对公告文字的字体、字号、颜色等进行设置。</p><h3 id="美观的图片形式公告栏的设计">美观的图片形式公告栏的设计</h3><p>除了简单的文字公告形式外，淘宝店铺还支持使用图片形式的公告，就是将公告制作成一张图片。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 前端设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端设计 </tag>
            
            <tag> 网店设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网站整站交互设计</title>
      <link href="post/db7dc918.html"/>
      <url>post/db7dc918.html</url>
      
        <content type="html"><![CDATA[<h2 id="网站设计方法">网站设计方法</h2><p>简介: 网站设计要能充分吸引访问者的注意力，让访问者产生视觉上的愉悦感。因此在网页创作的时候就必须将网站的整体设计与网页设计的相关原理紧密结合起来。网站设计是将策划案中的内容、网站的主题模式，以及结合自己的认识通过艺术的手法表现出来；而网页制作通常就是将网页设计师所设计出来的设计稿，按照W3C规范用html（标准通用标记语言下的一个应用）将其制作成网页格式。</p><h3 id="设计方法">设计方法:</h3><ol><li>确定网站目标</li><li>满足用户的设计心理</li><li>熟悉和识别模式</li><li>网络上的品牌符号要统一</li><li>心里激发</li><li>运用图像强化概念</li></ol><h2 id="网站的可用性">网站的可用性</h2><h3 id="如何判断网页的可用性？">如何判断网页的可用性？</h3><p><code>页面链接的点击率</code>是判断网站价值的一个指标。因此，可用性测试是否有助于提高网页价值的一个重要判断标准就是：在同等条件下，根据测试结果改进后的网页上的点击率是否也得到相应提升。不可否认，有时网站的商业目的与改善用户体验的测试目的并不完全一致，在项目中我们努力在两者之间寻找平衡点，希望在提升网站用户体验的同时，符合网站给出的判断标准。</p><h3 id="如何让提升网站可用性">如何让提升网站可用性?</h3><ol><li>寻找用户能够理解的方式来表达信息</li><li>让用户能够按照自己认为正确的方式操作</li></ol><h3 id="影响网站可用性的关键因素">影响网站可用性的关键因素:</h3><ol><li>是否直观。衡量新用户是否能不费力的了解该网站的主旨、内容、使用流程;</li><li>是否高效。衡量老用户（明确知道如何使用）使用该网站达成目标的过程是否高效;</li><li>是否容易记忆。衡量老用户（之前仅使用过一次）是否需要在第二次使用时重复探索、学习网站使用流程;</li><li>用户误操作的频率和严重性。衡量用户使用过程中是否经常误操作、这些误操作影响是否严重、用户如何自行纠正这些错误;</li><li>是否满意。用户的主观感受如何，是否对使用该网站达成目标的过程感到满意;</li></ol><h2 id="常见网站的错误设计">常见网站的错误设计</h2><ol><li>搜索引擎不友好</li><li>使用PDF文件做为在线阅读</li><li>未改变已访问链接的颜色</li><li>文字未排版</li><li>固定字体大小</li><li>网页标题搜索引擎不友好</li><li>所有的东西看起来都像广告</li><li>违反设计惯例</li><li>打开新的浏览器窗口</li><li>不回答用户的提问</li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 前端设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端设计 </tag>
            
            <tag> 整站交互设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>yarn和npm常用命令</title>
      <link href="post/68889350.html"/>
      <url>post/68889350.html</url>
      
        <content type="html"><![CDATA[<h2 id="yarn和npm常用命令对比">yarn和npm常用命令对比</h2><table><thead><tr><th>作用</th><th>npm</th><th>yarn</th></tr></thead><tbody><tr><td>安装</td><td>npm install/i</td><td>yarn</td></tr><tr><td>卸载</td><td>npm unintall/un xxx</td><td>yarn remove xxx</td></tr><tr><td>全局安装</td><td>npm install/i xxx --global/-g</td><td>yarn global add xxx</td></tr><tr><td>安装包</td><td>npm install/i xxx --save/-S</td><td>yarn add xxx</td></tr><tr><td>开发模式安装包</td><td>npm install/i xxx --save-dev/-D</td><td>yarn add xxx -dev/-D</td></tr><tr><td>更新</td><td>npm update</td><td>yarn upgrade</td></tr><tr><td>全局更新</td><td>npm update -g</td><td>yarn global upgrade</td></tr><tr><td>清除缓存</td><td>npm cache clean</td><td>yarn cache clean</td></tr><tr><td>重装</td><td>rm -rf node_modules &amp;&amp; npm install</td><td>yarn upgrade</td></tr></tbody></table><h2 id="npm-install-常用命令">npm install 常用命令</h2><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>npm install moduleName</td><td>安装模块到项目目录</td></tr><tr><td>npm install -g moduleName</td><td><code>-g</code> 意思是将模块安装到全局</td></tr><tr><td>npm install --save moduleName</td><td><code>--save</code> 的意思是将模块安装到项目目录下，并在package文件的<code>dependencies</code>节点写入依赖。</td></tr><tr><td>npm install --save-dev moduleName</td><td><code>--save-dev</code> 的意思是将模块安装到项目目录下，并在package文件的<code>devDependencies</code>节点写入依赖。</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> NPM/YARN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
            <tag> yarn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用的Git操作</title>
      <link href="post/643e8ed0.html"/>
      <url>post/643e8ed0.html</url>
      
        <content type="html"><![CDATA[<h2 id="Git-Push">Git Push</h2><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">方法一</button></li><li class="tab"><button type="button" data-href="#test1-2">方法二</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p><strong>此方法适用于已经在Github创建好仓库</strong></p><ul><li>把Github上面的仓库克隆到本地</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/Github用户名/仓库名.git</span><br></pre></td></tr></table></figure><ul><li>进入项目文件夹</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> 项目名</span><br></pre></td></tr></table></figure><ul><li>把文件夹下面的文件都添加进来</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure><ul><li>提交信息</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit <span class="literal">-m</span> <span class="string">&quot;xxxxxx&quot;</span></span><br></pre></td></tr></table></figure><ul><li>把本地仓库push到github上面，此步骤需要输入帐号和密码</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push <span class="literal">-u</span> origin master(<span class="number">2020</span> 年 <span class="number">10</span> 月 <span class="number">1</span> 日起，在 Github 平台上创建的所有新的源代码仓库将默认命名为 <span class="string">&quot;main&quot;</span> ，不再是原先的 <span class="string">&quot;master&quot;</span> )</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><p><strong>本方法需要先创建一个本地的版本库</strong></p><ul><li>通过命令行在桌面新建一个test文件夹</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdar test</span><br></pre></td></tr></table></figure><ul><li>通过init把这个文件夹变成Git可管理的仓库</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><ul><li><p>把你的项目粘贴到这个本地Git仓库里面</p></li><li><p>粘贴后你可以通过<code>git status</code>来查看你当前的状态</p></li><li><p>把刚才复制过来的项目全部添加到仓库</p></li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure><ul><li>提交到本地缓冲(注释？)</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit <span class="literal">-m</span> <span class="string">&quot;xxxxxx&quot;</span></span><br></pre></td></tr></table></figure><ul><li>在Github上创建好Git仓库</li><li>将本地仓库的代码提交远程github的仓库</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin https://github.com/Github用户名/仓库名.git</span><br></pre></td></tr></table></figure><ul><li>将远程仓库的代码 push到master分支上</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- 由于新建的远程仓库是空的  所以要加上<span class="literal">-u</span>这个参数</span><br><span class="line">git push <span class="literal">-u</span> origin master</span><br><span class="line"></span><br><span class="line">- 等远程仓库里面有了内容之后，下次再从本地库上传内容的时候不需要了</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="Git-版本发布">Git-版本发布</h2><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#-1">Git-版本发布</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="-1"><ul><li>创建Github一个版本发布</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git tag</span><br><span class="line">git tag <span class="literal">-a</span> v1.<span class="number">0.0</span> <span class="literal">-m</span> <span class="string">&quot;xxxxxx&quot;</span></span><br></pre></td></tr></table></figure><ul><li>查看某标签的信息</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git show v1.<span class="number">0.0</span></span><br></pre></td></tr></table></figure><ul><li>推送到远程库</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin v1.<span class="number">0.0</span></span><br></pre></td></tr></table></figure><ul><li>删除标签</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag <span class="literal">-d</span> v1.<span class="number">0.0</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> Git/SVN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在昆明，没有一个矮子能笑着走出地铁</title>
      <link href="post/20d94337.html"/>
      <url>post/20d94337.html</url>
      
        <content type="html"><![CDATA[<div class="note warning flat"><p>长图预警 长图预警 长图预警</p></div><p><img src= "/img/loading.gif" data-lazy-src="https://miraitowa.oss-cn-chengdu.aliyuncs.com/img/miraitowa-kunming-subway-img1.jpg" alt="img1"><br><img src= "/img/loading.gif" data-lazy-src="https://miraitowa.oss-cn-chengdu.aliyuncs.com/img/miraitowa-kunming-subway-img2.jpg" alt="img2"><br><img src= "/img/loading.gif" data-lazy-src="https://miraitowa.oss-cn-chengdu.aliyuncs.com/img/miraitowa-kunming-subway-img3.jpg" alt="img3"><br><img src= "/img/loading.gif" data-lazy-src="https://miraitowa.oss-cn-chengdu.aliyuncs.com/img/miraitowa-kunming-subway-img4.jpg" alt="img4"><br><img src= "/img/loading.gif" data-lazy-src="https://miraitowa.oss-cn-chengdu.aliyuncs.com/img/miraitowa-kunming-subway-img5.jpg" alt="img5"><br><img src= "/img/loading.gif" data-lazy-src="https://miraitowa.oss-cn-chengdu.aliyuncs.com/img/miraitowa-kunming-subway-img6.jpg" alt="img6"><br><img src= "/img/loading.gif" data-lazy-src="https://miraitowa.oss-cn-chengdu.aliyuncs.com/img/miraitowa-kunming-subway-img7.jpg" alt="img7"><br><img src= "/img/loading.gif" data-lazy-src="https://miraitowa.oss-cn-chengdu.aliyuncs.com/img/miraitowa-kunming-subway-img8.jpg" alt="img8"><br><img src= "/img/loading.gif" data-lazy-src="https://miraitowa.oss-cn-chengdu.aliyuncs.com/img/miraitowa-kunming-subway-img9.jpg" alt="img9"><br><img src= "/img/loading.gif" data-lazy-src="https://miraitowa.oss-cn-chengdu.aliyuncs.com/img/miraitowa-kunming-subway-img10.jpg" alt="img10"><br><img src= "/img/loading.gif" data-lazy-src="https://miraitowa.oss-cn-chengdu.aliyuncs.com/img/miraitowa-kunming-subway-img11.jpg" alt="img11"><br><img src= "/img/loading.gif" data-lazy-src="https://miraitowa.oss-cn-chengdu.aliyuncs.com/img/miraitowa-kunming-subway-img12.jpg" alt="img12"><br><img src= "/img/loading.gif" data-lazy-src="https://miraitowa.oss-cn-chengdu.aliyuncs.com/img/miraitowa-kunming-subway-img13.jpg" alt="img13"><br><img src= "/img/loading.gif" data-lazy-src="https://miraitowa.oss-cn-chengdu.aliyuncs.com/img/miraitowa-kunming-subway-img14.jpg" alt="img14"><br><img src= "/img/loading.gif" data-lazy-src="https://miraitowa.oss-cn-chengdu.aliyuncs.com/img/miraitowa-kunming-subway-img15.jpg" alt="img15"></p><div class="note danger flat"><p>图源网络</p></div>]]></content>
      
      
      <categories>
          
          <category> 事件簿 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常 </tag>
            
            <tag> 昆明 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>butterfly主题魔改记录</title>
      <link href="post/68a0812f.html"/>
      <url>post/68a0812f.html</url>
      
        <content type="html"><![CDATA[<h2 id="取其精华">取其精华</h2><p><strong>2021-01-20</strong></p><ul><li>基于<a href="https://www.antmoe.com/posts/a811d614/index.html">butterfly主题优雅魔改系列</a>进行精简,去除自己不需要的功能。</li></ul><hr><h2 id="首页置顶轮播">首页置顶轮播</h2><table><thead><tr><th style="text-align:left">时间</th><th style="text-align:left">2020-01-18</th></tr></thead><tbody><tr><td style="text-align:left"><strong>作者</strong></td><td style="text-align:left"><strong><a href="https://akilar.top/">Akilarの糖果屋</a></strong></td></tr><tr><td style="text-align:left"><strong>链接</strong></td><td style="text-align:left"><a href="https://akilar.top/posts/8e1264d1/"><strong>首页置顶轮播图</strong></a></td></tr></tbody></table><h2 id="留言板动态弹出信封样式">留言板动态弹出信封样式</h2><table><thead><tr><th style="text-align:left"><strong>时间</strong></th><th style="text-align:left"><strong>2020-01-17</strong></th></tr></thead><tbody><tr><td style="text-align:left"><strong>作者</strong></td><td style="text-align:left"><strong><a href="https://akilar.top/">Akilarの糖果屋</a></strong></td></tr><tr><td style="text-align:left"><strong>链接</strong></td><td style="text-align:left"><strong><a href="https://akilar.top/posts/f99b208/#%E7%95%99%E8%A8%80%E6%9D%BF%E5%8A%A8%E6%80%81%E5%BC%B9%E5%87%BA%E4%BF%A1%E5%B0%81%E6%A0%B7%E5%BC%8F">留言板动态弹出信封样式</a></strong></td></tr></tbody></table><h2 id="butterfly主题优雅魔改系列">butterfly主题优雅魔改系列</h2><table><thead><tr><th style="text-align:left"><strong>时间</strong></th><th style="text-align:left"><strong>2020-01-04</strong></th></tr></thead><tbody><tr><td style="text-align:left"><strong>作者</strong></td><td style="text-align:left"><strong><a href="https://www.antmoe.com/">小康（Dreamy.TZK）</a></strong></td></tr><tr><td style="text-align:left"><strong>链接</strong></td><td style="text-align:left"><strong><a href="https://www.antmoe.com/posts/a811d614/index.html">butterfly主题优雅魔改系列</a></strong></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> HEXO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> butterfly </tag>
            
            <tag> hexo </tag>
            
            <tag> 魔改 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>怀念-Mc</title>
      <link href="post/2b43fca2.html"/>
      <url>post/2b43fca2.html</url>
      
        <content type="html"><![CDATA[<p>纪念一下曾经那些无数个孤独生存的日子.</p><p>如今很少有时间能静下心来好好玩一款游戏了。</p><div class="justified-gallery"><p><img src= "/img/loading.gif" data-lazy-src="https://miraitowa.oss-cn-chengdu.aliyuncs.com/img/miraitowa-mc-img1.jpg" alt=""><br><img src= "/img/loading.gif" data-lazy-src="https://miraitowa.oss-cn-chengdu.aliyuncs.com/img/miraitowa-mc-img2.jpg" alt=""><br><img src= "/img/loading.gif" data-lazy-src="https://miraitowa.oss-cn-chengdu.aliyuncs.com/img/miraitowa-mc-img3.jpg" alt=""></p>          </div>]]></content>
      
      
      <categories>
          
          <category> 往事如烟 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MC </tag>
            
            <tag> Minecrift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 触发器</title>
      <link href="post/87f78bf4.html"/>
      <url>post/87f78bf4.html</url>
      
        <content type="html"><![CDATA[<h2 id="MySQL-触发器">MySQL 触发器</h2><h4 id="触发器定义与用法实例">触发器定义与用法实例</h4><p><strong>语法</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> 触发器名称             <span class="comment">--触发器必须有名字，最多64个字符，可能后面会附有分隔符.它和MySQL中其他对象的命名方式基本相象.</span></span><br><span class="line">&#123; <span class="keyword">BEFORE</span> | <span class="keyword">AFTER</span> &#125;                   <span class="comment">--触发器有执行的时间设置：可以设置为事件发生前或后。</span></span><br><span class="line">&#123; <span class="keyword">INSERT</span> | <span class="keyword">UPDATE</span> | <span class="keyword">DELETE</span> &#125;         <span class="comment">--同样也能设定触发的事件：它们可以在执行insert、update或delete的过程中触发。</span></span><br><span class="line"><span class="keyword">ON</span> 表名称                            <span class="comment">--触发器是属于某一个表的:当在这个表上执行插入、 更新或删除操作的时候就导致触发器的激活. 我们不能给同一张表的同一个事件安排两个触发器。</span></span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="keyword">ROW</span>                         <span class="comment">--触发器的执行间隔：FOR EACH ROW子句通知触发器 每隔一行执行一次动作，而不是对整个表执行一次。</span></span><br><span class="line">&lt;触发器<span class="keyword">SQL</span>语句&gt;                      <span class="comment">--触发器包含所要触发的SQL语句：这里的语句可以是任何合法的语句， 包括复合语句，但是这里的语句受的限制和函数的一样。</span></span><br></pre></td></tr></table></figure><p><strong>实例准备工作</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建表tab1</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> tab1;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tab1(</span><br><span class="line">  tab1_id <span class="built_in">varchar</span>(<span class="number">11</span>)</span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 创建表tab2</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> tab2;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tab2(</span><br><span class="line">  tab2_id <span class="built_in">varchar</span>(<span class="number">11</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li>实例1：新增一条，触发另外一张表的新增</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建触发器:t_afterinsert_on_tab1</span></span><br><span class="line"><span class="comment">-- 作用：增加tab1表记录后自动将记录增加到tab2表中</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TRIGGER</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> t_afterinsert_on_tab1;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> t_afterinsert_on_tab1</span><br><span class="line"><span class="keyword">AFTER</span> <span class="keyword">INSERT</span> <span class="keyword">ON</span> tab1</span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="keyword">ROW</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">   <span class="keyword">insert</span> <span class="keyword">into</span> tab2(tab2_id) <span class="keyword">values</span>(new.tab1_id);</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"><span class="comment">-- 测试一下</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tab1(tab1_id) <span class="keyword">values</span>(<span class="string">&#x27;0001&#x27;</span>);</span><br><span class="line"><span class="comment">-- 看看结果</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> tab1;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> tab2</span><br></pre></td></tr></table></figure><ul><li>实例2：删除一条，触发另外一张表的删除</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建触发器:t_afterdelete_on_tab1</span></span><br><span class="line"><span class="comment">-- 作用：删除tab1表记录后自动将tab2表中对应的记录删去</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TRIGGER</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> t_afterdelete_on_tab1;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> t_afterdelete_on_tab1</span><br><span class="line"><span class="keyword">AFTER</span> <span class="keyword">DELETE</span> <span class="keyword">ON</span> tab1</span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="keyword">ROW</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">   <span class="keyword">delete</span> <span class="keyword">from</span> tab2 <span class="keyword">where</span> tab2_id=old.tab1_id;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"><span class="comment">-- 测试一下</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> tab1 <span class="keyword">WHERE</span> tab1_id=<span class="string">&#x27;0001&#x27;</span>;</span><br><span class="line"><span class="comment">-- 看看结果</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> tab1;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> tab2;</span><br></pre></td></tr></table></figure><ul><li>实例3：更新一条，触发另外一张表的更新</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建触发器:t_afterupdate_on_tab1</span></span><br><span class="line"><span class="comment">-- 作用：修改tab1表记录后自动将tab2表中对应的记录更新</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TRIGGER</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> t_afterupdate_on_tab1;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> t_afterupdate_on_tab1</span><br><span class="line"><span class="keyword">AFTER</span> <span class="keyword">UPDATE</span> <span class="keyword">ON</span> tab1</span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="keyword">ROW</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">   <span class="keyword">update</span> tab2 <span class="keyword">set</span> tab2_id=new.tab1_id <span class="keyword">where</span> tab2_id=old.tab1_id;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"><span class="comment">-- 测试一下</span></span><br><span class="line"><span class="keyword">update</span> tab1 <span class="keyword">set</span> tab1_id=<span class="string">&#x27;0002&#x27;</span> <span class="keyword">WHERE</span> tab1_id=<span class="string">&#x27;0001&#x27;</span>;</span><br><span class="line"><span class="comment">-- 看看结果</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> tab1;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> tab2;</span><br></pre></td></tr></table></figure><h4 id="课后习题">课后习题</h4><blockquote><p>1、在 product 表上分别创建 BEFORE INSERT 、 AFTER UPDATE 和 AFTER DELETE 3 个触<br>发器，触发器名称分别为 product_bf_insert 、 product_af_update 和 product_af_del 。执行语句部分都是向 operate 表插入操作方法和操作时间。<br>2、对 product 表分别执行 INSERT 、 UPDATE 和 DELETE 操作<br>3、删除 product_bf_insert 和 product_af_update 这两个触发器</p></blockquote><h4 id="题解代码">题解代码</h4><p><strong>建立 operate和product表 并向product表中插入数据</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 建表 operate</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`operate`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`operate`</span> (</span><br><span class="line">  <span class="string">`Op_id`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">&#x27;编号&#x27;</span>,</span><br><span class="line">  <span class="string">`Op_type`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;操作方式&#x27;</span>,</span><br><span class="line">  <span class="string">`Op_time`</span> <span class="built_in">time</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;操作时间&#x27;</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`Op_id`</span>),</span><br><span class="line">  <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span> <span class="string">`Op_id`</span> (<span class="string">`Op_id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 建表 product</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`product`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`product`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;产品编号&#x27;</span>,</span><br><span class="line">  <span class="string">`Name`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;产品名称&#x27;</span>,</span><br><span class="line">  <span class="string">`Function`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;产品功能&#x27;</span>,</span><br><span class="line">  <span class="string">`Company`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;生产厂家&#x27;</span>,</span><br><span class="line">  <span class="string">`Address`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;家庭住址&#x27;</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">  <span class="keyword">UNIQUE</span> <span class="keyword">KEY</span> <span class="string">`id`</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> product(<span class="keyword">id</span>,<span class="string">`NAME`</span>,<span class="string">`Function`</span>,Company,Address) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>,<span class="string">&#x27;Strawberry&#x27;</span>,<span class="string">&#x27;通便&#x27;</span>,<span class="string">&#x27;中国&#x27;</span>,<span class="string">&#x27;北京&#x27;</span>),</span><br><span class="line">(<span class="number">2</span>,<span class="string">&#x27;Watermelon&#x27;</span>,<span class="string">&#x27;利尿&#x27;</span>,<span class="string">&#x27;中国&#x27;</span>,<span class="string">&#x27;杭州&#x27;</span>),</span><br><span class="line">(<span class="number">3</span>,<span class="string">&#x27;cherry&#x27;</span>,<span class="string">&#x27;养颜驻容&#x27;</span>,<span class="string">&#x27;中国&#x27;</span>,<span class="string">&#x27;深圳&#x27;</span>);</span><br></pre></td></tr></table></figure><p><strong>触发器的创建</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建 BEFORE INSERT 触发器</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> product_bf_insert</span><br><span class="line"><span class="keyword">BEFORE</span> <span class="keyword">INSERT</span> <span class="keyword">on</span> product</span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="keyword">ROW</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> operate <span class="keyword">VALUES</span>(<span class="literal">NULL</span>,<span class="string">&#x27;数据插入成功！&#x27;</span>,<span class="built_in">TIME</span>(<span class="keyword">NOW</span>()));</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> product(<span class="keyword">id</span>,<span class="string">`NAME`</span>,<span class="string">`Function`</span>,Company,Address) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">4</span>,<span class="string">&#x27;peach&#x27;</span>,<span class="string">&#x27;补益气血，养阴生津&#x27;</span>,<span class="string">&#x27;中国&#x27;</span>,<span class="string">&#x27;北京&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建 AFTER UPDATE 触发器</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> product_af_update</span><br><span class="line"><span class="keyword">AFTER</span> <span class="keyword">UPDATE</span> <span class="keyword">on</span> product</span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="keyword">ROW</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> operate <span class="keyword">VALUES</span>(<span class="literal">NULL</span>,<span class="string">&#x27;数据更新成功！&#x27;</span>,<span class="built_in">TIME</span>(<span class="keyword">NOW</span>()));</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 更新数据</span></span><br><span class="line"><span class="keyword">UPDATE</span> product <span class="keyword">SET</span> Address=<span class="string">&#x27;北京海淀区&#x27;</span> <span class="keyword">WHERE</span> <span class="keyword">id</span>=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建 AFTER DELETE 触发器</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> product_af_del</span><br><span class="line"><span class="keyword">AFTER</span> <span class="keyword">DELETE</span> <span class="keyword">on</span> product</span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="keyword">ROW</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> operate <span class="keyword">VALUES</span>(<span class="literal">NULL</span>,<span class="string">&#x27;数据删除成功！&#x27;</span>,<span class="built_in">TIME</span>(<span class="keyword">NOW</span>()));</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除数据</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> product <span class="keyword">WHERE</span> <span class="keyword">id</span>=<span class="number">4</span>;</span><br></pre></td></tr></table></figure><p><strong>删除触发器</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 删除 product_bf_insert 和 product_af_update 触发器</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TRIGGER</span> product_bf_insert;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TRIGGER</span> product_af_update;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> Trigger </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-爬楼梯</title>
      <link href="post/b0fdf7c6.html"/>
      <url>post/b0fdf7c6.html</url>
      
        <content type="html"><![CDATA[<h2 id="爬楼梯">爬楼梯</h2><p>假设你正在爬楼梯。需要<code>n</code>阶你才能到达楼顶。<br>每次你可以爬<code>1</code>或<code>2</code>个台阶。你有多少种不同的方法可以爬到楼顶呢？</p><p>注意：给定<code>n</code>是一个正整数。</p><p><strong>示例 1：</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入： 2</span><br><span class="line">输出： 2</span><br><span class="line">解释： 有两种方法可以爬到楼顶。</span><br><span class="line">1.  1 阶 + 1 阶</span><br><span class="line">2.  2 阶</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入： 3</span><br><span class="line">输出： 3</span><br><span class="line">解释： 有三种方法可以爬到楼顶。</span><br><span class="line">1.  1 阶 + 1 阶 + 1 阶</span><br><span class="line">2.  1 阶 + 2 阶</span><br><span class="line">3.  2 阶 + 1 阶</span><br></pre></td></tr></table></figure><h4 id="解题思路">解题思路</h4><p><strong>斐波那契数列</strong></p><p><code>current_step = step1 + step2</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">climbStairs</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 第n层，等于第n-1层+第n-2层</span></span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> step1 = <span class="number">1</span>, step2 = <span class="number">2</span>, temp;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        temp = step1;</span><br><span class="line">        step1 = step2;</span><br><span class="line">        step2 = temp + step1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> step2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-两数之和</title>
      <link href="post/812420b3.html"/>
      <url>post/812420b3.html</url>
      
        <content type="html"><![CDATA[<h2 id="两数之和">两数之和</h2><p>给定一个整数数组<code>nums</code>和一个目标值<code>target</code>请你在该数组中找出和为目标值的那两个整数,并返回他们的数组下标。<br>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。<br><strong>示例:</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">给定 nums = [2, 7, 11, 15], target = 9</span><br><span class="line">因为 nums[0] + nums[1] = 2 + 7 = 9</span><br><span class="line">所以返回 [0, 1]</span><br></pre></td></tr></table></figure><h4 id="解题思路">解题思路</h4><p><strong>无序数组的两数之和</strong></p><p>代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span>* <span class="title">twoSum</span><span class="params">(<span class="keyword">int</span>* nums, <span class="keyword">int</span> numsSize, <span class="keyword">int</span> target, <span class="keyword">int</span>* returnSize)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> count[<span class="number">2</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; numsSize - <span class="number">1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j = i + <span class="number">1</span>;j &lt; numsSize;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] + nums[j] == target)</span><br><span class="line">            &#123;</span><br><span class="line">                count[<span class="number">0</span>] = i;</span><br><span class="line">                count[<span class="number">1</span>] = j;</span><br><span class="line">                * returnSize = <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">return</span> count;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    * returnSize = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 视图与索引</title>
      <link href="post/f5a946ac.html"/>
      <url>post/f5a946ac.html</url>
      
        <content type="html"><![CDATA[<h2 id="视图">视图</h2><h3 id="基本概念">基本概念</h3><p><strong>视图本身是一张虚拟表，不存放任何数据。在使用SQL语句访问视图的时候，获取的数据是MySQL从其它表中生成的，视图和表在同一个命名空间。视图查询数据相对安全，视图可以隐藏一些数据和结构，只让用户看见权限内的数据，使复杂的查询易于理解和使用。</strong></p><h3 id="视图用法">视图用法</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 基本语法</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> <span class="keyword">REPLACE</span> <span class="keyword">VIEW</span> view_name </span><br><span class="line"><span class="keyword">AS</span> select_statement</span><br></pre></td></tr></table></figure><p><strong>注意事项：表和视图共享数据库中相同的名称空间，因此，数据库不能包含具有相同名称的表和视图。</strong></p><h4 id="视图调用">视图调用</h4><p><strong>和MySQL的表查询基本一致，可以使用各种查询条件。</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> user_order_view <span class="keyword">WHERE</span> user_name=<span class="string">&#x27;Cicada&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="查看视图">查看视图</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">VIEW</span> user_order_view ;</span><br></pre></td></tr></table></figure><h4 id="修改视图">修改视图</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">VIEW</span> view_name <span class="keyword">AS</span> select_statement ;</span><br></pre></td></tr></table></figure><h4 id="删除视图">删除视图</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> [<span class="keyword">IF</span> <span class="keyword">EXISTS</span>] view_name ;</span><br></pre></td></tr></table></figure><h3 id="视图更新">视图更新</h3><p><strong>在指定条件允许的情况下，可以通过在视图上操作更新，删除，甚至写入数据，进而更新视图所涉及的相关表。</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> user_order_view <span class="keyword">SET</span> user_name=<span class="string">&#x27;smile&#x27;</span> <span class="keyword">WHERE</span> <span class="keyword">id</span>=<span class="string">&#x27;1&#x27;</span>;</span><br></pre></td></tr></table></figure><ul><li><p>如果视图定义时使用聚合函数，分组等特殊操作，则无法更新。</p></li><li><p>MySQL不支持在视图上创建触发器。</p></li></ul><h3 id="注意事项">注意事项</h3><ul><li>MySQL并不支持在视图中创建索引，使用视图的时候可能会引发很多查询性能问题</li></ul><h2 id="索引">索引</h2><h3 id="索引的优缺点">索引的优缺点</h3><h4 id="优点">优点</h4><ul><li>索引大大减小了服务器需要扫描的数据量</li><li>索引可以帮助服务器避免排序和临时表</li><li>索引对于InnoDB（对索引支持行级锁）非常重要，因为它可以让查询锁更少的元组。</li></ul><h4 id="缺点">缺点</h4><ul><li>虽然索引大大提高了查询速度，同时却会降低更新表的速度，如对表进行INSERT、UPDATE和DELETE。因为更新表时，MySQL不仅要保存数据，还要保存索引文件。</li><li>建立索引会占用磁盘空间的索引文件。</li><li>如果某个数据列包含许多重复的内容，为它建立索引就没有太大的实际效果。</li><li>对于非常小的表，大部分情况下简单的全表扫描更高效；</li></ul><h3 id="索引创建语法">索引创建语法</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 普通索引</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">index</span> index1 <span class="keyword">on</span> student (<span class="keyword">id</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 唯一索引</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> <span class="keyword">INDEX</span> index2 <span class="keyword">on</span> student(<span class="keyword">id</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 全文索引</span></span><br><span class="line"><span class="keyword">CREATE</span> FULLTEXT <span class="keyword">INDEX</span> index3 <span class="keyword">on</span> student(adress(<span class="number">20</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建单列索引</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> INDEX5 <span class="keyword">on</span> student(<span class="keyword">name</span>(<span class="number">10</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 联合索引</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> INDEX6 <span class="keyword">ON</span> student (<span class="keyword">name</span>,<span class="keyword">id</span>); </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 普通索引</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student <span class="keyword">ADD</span> <span class="keyword">INDEX</span> index1(<span class="keyword">id</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 唯一索引</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student <span class="keyword">ADD</span> <span class="keyword">UNIQUE</span> <span class="keyword">INDEX</span> index2(<span class="keyword">id</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 全文索引</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student <span class="keyword">add</span> FULLTEXT <span class="keyword">INDEX</span> index3 (<span class="keyword">NAME</span>(<span class="number">20</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 单列索引</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student <span class="keyword">ADD</span> <span class="keyword">INDEX</span> index4 (adress(<span class="number">20</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 联合索引</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student <span class="keyword">ADD</span> <span class="keyword">INDEX</span> INDEX5 (<span class="keyword">name</span>,<span class="keyword">id</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 数据库 </tag>
            
            <tag> View </tag>
            
            <tag> index </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 存储过程事务处理</title>
      <link href="post/47c80ad2.html"/>
      <url>post/47c80ad2.html</url>
      
        <content type="html"><![CDATA[<h2 id="存储过程">存储过程</h2><h3 id="简介">简介</h3><p>存储程序是被存储在服务器中的组合SQL语句，经编译创建并保存在数据库中，用户可通过存储过程的名字调用执行。存储过程核心思想就是数据库SQL语言层面的封装与重用性。使用存储过程可以较少应用系统的业务复杂性，但是会增加数据库服务器系统的负荷。</p><h3 id="基本语法">基本语法</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> sp_name ([proc_parameter[,...]])</span><br><span class="line">    [characteristic ...] routine_body</span><br></pre></td></tr></table></figure><h3 id="案例">案例</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询学生表中性别为男的学生总数</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> u_pro(<span class="keyword">IN</span> v_sex <span class="built_in">VARCHAR</span>(<span class="number">5</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 ,<span class="keyword">OUT</span> <span class="keyword">num</span> <span class="built_in">INT</span>)</span><br><span class="line">  <span class="keyword">BEGIN</span></span><br><span class="line">  <span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) <span class="keyword">INTO</span> <span class="keyword">num</span> <span class="keyword">FROM</span> student <span class="keyword">WHERE</span> v_sex=sex;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CALL</span> u_pro(<span class="string">&#x27;男&#x27;</span>,@<span class="keyword">num</span>);</span><br><span class="line"><span class="keyword">SELECT</span> @<span class="keyword">num</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 计算1+到n的值</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> addresult(<span class="keyword">IN</span> n <span class="built_in">INT</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  <span class="keyword">DECLARE</span> i <span class="built_in">INT</span>;</span><br><span class="line">  <span class="keyword">DECLARE</span> <span class="keyword">sum</span> <span class="built_in">INT</span>;</span><br><span class="line">  <span class="keyword">SET</span> <span class="keyword">sum</span> =<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">SET</span> i =<span class="number">1</span>;</span><br><span class="line">  </span><br><span class="line">  WHILE i&lt;n DO</span><br><span class="line">  <span class="keyword">SET</span> <span class="keyword">sum</span>=<span class="keyword">sum</span>+i;</span><br><span class="line">  <span class="keyword">SET</span> i=i+<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">END</span> <span class="keyword">WHILE</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">SELECT</span> <span class="keyword">sum</span> ;</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">call</span> addresult(<span class="number">50</span>);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 计算1+到n的值</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> addresult2(<span class="keyword">in</span> n <span class="built_in">INT</span>,<span class="keyword">out</span> <span class="keyword">sum</span> <span class="built_in">INT</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  <span class="keyword">DECLARE</span> i <span class="built_in">INT</span>;</span><br><span class="line">  <span class="keyword">DECLARE</span> <span class="keyword">sum</span> <span class="built_in">INT</span>;</span><br><span class="line">  <span class="keyword">SET</span> <span class="keyword">sum</span> =<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">SET</span> i =<span class="number">1</span>;</span><br><span class="line">  </span><br><span class="line">  WHILE i&lt;n DO</span><br><span class="line">  <span class="keyword">SET</span> <span class="keyword">sum</span>=<span class="keyword">sum</span>+i;</span><br><span class="line">  <span class="keyword">SET</span> i=i+<span class="number">1</span>;</span><br><span class="line">  <span class="keyword">END</span> <span class="keyword">WHILE</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">SELECT</span> <span class="keyword">sum</span> ;</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">call</span> addresult2(<span class="number">50</span>,@<span class="keyword">sum</span>);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 判断变量</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> user_main_pro3(INOUT v_id <span class="built_in">INT</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  <span class="comment"># 定义变量</span></span><br><span class="line">  <span class="keyword">DECLARE</span> v_count <span class="built_in">INT</span>(<span class="number">11</span>);</span><br><span class="line">  <span class="comment"># 判断</span></span><br><span class="line">  IF v_id &gt; 3 THEN</span><br><span class="line">     <span class="keyword">SET</span> v_count = <span class="number">100</span>;</span><br><span class="line">  ELSE </span><br><span class="line">     <span class="keyword">SET</span> v_count = <span class="number">500</span>;</span><br><span class="line">  <span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line">  <span class="comment"># 返回赋值</span></span><br><span class="line">  <span class="keyword">SET</span> v_id = v_count;</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> @v_id=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">call</span> user_main_pro3(@v_id);</span><br><span class="line"><span class="keyword">SELECT</span> @v_id;</span><br></pre></td></tr></table></figure><h2 id="事务处理">事务处理</h2><h3 id="注意点">注意点</h3><p><strong>MySQL中Innodb支持事务，而MyISAM不支持事务</strong></p><h3 id="事务的特性：">事务的特性：</h3><ol><li>原子性（Atomicity）：事务开始后的所有操作，要么全部做完，要么全部不做。事务执行过程中出错，会回滚到事务开始前的状态，所有的操作就像没有发生一样。</li><li>一致性（Consistency）：事务开始前和结束后，数据库的完整性约束没有被破坏 。比如A向B转账，不可能A扣了钱，B却没收到。</li><li>隔离性（Isolation）：同一时间，只允许一个事务请求同一数据，不同的事务之间彼此没有任何干扰。比如A正在从一张银行卡中取钱，在A取钱的过程结束前，B不能向这张卡转账。</li><li>持久性（Durability）：事务完成后，事务对数据库的所有更新将被保存到数据库，不能回滚。</li></ol><h3 id="并发问题">并发问题</h3><ol><li>脏读：事务A读取了事务B更新的数据，然后B回滚操作，那么A读取到的数据是脏数据</li><li>不可重复读：事务 A 多次读取同一数据，事务 B 在事务A多次读取的过程中，对数据作了更新并提交，导致事务A多次读取同一数据时，结果 不一致。</li><li>幻读：系统管理员A将数据库中所有学生的成绩从具体分数改为ABCDE等级，但是系统管理员B就在这个时候插入了一条具体分数的记录，当系统管理员A改结束后发现还有一条记录没有改过来，就好像发生了幻觉一样，这时就叫幻读。</li></ol><p><strong>注:不可重复读的和幻读很容易混淆，不可重复读侧重于修改，幻读侧重于新增或删除。解决不可重复读的问题只需锁住满足条件的行，解决幻读需要锁表</strong></p><h3 id="事务隔离级别">事务隔离级别</h3><table><thead><tr><th style="text-align:left">事务隔离级别</th><th style="text-align:right">脏读</th><th style="text-align:center">不可重复读</th><th style="text-align:center">幻读</th></tr></thead><tbody><tr><td style="text-align:left">读未提交（read-uncommitted）</td><td style="text-align:right">是</td><td style="text-align:center">是</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">不可重复读（read-committed）</td><td style="text-align:right">否</td><td style="text-align:center">是</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">可重复读（repeatable-read）</td><td style="text-align:right">否</td><td style="text-align:center">否</td><td style="text-align:center">是</td></tr><tr><td style="text-align:left">串行化（serializable）</td><td style="text-align:right">否</td><td style="text-align:center">否</td><td style="text-align:center">否</td></tr></tbody></table><p><strong>设置隔离级别：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">SESSION</span> <span class="keyword">TRANSACTION</span> <span class="keyword">ISOLATION</span> <span class="keyword">LEVEL</span> <span class="keyword">READ</span> UNCOMMITTED;</span><br></pre></td></tr></table></figure><p>只有增删改语句才支持事务</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 数据库 </tag>
            
            <tag> 存储过程 </tag>
            
            <tag> 视图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 查询</title>
      <link href="post/89bbd8d4.html"/>
      <url>post/89bbd8d4.html</url>
      
        <content type="html"><![CDATA[<h2 id="连接查询">连接查询</h2><p><strong>在数据库中join操作被称为连接，作用是能连接多个表的数据（通过连接条件），从多个表中获取数据合并在一起作为结果集返回给客户端。</strong></p><h3 id="交叉连接">交叉连接</h3><p><strong>交叉连接：将两张表的数据与另外一张表彼此交叉</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> 表<span class="number">1</span> <span class="keyword">cross</span> <span class="keyword">join</span> 表<span class="number">2</span></span><br><span class="line">eg：</span><br><span class="line"><span class="keyword">select</span> class.cname, student.sname <span class="keyword">from</span> student <span class="keyword">cross</span> <span class="keyword">join</span> <span class="keyword">class</span> <span class="keyword">on</span> class.cid =</span><br><span class="line">student.classid;</span><br><span class="line"><span class="comment">--其中的on代表两个表的连接条件</span></span><br></pre></td></tr></table></figure><h3 id="内连接">内连接</h3><p><img src= "/img/loading.gif" data-lazy-src="https://miraitowa.oss-cn-chengdu.aliyuncs.com/img/miraitowa-mysql-inner-join.png" alt="inner-join"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">方式一：</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> 表<span class="number">1</span>,表<span class="number">2</span> <span class="keyword">where</span> 表<span class="number">1.</span>列=表<span class="number">2.</span>列</span><br><span class="line">方式二：</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> 表<span class="number">1</span></span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> 表<span class="number">2</span> <span class="keyword">on</span> 表<span class="number">1.</span>列=表<span class="number">2.</span>列</span><br></pre></td></tr></table></figure><h3 id="外连接">外连接</h3><h4 id="左连接">左连接</h4><p>左连接基础语法是 <code>a left outer join b </code>，其中的 <code>outer</code> 可以省略，与内连接相比就是在与内连接相<br>同条件下，在内连接的结果集中添加<code>a</code>表在<code>b</code>表中找不到匹配的记录，换句话说就是，结果集中会包含<code>a</code>表中的所有记录，如果<code>b</code>表中有匹配的记录就出现在结果集，否则使用 <code>NULL</code> 代替，也就是把<code>a</code>表看成根本，不可缺失记录。<br><img src= "/img/loading.gif" data-lazy-src="https://miraitowa.oss-cn-chengdu.aliyuncs.com/img/miraitowa-mysql-left-join.png" alt="left-join"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> 表<span class="number">1</span></span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> 表<span class="number">2</span> <span class="keyword">on</span> 表<span class="number">1.</span>列=表<span class="number">2.</span>列</span><br></pre></td></tr></table></figure><h4 id="右连接">右连接</h4><p>右外连接基础语法是 <code>a right outer join b </code>，其中的 <code>outer</code> 可以省略，与内连接相比就是在与内连<br>接相同条件下，在内连接的结果集中添加b表在a表中找不到匹配的记录，换句话说就是，结果集中会包含b表中的所有记录，如果a表中有匹配的记录就出现在结果集，否则使用 NULL 代替，也就是把b表看成根本，不可缺失记录，作用与左外连接恰好相反。<br><img src= "/img/loading.gif" data-lazy-src="https://miraitowa.oss-cn-chengdu.aliyuncs.com/img/miraitowa-mysql-right-join.png" alt="right-join"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> 表<span class="number">1</span></span><br><span class="line"><span class="keyword">right</span> <span class="keyword">join</span> 表<span class="number">2</span> <span class="keyword">on</span> 表<span class="number">1.</span>列=表<span class="number">2.</span>列</span><br></pre></td></tr></table></figure><h3 id="自连接">自连接</h3><p>自连接就是表与它自身相关联，进行自连接时通过给表起不同的别名来区分一个表的两个实例。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 表.字段<span class="number">1</span>,表.字段<span class="number">2</span>,表.字段<span class="number">3</span> </span><br><span class="line"><span class="keyword">from</span> 表<span class="number">1</span> <span class="keyword">as</span> 别名,表<span class="number">2</span> <span class="keyword">as</span> 别名 </span><br><span class="line"><span class="keyword">where</span> 别名.字段<span class="number">2</span>=别名<span class="number">2.</span>字段<span class="number">3</span>；</span><br></pre></td></tr></table></figure><h2 id="子查询">子查询</h2><p>子查询指嵌套在查询内部，且必须始终出现在圆括号。子查询可以包含多个关键字或条件，如<br><code>DISTINCT</code>、<code>GROUP BY</code>、<code>ORDER BY</code>、<code>LIMIT</code>、<code>函数</code>等。<br>子查询的外层查询可以是：<code>SELECT</code>，<code>INSERT</code>，<code>UPDATE</code>，<code>SET或DO</code>。<br>子查询可以返回标量，一行，一列或子查询。</p><h3 id="将子查询作为派生表">将子查询作为派生表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> 表<span class="number">1</span> <span class="keyword">where</span> 字段<span class="number">1</span> = （<span class="keyword">select</span> 字段<span class="number">2</span> <span class="keyword">from</span> 表<span class="number">2</span>）;</span><br></pre></td></tr></table></figure><h3 id="把子查询用在where子句中">把子查询用在where子句中</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">eg：</span><br><span class="line"><span class="keyword">select</span> ename,sal <span class="keyword">from</span> emp <span class="keyword">where</span> sal&gt;(<span class="keyword">select</span> <span class="keyword">avg</span>(sal) <span class="keyword">form</span> emp);</span><br></pre></td></tr></table></figure><h3 id="在from语句中使用子查询">在from语句中使用子查询</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">eg：</span><br><span class="line"><span class="keyword">select</span> t.deptno,t.avgsal,s.grade</span><br><span class="line"><span class="keyword">from</span> (<span class="keyword">select</span> deptno,<span class="keyword">avg</span>(sal) <span class="keyword">as</span> avgsal <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> deptno) t</span><br><span class="line"><span class="keyword">join</span> salgrade s</span><br><span class="line"><span class="keyword">on</span> t.avgsal <span class="keyword">between</span> s.losal <span class="keyword">and</span> s.hisal;</span><br></pre></td></tr></table></figure><h2 id="集合操作-UNION">集合操作(UNION)</h2><p><strong>union  作用：合并查询结果集</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Eg：</span><br><span class="line"><span class="keyword">select</span> ename,job <span class="keyword">from</span> emp <span class="keyword">where</span> job=<span class="string">&#x27;manager&#x27;</span></span><br><span class="line"><span class="keyword">union</span></span><br><span class="line"><span class="keyword">select</span> ename,job <span class="keyword">from</span> emp <span class="keyword">where</span> job=<span class="string">&#x27;salesman&#x27;</span>;</span><br></pre></td></tr></table></figure><p><strong>limit</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">limit 起始下标，长度</span><br><span class="line">如果起始下标没有指定，默认从0开始，0表示表中第一条记录。</span><br><span class="line">Eg：</span><br><span class="line"><span class="comment">--按照工资降序排列取前5个</span></span><br><span class="line"><span class="keyword">select</span> ename,sal <span class="keyword">from</span> emp <span class="keyword">order</span> <span class="keyword">by</span> sal <span class="keyword">desc</span> <span class="keyword">limit</span> <span class="number">5</span>;</span><br></pre></td></tr></table></figure><p><strong>通用的分页SQL(只适用于mysql数据库管理系统)</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> t.* <span class="keyword">from</span> t</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> t.x <span class="keyword">desc</span>/<span class="keyword">asc</span></span><br><span class="line"><span class="keyword">limit</span> (pageNo<span class="number">-1</span>)*pageSize,pageSize;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 数据库 </tag>
            
            <tag> 查询 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 数据库基本操作</title>
      <link href="post/e82256d5.html"/>
      <url>post/e82256d5.html</url>
      
        <content type="html"><![CDATA[<h2 id="数据库和表操作">数据库和表操作</h2><h3 id="创建数据库">创建数据库</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> 数据库名称;</span><br></pre></td></tr></table></figure><p><strong>注意事项：</strong></p><ol><li><strong>information_schema是MySQL自带的数据库，存储MySQL服务器管理的信息；</strong></li><li><strong>mysql是MySQL的系统数据库；</strong></li><li><strong>test是用户学习和测试练习使用的数据库；</strong></li><li><strong>MySQL中的数据库名称不能超过64字符，不能由纯数字组成，不能包含：“/”、“:”、“*”、“?”、“&gt;”、“&lt;”等符号；</strong></li><li><strong>如果要创建的数据库名称已经存在，也会发生错误。（可以用”if exists 数据库名称 ”来判断是否存在，以避免发生错误）。Eg:</strong></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 判断student数据库存在就删除</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">database</span> <span class="keyword">if</span> <span class="keyword">exists</span> student; </span><br><span class="line"><span class="comment">-- 重新创建student数据库</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> student;</span><br><span class="line"><span class="comment">-- 创建数据库后，如果需要使用数据库，使用：”use 数据库名；”如：use student;</span></span><br></pre></td></tr></table></figure><h3 id="删除数据库">删除数据库</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">database</span> 数据库名称；</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Eg： <span class="keyword">drop</span> <span class="keyword">database</span> <span class="keyword">user</span>; <span class="comment">-- 删除了名叫“user”的数据库；</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">database</span> <span class="keyword">if</span> <span class="keyword">exists</span> <span class="keyword">user</span>; <span class="comment">-- 也可以用if exists做判断，避免发生错误；</span></span><br></pre></td></tr></table></figure><h3 id="创建表">创建表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名(</span><br><span class="line">  字段名称<span class="number">1</span> 数据类型 [ <span class="literal">null</span> / <span class="keyword">not</span> <span class="literal">null</span> ] [ <span class="keyword">DEFAULT</span> 默认值 ] [ AUTO_INCREMENT ] [ PRIMARY_KEY ] [ <span class="keyword">COMMENT</span> ‘注释内容’ ] ,</span><br><span class="line">......</span><br><span class="line">  字段名称N 数据类型 [ <span class="literal">null</span> / <span class="keyword">not</span> <span class="literal">null</span> ] [ <span class="keyword">DEFAULT</span> 默认值 ] [ AUTO_INCREMENT ] [ PRIMARY_KEY ] [ <span class="keyword">COMMENT</span> ‘注释内容’ ]</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Eg:</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">exists</span> teacher ; <span class="comment">-- 首先判断是否存在teacher表，如果存在就删除</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> teacher(</span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span> auto_increment primary <span class="keyword">key</span> ,</span><br><span class="line">  <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="literal">null</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 创建了teacher表，里面有int、 name两个字段, 其中id是主键，非空，自增</span></span><br><span class="line"><span class="comment">-- 创建数据库后，如果需要使用数据库，使用：”use 数据库名；”如：use teacher;</span></span><br></pre></td></tr></table></figure><h3 id="删除表">删除表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> 表名;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Eg: <span class="keyword">drop</span> <span class="keyword">table</span> teacher;</span><br><span class="line">或者删除多个表格： <span class="keyword">drop</span> <span class="keyword">table</span> teacher, student;</span><br></pre></td></tr></table></figure><h3 id="复制表">复制表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">完全复制的格式：</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表<span class="number">02</span> <span class="keyword">select</span> * <span class="keyword">from</span> 表<span class="number">01</span>;</span><br><span class="line">Eg: <span class="keyword">create</span> <span class="keyword">table</span> teacher02 <span class="keyword">select</span> * <span class="keyword">from</span> teacher;</span><br><span class="line"><span class="comment">-- 复制一张和teacher表完全一样的teacher02表；</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">复制指定列的格式：</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表<span class="number">02</span> <span class="keyword">select</span> 字段a，字段b，...... <span class="keyword">from</span> 表<span class="number">01</span>;</span><br><span class="line">Eg: <span class="keyword">create</span> <span class="keyword">table</span> teacher02 <span class="keyword">select</span> <span class="keyword">id</span>, <span class="keyword">name</span> <span class="keyword">from</span> teacher;</span><br><span class="line"><span class="comment">-- 复制一张teacher02表，里面包含teacher表里的id，name；</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">完全复制表结构（包括键key），但是不复制里面的内容，格式是：</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表<span class="number">02</span> <span class="keyword">like</span> 表<span class="number">01</span>;</span><br><span class="line">Eg: <span class="keyword">create</span> <span class="keyword">table</span> teacher02 <span class="keyword">like</span> teacher;</span><br><span class="line"><span class="comment">-- 复制一张teacher02表，其结构和teacher表相同，但没有teacher里的内容；</span></span><br></pre></td></tr></table></figure><h3 id="修改表">修改表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">1. 增加字段：add</span><br><span class="line">Eg: <span class="keyword">alter</span> <span class="keyword">table</span> teacher <span class="keyword">add</span> age <span class="built_in">int</span> <span class="literal">null</span>; <span class="comment">-- 添加age列，int类型，可以为null；  </span></span><br><span class="line"></span><br><span class="line">2. 删除字段：<span class="keyword">drop</span></span><br><span class="line">Eg: <span class="keyword">alter</span> <span class="keyword">table</span> teacher <span class="keyword">drop</span> age; <span class="comment">-- 删除age列；  </span></span><br><span class="line"></span><br><span class="line">3.修改字段：<span class="keyword">change</span></span><br><span class="line">Eg: <span class="keyword">alter</span> <span class="keyword">table</span> teacher <span class="keyword">change</span> <span class="keyword">name</span> teacher_name <span class="built_in">varchar</span>(<span class="number">30</span>) <span class="keyword">not</span> <span class="literal">null</span>;</span><br><span class="line"><span class="comment">-- 修改name列为teacher_name，varchar类型最大30个字符，不能为null；</span></span><br><span class="line"></span><br><span class="line">4. 增加主键：add primary key()</span><br><span class="line">Eg: <span class="keyword">alter</span> <span class="keyword">table</span> teacher <span class="keyword">add</span> primary <span class="keyword">key</span>(<span class="keyword">id</span>); <span class="comment">-- 设置id为主键（id是已有字段）；</span></span><br><span class="line"></span><br><span class="line">5. 修改表名：<span class="keyword">rename</span> <span class="keyword">to</span></span><br><span class="line">Eg: <span class="keyword">alter</span> <span class="keyword">table</span> teacher <span class="keyword">rename</span> <span class="keyword">to</span> <span class="keyword">user</span>; <span class="comment">-- 把teacher表改名为user；</span></span><br></pre></td></tr></table></figure><h2 id="数据完整性">数据完整性</h2><p><code>数据完整性的概念：确保数据正确性和一致性的机制。</code></p><ol><li>域完整性：即列的完整性。如：年龄不能超过150岁，id不能为null。</li><li>实体完整性：即行的完整性。如：实体“张三”具有区别于实体“李四”的特征。</li><li>参照完整性：主关系表（被参照表）和从关系表（参照表）中数据的一致性。</li><li>用户定义完整性：用户根据具体需求来定义约束条件。</li></ol><h2 id="使用SQL语句为表创建和删除约束">使用SQL语句为表创建和删除约束</h2><p>如果要修改已创建的约束，最简单实用的方式就是先删除已有的约束，再建立同名的约束。</p><h3 id="添加约束：">添加约束：</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">格式：<span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> [<span class="keyword">constraint</span>] [约束名称] 约束类型（约束内容[可多个字段]）;</span><br></pre></td></tr></table></figure><h4 id="主键约束">主键约束</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">主键约束: </span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">user</span> <span class="keyword">add</span> <span class="keyword">constraint</span> PK_user_id primary <span class="keyword">key</span>(<span class="keyword">id</span>);</span><br><span class="line"><span class="comment">-- 把user表的id添加主键约束，约束名称是PK_user_id。（PK是主键的简写）</span></span><br><span class="line"></span><br><span class="line">设置联合主键的方式：</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">user</span> <span class="keyword">add</span> primary <span class="keyword">key</span>(<span class="keyword">id</span>，<span class="keyword">name</span>);</span><br><span class="line"><span class="comment">-- 设置了联合主键id和name； 补充： 在创建表的时候也可以直接设置主键约束。</span></span><br></pre></td></tr></table></figure><h4 id="唯一约束">唯一约束</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">唯一约束：<span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> [<span class="keyword">constraint</span>] <span class="keyword">unique</span>(<span class="keyword">id</span>);</span><br></pre></td></tr></table></figure><h4 id="默认约束">默认约束</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">默认约束：<span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">alter</span> <span class="keyword">column</span>列名 <span class="keyword">set</span> <span class="keyword">DEFAULT</span> 默认值;</span><br><span class="line"><span class="comment">-- 默认值可以为常量或者为空（null）；</span></span><br></pre></td></tr></table></figure><h4 id="检查约束">检查约束</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">检查约束：（与SQL Server中的检查约束有语法区别）可以使用**枚举**。</span><br><span class="line">Eg：<span class="keyword">create</span> <span class="keyword">table</span> student ( ...... sex **enum**(‘男’, ‘女’) <span class="keyword">not</span></span><br><span class="line"><span class="literal">null</span> <span class="comment">-- 学员性别 );</span></span><br><span class="line"><span class="comment">-- 默认值可以为常量或者为空（null）；</span></span><br></pre></td></tr></table></figure><h4 id="外键约束">外键约束</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">外键约束： 格式：<span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> <span class="keyword">constraint</span> 约束名称 约束类型;</span><br><span class="line">(外键约束简称为“FK”)</span><br><span class="line">Eg：<span class="keyword">alter</span> <span class="keyword">table</span> student <span class="keyword">add</span> <span class="keyword">constraint</span> FK_student_class_classid <span class="keyword">foreign</span> <span class="keyword">key</span> (classid) <span class="keyword">references</span> <span class="keyword">class</span>(classid);</span><br><span class="line"><span class="comment">-- 为student表所在的班级字段classid设置了外键约束。</span></span><br><span class="line"></span><br><span class="line">创建时设置外键：</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student ( </span><br><span class="line">...... </span><br><span class="line">classid <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span>, <span class="keyword">foreign</span> <span class="keyword">key</span>(classid) <span class="keyword">references</span> <span class="keyword">class</span>(classid) </span><br><span class="line"><span class="comment">-- 设置名称为classid的外键，指向class表的classid； </span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="设置级联操作">设置级联操作</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">设置级联操作：</span><br><span class="line">restrict和no action表示在子表有关联记录的情况下父表不能更新；</span><br><span class="line">cascade 表示父表在更新或者删除时，同时更新或删除子表对应的记录；</span><br><span class="line"><span class="keyword">set</span> <span class="literal">null</span> 表示父表在更新或者删除时，子表对应的字段设置为<span class="literal">null</span>；</span><br><span class="line"></span><br><span class="line">Eg：</span><br><span class="line">(<span class="number">1</span>).alter <span class="keyword">table</span> student <span class="keyword">add</span> <span class="keyword">constraint</span> FK_student_class_classid <span class="keyword">foreign</span> <span class="keyword">key</span> (classid) <span class="keyword">references</span> <span class="keyword">class</span>(classid) <span class="keyword">on</span> <span class="keyword">delete</span> <span class="keyword">set</span> <span class="literal">null</span>;</span><br><span class="line"><span class="comment">-- 如：删除class表中classid=1对应的字段时，student表中的classid字段的值设置为null</span></span><br><span class="line"></span><br><span class="line">(2).alter table student add constraint FK_student_class_classid foreign key (classid) references class(classid) on <span class="keyword">delete</span> <span class="keyword">set</span> <span class="keyword">cascade</span>;</span><br><span class="line"><span class="comment">-- 如：删除class表中classid=1对应的字段时，同时删除student表中所有classid=1的该行数据。</span></span><br></pre></td></tr></table></figure><h3 id="删除约束">删除约束</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">语法：<span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">drop</span> [<span class="keyword">constraint</span>] 约束名称;</span><br><span class="line"><span class="comment">-- constraint关键字可省略 -- 如果将表删除了，那么相关的约束也就删除了。</span></span><br><span class="line"></span><br><span class="line">Eg01: <span class="keyword">alter</span> <span class="keyword">table</span> student <span class="keyword">drop</span> primary <span class="keyword">key</span>;</span><br><span class="line"><span class="comment">-- 存在一个主键约束，可用此操作；</span></span><br><span class="line"></span><br><span class="line">Eg02: <span class="keyword">alter</span> <span class="keyword">table</span> student <span class="keyword">drop</span> <span class="keyword">foreign</span> <span class="keyword">key</span> FK_class_student_id；</span><br><span class="line"><span class="comment">-- 删除外键</span></span><br></pre></td></tr></table></figure><h2 id="数据操作">数据操作</h2><h3 id="插入数据：">插入数据：</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--（最常用）</span></span><br><span class="line"><span class="comment">-- 插入值的顺序必须与表中字段的顺序完全一致。</span></span><br><span class="line">1. &quot;insert...values&quot;</span><br><span class="line">语法：<span class="keyword">insert</span> <span class="keyword">into</span> 表名 <span class="keyword">values</span>(值);</span><br><span class="line"></span><br><span class="line"><span class="comment">--插入一行数据</span></span><br><span class="line">Eg01: <span class="keyword">insert</span> <span class="keyword">into</span> student <span class="keyword">values</span> (<span class="number">1</span>, ‘zhangsan’ );</span><br><span class="line"></span><br><span class="line"><span class="comment">--插入多行数据，用逗号隔开；</span></span><br><span class="line">Eg02: <span class="keyword">insert</span> <span class="keyword">into</span> student <span class="keyword">values</span> (<span class="number">2</span>,‘jack’)，(<span class="number">3</span>, ‘rose’);</span><br><span class="line"></span><br><span class="line">补充：当插入的记录会引发主键或唯一约束冲突时，可以用 **on duplicate key update** 条件。</span><br><span class="line">Eg: <span class="keyword">insert</span> <span class="keyword">into</span> student <span class="keyword">values</span> (<span class="number">1</span>, ‘mike’ ) **<span class="keyword">on</span> <span class="keyword">duplicate</span> <span class="keyword">key</span> <span class="keyword">update</span> <span class="keyword">id</span> =<span class="number">10</span>**;</span><br><span class="line"><span class="comment">-- 由于id是主键，id=1与上面zhangsan行冲突，所以自动把zhangsan的id设置为10，然后再把id=1的mike数据插入进去；</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 按照每一列对应的值插入数据</span></span><br><span class="line">2. ”insert...set”</span><br><span class="line">语法：<span class="keyword">insert</span> <span class="keyword">into</span> 表名 <span class="keyword">set</span> 列名<span class="number">1</span>=值<span class="number">1</span>, 列名<span class="number">2</span>=值<span class="number">2</span>,......;</span><br><span class="line"></span><br><span class="line"><span class="comment">--插入的数据是：id为5，姓名’abc’ 3）”insert...select”</span></span><br><span class="line"><span class="comment">-- 把从其他表查询到的数据插入到该表中，类似于like属性 Eg01: insert into user</span></span><br><span class="line">Eg01: <span class="keyword">insert</span> <span class="keyword">into</span> student <span class="keyword">set</span> <span class="keyword">id</span> =<span class="number">5</span>, <span class="keyword">name</span>=’abc’;</span><br><span class="line"></span><br><span class="line"><span class="comment">--把从student中查询到的数据插入到user中；</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> student;</span><br></pre></td></tr></table></figure><h3 id="更新数据">更新数据</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">格式：<span class="keyword">update</span> 表名 <span class="keyword">set</span> 列名<span class="number">1</span>=值<span class="number">1</span> [,列名<span class="number">2</span>=值<span class="number">2</span>,......] [where...] [<span class="keyword">order</span> by...] [<span class="keyword">limit</span> 行数]</span><br><span class="line"><span class="comment">--把id=3的列的name改为wangwu；</span></span><br><span class="line">eg： <span class="keyword">update</span> student <span class="keyword">set</span> <span class="keyword">name</span> = <span class="string">&#x27;wangwu&#x27;</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">003</span>;</span><br></pre></td></tr></table></figure><h3 id="删除数据">删除数据</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">格式：<span class="keyword">delete</span> <span class="keyword">from</span> 表名 <span class="keyword">where</span> 列名=值；</span><br><span class="line"><span class="comment">--删除id＝３的列的数据。</span></span><br><span class="line">eg：<span class="keyword">delete</span> <span class="keyword">from</span> student <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">3</span>；</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 增删改查 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 存储引擎和数据类型</title>
      <link href="post/afb0e9ab.html"/>
      <url>post/afb0e9ab.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、MySQL的存储引擎">一、MySQL的存储引擎</h2><p><strong>在MySQL这种关系型数据库来说，数据是以表的方式来存储的，因此，简单点来说，存储引擎就是存储和操作此表的类型。</strong></p><h3 id="存储引擎的种类">存储引擎的种类</h3><ol><li><code>InnoDB</code>存储引擎 <code>事务型</code>数据库引擎，提供了<code>事务</code>、<code>回滚</code>、<code>崩溃修复</code>能力、<code>多版本并发控制的事务安全</code>。在<code>MySQL 5.5版本开始</code>成为默认存储引擎。</li><li><code>MyISAM</code>存储引擎 MyISAM存储引擎是MySQL中常见的存储引擎，是<code>MySQL 5.0之前</code>版本的<code>默认</code>存储引擎。<code>不支持事务</code>。</li><li><code>MEMORY</code>存储引擎 MEMORY存储引擎是MySQL中的一个特殊的存储引擎。所有数据放在<code>内存</code>中，拥有极高的<code>插入</code>、<code>更新</code>、<code>查询效率</code>。会占用与数据量成正比的内存空间。MySQL<code>重启后数据会丢失</code>。</li></ol><h2 id="二、MySQL-数据类型">二、MySQL 数据类型</h2><table><thead><tr><th>分类</th><th>数据类型</th><th>范例格式</th></tr></thead><tbody><tr><td>整型</td><td>int</td><td>100</td></tr><tr><td>浮点型</td><td>double</td><td>9.9</td></tr><tr><td>字符串型</td><td>varchar (20)</td><td>‘云南省昆明市’</td></tr><tr><td>日期类型</td><td>date</td><td>‘2019-09-09’</td></tr><tr><td>datetime (timestamp)</td><td></td><td>‘2019-09-09 10:20:30’</td></tr></tbody></table><h2 id="三、MySQL-数据类型属性">三、MySQL 数据类型属性</h2><table><thead><tr><th>属性名称</th><th>作用</th><th>使用的数据类型范</th></tr></thead><tbody><tr><td>PRIMARY KEY</td><td>主键，确保该行的唯一性。（常与 AUTO_INCREMENT合用）</td><td>所有数据类型</td></tr><tr><td>AUTO_INCREMENT</td><td>为新插入的行赋上唯一的整数标识符。</td><td>整数（如ID）</td></tr><tr><td>UNIQUE</td><td>确保该列所有值都不同。(NULL值可以重复)</td><td>所有数据类型</td></tr><tr><td>NOT NULL</td><td>不允许该列为NULL。 —&gt;null 表示该列不存在值</td><td>所有数据类型</td></tr><tr><td>NULL</td><td>允许该列为NULL。</td><td>所有数据类型</td></tr><tr><td>ZEROFILL</td><td>用0填充剩余字段空间，如INT类型的表示为： 0000000008</td><td>所有数据类型</td></tr><tr><td>BINARY</td><td>对字符串以区分大小写的方式排序。（按照ASCII 表）</td><td>CHAR, VARCHAR</td></tr><tr><td>DEFAULT</td><td>在没有任何值的情况下，赋予某个常量。</td><td>BLOB和TEXT列*不 可用</td></tr><tr><td>INDEX</td><td>为该列创建一个索引。（有序的键值组）</td><td>所有数据类型</td></tr><tr><td>NATIONAL</td><td>确保该列使用默认字符集。</td><td>CHAR, VARCHAR</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 存储引擎 </tag>
            
            <tag> 数据类型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>好像很久没真正快乐过了…</title>
      <link href="post/28c4837c.html"/>
      <url>post/28c4837c.html</url>
      
        <content type="html"><![CDATA[    <div id="aplayer-nUyTRXNT" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="425570055" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"    ></div><h2 id="好像很久没真正快乐过了">好像很久没真正快乐过了</h2><p>以前，总认为生活中的一切好，都可以在努力之后得到，后来发现，自己用尽一切努力都得不到的东西，总有人能够很轻松拥有，所以，不那么相信努力的意义了。</p><p>以前总觉得会有真诚的朋友，会用真心换来真心，后来发现，自己所看中的朋友只是那些在集赞，砍价，投票时能够给我随手传发一个链接的人，仅此而已。我好像不那么需要朋友了。</p><p>以前总是很容易被人看穿，听不懂言外之意，也不用去揣摩别人的心思，而现在，要做一个懂得倾听，学会伪装，喜怒不形于色，不那么轻易被人看穿的人，这样才不会被轻易利用和欺骗，多了钝感力，也多了共情力和同理心，只是不想那么单纯，那么真实了。</p><p>我怀恋的，是那个对朋友毫无保留的我，是那个可以很直接表现自己不满意的我，是那个不用听懂别人言外之意的我，是那个在雪地里用冻僵的手给他回复消息，给他打电话的我，那个快乐的我。</p><p>可是现在，我只想成为一个懂得保护自己，成为一个不那么轻易受伤的人。</p><p>快乐，从来都是奢侈品，不难过已经是难得。</p><p>好像很久没真正快乐过了…</p>]]></content>
      
      
      <categories>
          
          <category> 生活随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> 碎碎念 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>逝去的大一时光</title>
      <link href="post/25f8a447.html"/>
      <url>post/25f8a447.html</url>
      
        <content type="html"><![CDATA[<h2 id="日月忽其不淹兮，春与秋其代序">日月忽其不淹兮，春与秋其代序</h2><p>大学时间真的很短暂、很让人难以忘怀啊，不知不觉大一就已经过去了，让我不得不感叹时间的力量，感觉自己还什么都没做，就已经浑浑噩噩的度过了一个学期。正像大家所说的“高中忙的理所应当，大学忙的不知所以”。</p><p>现在去回忆过去的一年的点点滴滴，学习什么的似乎也没学到什么，甚至已经忘了上学期的内容,忘了曾经的信誓旦旦,忘了曾说过的要改变自己…</p><h2 id="怀念那年的夏天还是怀念那年的人">怀念那年的夏天还是怀念那年的人</h2><p>一次高考，考散了一拨人，可能这辈子都无法再见到。曾经无时无刻不想要挣脱的被自己在心里骂了一万遍的高中，现在发现却是我们再也回不去的天堂。</p><p>现在的我是真的很怀念高中生活。虽然高中的时候每天困到不行，六七点就要起床，十一二点才下晚自习，但那时生活却是充实、简单，快乐的。不用为了不挂科焦头烂额，只要努力学习考个好成绩就能开心很久。不像现在的生活，忙忙碌碌，无所事事，没有目标。</p><h2 id="日常美好生活碎片">日常美好生活碎片</h2><ul><li>时常开心，认真记录，发现光芒！</li></ul><div class="justified-gallery"><p><img src= "/img/loading.gif" data-lazy-src="https://miraitowa.oss-cn-chengdu.aliyuncs.com/img/miraitowa-d1-img1.jpg" alt=""><br><img src= "/img/loading.gif" data-lazy-src="https://miraitowa.oss-cn-chengdu.aliyuncs.com/img/miraitowa-d1-img2.jpg" alt=""><br><img src= "/img/loading.gif" data-lazy-src="https://miraitowa.oss-cn-chengdu.aliyuncs.com/img/miraitowa-d1-img3.jpg" alt=""><br><img src= "/img/loading.gif" data-lazy-src="https://miraitowa.oss-cn-chengdu.aliyuncs.com/img/miraitowa-d1-img4.jpg" alt=""><br><img src= "/img/loading.gif" data-lazy-src="https://miraitowa.oss-cn-chengdu.aliyuncs.com/img/miraitowa-d1-img5.jpg" alt=""><br><img src= "/img/loading.gif" data-lazy-src="https://miraitowa.oss-cn-chengdu.aliyuncs.com/img/miraitowa-d1-img7.jpg" alt=""><br><img src= "/img/loading.gif" data-lazy-src="https://miraitowa.oss-cn-chengdu.aliyuncs.com/img/miraitowa-d1-img8.jpg" alt=""><br><img src= "/img/loading.gif" data-lazy-src="https://miraitowa.oss-cn-chengdu.aliyuncs.com/img/miraitowa-d1-img9.jpg" alt=""><br><img src= "/img/loading.gif" data-lazy-src="https://miraitowa.oss-cn-chengdu.aliyuncs.com/img/miraitowa-d1-img10.jpg" alt=""><br><img src= "/img/loading.gif" data-lazy-src="https://miraitowa.oss-cn-chengdu.aliyuncs.com/img/miraitowa-d1-img11.jpg" alt=""><br><img src= "/img/loading.gif" data-lazy-src="https://miraitowa.oss-cn-chengdu.aliyuncs.com/img/miraitowa-d1-img12.jpg" alt=""><br><img src= "/img/loading.gif" data-lazy-src="https://miraitowa.oss-cn-chengdu.aliyuncs.com/img/miraitowa-d1-img13.jpg" alt=""><br><img src= "/img/loading.gif" data-lazy-src="https://miraitowa.oss-cn-chengdu.aliyuncs.com/img/miraitowa-d1-img14.jpg" alt=""><br><img src= "/img/loading.gif" data-lazy-src="https://miraitowa.oss-cn-chengdu.aliyuncs.com/img/miraitowa-d1-img15.jpg" alt=""></p>          </div><h2 id="岁月匆匆，惟愿总相逢">岁月匆匆，惟愿总相逢</h2><p>或许对于以后的我们来说这些东西都是微不足道的小事，但现在对于我们来说都十分重要，因为我们内心一直一直存有温柔，存有善意，存有美好一直小心翼翼的守护着自己最宝贵的东西。</p>]]></content>
      
      
      <categories>
          
          <category> 往事如烟 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-罗马数字转整数</title>
      <link href="post/fba23db0.html"/>
      <url>post/fba23db0.html</url>
      
        <content type="html"><![CDATA[<h2 id="罗马数字转整数">罗马数字转整数</h2><p><strong>罗马数字包含以下七种字符: <code>I</code>， <code>V</code>， <code>X</code>， <code>L</code>，<code>C</code>，<code>D</code> 和 <code>M</code>。</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">字符          数值</span><br><span class="line">I             1</span><br><span class="line">V             5</span><br><span class="line">X             10</span><br><span class="line">L             50</span><br><span class="line">C             100</span><br><span class="line">D             500</span><br><span class="line">M             1000</span><br></pre></td></tr></table></figure><p><strong>例如， 罗马数字 <code>2</code> 写做 <code>II</code> ，即为两个并列的 <code>1</code>。<code>12</code> 写做 <code>XII</code> ，即为 <code>X + II</code> 。 <code>27</code> 写做  <code>XXVII</code>, 即为 <code>XX + V + II</code> 。</strong></p><p><strong>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 <code>4</code> 不写做 <code>IIII</code>，而是 <code>IV</code>。数字 <code>1</code> 在数字 <code>5</code> 的左边，所表示的数等于大数 <code>5</code> 减小数 <code>1</code> 得到的数值 <code>4</code> 。同样地，数字 <code>9</code> 表示为 <code>IX</code>。这个特殊的规则只适用于以下六种情况：</strong></p><p><code>I</code> 可以放在 <code>V (5)</code> 和 <code>X (10)</code> 的左边，来表示 <code>4</code> 和 <code>9</code>。<br><code>X</code> 可以放在 <code>L (50)</code> 和 <code>C (100)</code> 的左边，来表示 <code>40</code> 和 <code>90</code>。 <br><code>C</code> 可以放在 <code>D (500)</code> 和 <code>M (1000)</code> 的左边，来表示 <code>400</code>和 <code>900</code>。<br>给定一个罗马数字，将其转换成整数。输入确保在 <code>1</code> 到 <code>3999</code>的范围内。</p><h4 id="示例-1">示例 1:</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: &quot;III&quot;</span><br><span class="line">输出: 3</span><br></pre></td></tr></table></figure><h4 id="示例-2">示例 2:</h4><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">输入: &quot;IV&quot;</span></span><br><span class="line"><span class="section">输出: 4</span></span><br></pre></td></tr></table></figure><h4 id="示例-3">示例 3:</h4><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">输入: &quot;IX&quot;</span></span><br><span class="line"><span class="section">输出: 9</span></span><br></pre></td></tr></table></figure><h4 id="示例-4">示例 4:</h4><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: <span class="string">&quot;LVIII&quot;</span></span><br><span class="line">输出: <span class="number">58</span></span><br><span class="line">解释: L = <span class="number">50</span>, V= <span class="number">5</span>, III = <span class="number">3.</span></span><br></pre></td></tr></table></figure><h4 id="示例-5">示例 5:</h4><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: <span class="string">&quot;MCMXCIV&quot;</span></span><br><span class="line">输出: <span class="number">1994</span></span><br><span class="line">解释: M = <span class="number">1000</span>, CM = <span class="number">900</span>, XC = <span class="number">90</span>, IV = <span class="number">4.</span></span><br></pre></td></tr></table></figure><h4 id="提示：">提示：</h4><ul><li>题目所给测试用例皆符合罗马数字书写规则，不会出现跨位等情况。</li><li>IC 和 IM 这样的例子并不符合题目要求，<code>49</code> 应该写作 <code>XLIX</code>，<code>999</code> 应该写作 <code>CMXCIX</code> 。</li><li>关于罗马数字的详尽书写规则，可以参考<a href="https://b2b.partcommunity.com/community/knowledge/zh_CN/detail/10753/%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97#knowledge_article">罗马数字 - Mathematics</a>。</li></ul><h2 id="解题思路">解题思路</h2><p><strong>仔细分析罗马数字的规律，会发现，罗马字母(<code>XII</code>)正常是从左到右按从大到小排列，当代表小数字(<code>I</code>)的字母在代表大数字的字母(<code>V</code>)左边时，这意味着两个字母代表一个数，而且是大数字减小数字的最终结果（<code>V-I</code>）。</strong></p><p><strong>所以，在做计算时，只需遍历判断下标为<code>i</code>的字母是否大于下标为<code>i+1</code>的字母，如果大于，则相加，如果小于，则需要减去当前这个数。</strong></p><h4 id="代码">代码</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">s</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> romanToInt = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> obj = &#123;</span><br><span class="line">        <span class="string">&#x27;I&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">&#x27;V&#x27;</span>: <span class="number">5</span>,</span><br><span class="line">        <span class="string">&#x27;X&#x27;</span>: <span class="number">10</span>,</span><br><span class="line">        <span class="string">&#x27;L&#x27;</span>: <span class="number">50</span>,</span><br><span class="line">        <span class="string">&#x27;C&#x27;</span>: <span class="number">100</span>,</span><br><span class="line">        <span class="string">&#x27;D&#x27;</span>: <span class="number">500</span>,</span><br><span class="line">        <span class="string">&#x27;M&#x27;</span>: <span class="number">1000</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>, len=s.length; i&lt;len; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> left = s[i],</span><br><span class="line">            right = s[i+<span class="number">1</span>],</span><br><span class="line">            newNum = obj[left]&lt;obj[right]? <span class="number">0</span> - obj[left]: obj[left];</span><br><span class="line">        num += newNum</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>18岁，成年了呀~</title>
      <link href="post/fae8.html"/>
      <url>post/fae8.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>  我一直知道有人爱我。十八年前的冬天，有人在漫天飞雪的日子里满心欢喜地期待着我。期待于冬日结果。生日的意义不是提醒我又长大一岁，而是温柔的告诉我，要好好的，毕竟有人曾经有人那么温柔的等待着我。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 闲言碎语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活记录 </tag>
            
            <tag> 成长 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="post/4a17b156.html"/>
      <url>post/4a17b156.html</url>
      
        <content type="html"><![CDATA[<h2 id="HELLO-WORLD">HELLO WORLD</h2><ul><li><p>已经记不清楚这是第几次写<code>hello world</code>了，从最早的emlog博客,到后来的typecho,再到后来的WordPress。基本没有写出什么有意义的东西。写的东西也基本都因为忘记导出数据库,忘记备份而丢失了…</p></li><li><p>在这之前,一直使用<a href="http://yunloli.com/">云上萝莉</a>的<code>香港免备案主机</code>,然而速度并不理想,又买不起昂贵的服务器,而最近阿里云做活动以很便宜的价格购买了服务器。</p></li><li><p>有时候，有些bug以我的能力确实也无法解决，但是现在可是互联网时代了呢建立博客后我们可以一起进步一起成长！</p></li><li><p>2019年11月3日，我的个人网站正式开始运行啦！！！</p></li><li><p>哈哈哈还是很开心的呢，毕竟也花费了不少的心血和心思呢…</p></li></ul><h2 id="站点历史">站点历史</h2><div class="timeline"><div class="timenode"><div class="meta"><p><p>2017年某天</p></p></div><div class="body"><p>有了建一个属于自己的个人网站的想法…</p></div></div><div class="timenode"><div class="meta"><p><p>2018年2月</p></p></div><div class="body"><p>使用白嫖的域名和免费主机+Emlog程序搭建了我的第一个博客…</p></div></div><div class="timenode"><div class="meta"><p><p>2018年3月</p></p></div><div class="body"><p>主机商跑路，博客数据丢失…</p></div></div><div class="timenode"><div class="meta"><p><p>2018年3月17日</p></p></div><div class="body"><p>在腾讯云购买域名<code>murmured.xyz</code></p></div></div><div class="timenode"><div class="meta"><p><p>2018年3月21日</p></p></div><div class="body"><p>在云上萝莉购买香港免备案主机。使用<code>typecho</code>程序+<code>Practice01</code>主题重新搭建博客(嗯…然后,疯狂更换主题)</p></div></div><div class="timenode"><div class="meta"><p><p>2018年5月</p></p></div><div class="body"><p>购买域名<code>minemine.xyz</code>。使用<code>wordpress</code>程序+<code>sakura</code>主题搭建博客镜像站</p></div></div><div class="timenode"><div class="meta"><p><p>2019年3月</p></p></div><div class="body"><p>续费免备案主机…</p></div></div><div class="timenode"><div class="meta"><p><p>2019年5月</p></p></div><div class="body"><p>域名<code>minemine.xyz</code>到期，没有续费，购买并更换新域名<code>Eliauk.cc</code></p></div></div><div class="timenode"><div class="meta"><p><p>2019年10月</p></p></div><div class="body"><p>网站数据库出问题，无法解决。一怒之下删了数据库(看来以后要好好学习数据库了)…</p></div></div><div class="timenode"><div class="meta"><p><p>2019年11月2日</p></p></div><div class="body"><p>决定重建博客，最后选用<code>HEXO</code>(我才不会说是因为不需要数据库)+<a href="https://github.com/theme-nexmoe/hexo-theme-nexmoe">Nexmoe</a>主题，默认路线部署于Coding，海外路线部署于Github</p></div></div><div class="timenode"><div class="meta"><p><p>2019年11月9日</p></p></div><div class="body"><p>更换主题为<a href="https://github.com/amehime/hexo-theme-shoka">Shoka</a>…</p></div></div><div class="timenode"><div class="meta"><p><p>2019年12月</p></p></div><div class="body"><p>更换主题为<a href="https://github.com/jerryc127/hexo-theme-butterfly">butterfly</a>…</p></div></div><div class="timenode"><div class="meta"><p><p>2020年11月</p></p></div><div class="body"><p>误点升级了<code>Coding pages</code>,网站变得奇慢无比，转投<a href="https://vercel.com/">Vercel</a>门下。</p></div></div><div class="timenode"><div class="meta"><p><p>2021年1月10日</p></p></div><div class="body"><p>购买并更换网站域名为<code>miraitowa.cc</code>…</p></div></div><div class="timenode"><div class="meta"><p><p>持续更新中</p></p></div><div class="body"><p>持续更新中…</p></div></div></div>]]></content>
      
      
      <categories>
          
          <category> 事件簿 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 记录 </tag>
            
            <tag> 历史 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
