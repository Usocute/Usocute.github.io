{
    "version": "https://jsonfeed.org/version/1",
    "title": "Miraitowa • All posts by \"cookie\" tag",
    "description": "永远期待着明亮的未来,一个收藏回忆记录成长的地方...",
    "home_page_url": "https://miraitowa.cc",
    "items": [
        {
            "id": "https://miraitowa.cc/post/7292aa95.html",
            "url": "https://miraitowa.cc/post/7292aa95.html",
            "title": "JavaScript高级⑥-存储(cookie)",
            "date_published": "2021-03-28T10:00:00.000Z",
            "content_html": "<h2 id=\"sessionStorage、localStorage和cookie\">sessionStorage、localStorage和cookie</h2>\n<h3 id=\"相同点\">相同点</h3>\n<ul>\n<li>都是保存在浏览器端、且同源的。</li>\n</ul>\n<h3 id=\"区别\">区别</h3>\n<ol>\n<li>cookie数据始终在同源的http请求中携带（即使不需要），即cookie在浏览器和服务器间来回传递，而sessionStorage和localStorage不会自动把数据发送给服务器，仅在本地保存。<code>cookie数据还有路径（path）的概念，可以限制cookie只属于某个路径下</code>。</li>\n<li>存储大小限制也不同，<code>cookie数据不能超过4K（小于4096）</code>，同时因为每次http请求都会携带cookie、所以<code>cookie只适合保存很小的数据，如会话标识</code>。<code>sessionStorage和localStorage</code>虽然也有存储大小的限制，但比cookie大得多，可以达到<code>5M或更大</code>。</li>\n<li>数据有效期不同，<code>sessionStorage</code>：仅在<code>当前浏览器窗口关闭之前</code>有效；<code>localStorage</code>：<code>始终有效</code>，窗口或浏览器关闭也一直保存，因此用作持久数据；<code>cookie</code>：只<code>在设置的cookie过期时间之前有效</code>，即使窗口关闭或浏览器关闭。</li>\n<li>作用域不同，sessionStorage不在不同的浏览器窗口中共享，即使是同一个页面；localstorage在所有同源窗口中都是共享的；cookie也是在所有同源窗口中都是共享的。</li>\n<li><code>web Storage</code>支持事件通知机制，可以将数据更新的通知发送给监听者。</li>\n<li><code>web Storage</code>的api接口使用更方便。</li>\n<li><code>sessionStorage</code>用于本地存储一个会话（session）中的数据，这些数据只有在同一个会话中的页面才能访问并且当会话结束后数据也随之销毁。因此<code>sessionStorage</code>不是一种持久化的本地存储，仅仅是会话级别的存储。而<code>localStorage</code>用于持久化的本地存储，除非主动删除数据，否则数据是永远不会过期的。</li>\n</ol>\n<h2 id=\"Cookie\">Cookie</h2>\n<ol>\n<li>\n<p>什么是Cookie：cookie是存储于用户计算机中的变量。每当该计算机通过浏览器请求某个页面时，就会发送这个cookie。我们可以使用JavaScript来创建和获取cookie的值。</p>\n</li>\n<li>\n<p>cookie的存储形式：<code>键值对</code>，如：<code>name=张三</code></p>\n</li>\n<li>\n<p>使用JS创建Cookie的格式：<code>document.cookie = “name=张三”;</code><br>\n还可以为cookie添加一个过期时间（UTC或GMT,默认情况下，cookie在浏览器关闭时删除）。如：</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.cookie = “name=张三;</span><br><span class=\"line\">expires=Thu, <span class=\"number\">18</span> Dec <span class=\"number\">2019</span> <span class=\"number\">12</span>:<span class=\"number\">00</span>:<span class=\"number\">00</span> GMT”;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>使用JS读取Cookie的格式： <code>var X = document.cookie;</code></p>\n</li>\n<li>\n<p>修改Cookie：JS中修改cookie类似于创建cookie，旧的cookie会被覆盖掉。</p>\n</li>\n<li>\n<p>删除Cookie：只需设置expires参数为以前的时间即可。<br>\n如：</p>\n <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.cookie = “name=张三; </span><br><span class=\"line\">expires=Thu, <span class=\"number\">18</span> Dec <span class=\"number\">2019</span> <span class=\"number\">12</span>:<span class=\"number\">00</span>:<span class=\"number\">00</span> GMT”;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>Cookie的缺点：</p>\n<ol>\n<li>Cookie可能被用户禁用。</li>\n<li>同一个页面被不同浏览器访问时，浏览器之间保存的Cookie不能相互访问。</li>\n<li>每个Cookie都保存在客户端硬盘文件上，可能会被删除。</li>\n<li>Cookie安全性不高，所有Cookie都是以纯文本形式记录于文件中。</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"Web存储机制\">Web存储机制</h2>\n<blockquote>\n<ul>\n<li>HTML5提供了一种新的对象<code>Storage</code>，类似于<code>String</code>、<code>Number</code>、<code>Object</code>。通过Storage对象提供的方法和属性来对数据进行增删改查。</li>\n<li>html5中的<code>Web Storage</code>包括了两种存储方式：<code>localStorage</code>和<code>sessionStorage</code>。两者都是用来存储客户端临时信息的对象。</li>\n<li><code>sessionStorage</code>用于本地存储一个会话（<code>session</code>）中的数据，这些数据只有在同一个会话中的页面才能访问，并且当会话结束后数据也随之销毁。因此sessionStorage不是一种持久化的本地存储，仅是会话级别的存储。只允许同一窗口访问。而localStorage用于持久化的本地存储，除非主动删除数据，否则数据是永远不会过期的。同源可以读取并修改localStorage数据。并且他们储存的对象类型均为字符串类型；我们将数据以键值对的形式保存到Storage对象里，通过Storage对象提供的方法进行数据操作。</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1. 增：接受一个键名和值作为参数，将会把键值对添加到存储中，如果键名存在，则更新其对应的值。</span></span><br><span class=\"line\">Storage.setItem()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//2. 删</span></span><br><span class=\"line\"><span class=\"comment\">// 清空存储中的所有键名</span></span><br><span class=\"line\">Storage.clear()</span><br><span class=\"line\"><span class=\"comment\">// 接受一个键名作为参数，并把该键名从存储中删除。</span></span><br><span class=\"line\">Storage.removeItem()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3. 改：接受一个键名和值作为参数，将会把键值对添加到存储中，如果键名存在，则更新其对应的值。</span></span><br><span class=\"line\">Storage.setItem()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 4. 查</span></span><br><span class=\"line\"><span class=\"comment\">// 接受一个键名作为参数，返回键名对应的值</span></span><br><span class=\"line\">Storage.getItem()</span><br><span class=\"line\"><span class=\"comment\">// 接受一个数值 n 作为参数，并返回存储中索引为n 的键名</span></span><br><span class=\"line\">Storage.key()</span><br><span class=\"line\"><span class=\"comment\">// 返回存储的数据量</span></span><br><span class=\"line\">Storage.length</span><br></pre></td></tr></table></figure>\n<h2 id=\"sessionStorage对象\">sessionStorage对象</h2>\n<ul>\n<li>sessionStorage对象存储某个特定会话的数据，该数据只保持到浏览器关闭（类似于cookie）。</li>\n<li>存储在sessionStorage对象中的数据可以跨越页面刷新而存在。部分浏览器也支持在浏览器崩溃的情况下重启仍然可用（如：Firefox和WebKit等，但是IE不支持）。</li>\n<li>sessionStorage对象其实是Storage对象的一个实例，具体方法如下：\n<ol>\n<li>sessionStorage.length:获取存储在Storage对象中的数据的数量，是一个只读属性。</li>\n<li>sessionStorage.key():接受一个数值 n 作为参数，并返回存储中索引为n 的键名。</li>\n<li>sessionStorage.getItem():接受一个键名作为参数，返回键名对应的值。</li>\n<li>sessionStorage.setItem()：接受一个键名和值作为参数，将会把键值对添加到存储中，如果键名存在，则更新其对应的值。</li>\n<li>sessionStorage.clear()：清空存储中的所有键名。</li>\n<li>sessionStorage.removeItem()：接受一个键名作为参数，并把该键名从存储中删除。</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"globalStorage\">globalStorage</h2>\n<blockquote>\n<p>globalStorage在浏览器关闭以后，使用globalStorage存储的信息仍能够保留下来，localStorage一样，域中任何一个页面存储的信息都能被所有的页面共享。</p>\n</blockquote>\n<ul>\n<li>基本语法</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在developer.mozilla.org下面所有的子域都可以通过这个命名空间存储对象来进行读和写</span></span><br><span class=\"line\">globalStorage[<span class=\"string\">&#x27;developer.mozilla.org&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在mozilla.org域名下面的所有网页都可以通过这个命名空间存储对象来进行读和写</span></span><br><span class=\"line\">globalStorage[<span class=\"string\">&#x27;mozilla.org&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在.org域名下面的所有网页都可以通过这个命名空间存储对象来进行读和写</span></span><br><span class=\"line\">globalStorage[<span class=\"string\">&#x27;org&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在任何域名下的任何网页都可以通过这个命名空间存储对象来进行读和写</span></span><br><span class=\"line\">globalStorage[<span class=\"string\">&#x27;&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 注意：globalStorage对象已经被localStorage对象取代。</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"localStorage对象\">localStorage对象</h2>\n<ul>\n<li>\n<p>localStorage的优势：</p>\n<ol>\n<li>localStorage拓展了cookie的4k限制。</li>\n<li>localStorage可用将第一次请求的数据直接存储到本地，相当于5M大小的针对于前端页面的数据库，相比于cookie可用节约带宽，但是只有在高版本浏览器中才支持。</li>\n</ol>\n</li>\n<li>\n<p>localStorage的局限：</p>\n<ol>\n<li>只有在IE8以上浏览器才支持localStorage的存储功能。</li>\n<li>目前所有浏览器都会把localStorage的值类型限定为string，这需要我们转换为JSON对象类型。</li>\n<li>localStorage在浏览器的隐私模式下不可读取。</li>\n<li>由于localStorage在本质上是对字符串的读取，所以如果存储的内容较多，会消耗掉内存空间，导致页面卡顿，加载速度减慢。</li>\n<li>localStorage不能被爬虫抓取到。</li>\n</ol>\n</li>\n</ul>\n<blockquote>\n<p>localStorage对象的具体方法与sessionStorage的方法一致。</p>\n</blockquote>\n",
            "tags": [
                "js",
                "js高级",
                "cookie"
            ]
        }
    ]
}